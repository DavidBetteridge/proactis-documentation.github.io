{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\nThis site provides technical documentation for the PROACTIS suite of applications.\n\n\nIntellectual Property\n\n\nThis document contains information related to certain products and services which is proprietary to PROACTIS Group Limited. Notably, all Intellectual property related to the deployment of the PROACTIS Suite of applications is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "PROACTIS"
        },
        {
            "location": "/#welcome",
            "text": "This site provides technical documentation for the PROACTIS suite of applications.",
            "title": "Welcome"
        },
        {
            "location": "/#intellectual-property",
            "text": "This document contains information related to certain products and services which is proprietary to PROACTIS Group Limited. Notably, all Intellectual property related to the deployment of the PROACTIS Suite of applications is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "Intellectual Property"
        },
        {
            "location": "/p2p/sso/",
            "text": "P2P Single-Sign-On (SSO)\n\n\nBy default PROACTIS expects the users to enter their username and password in order to login into PROACTIS P2P.   This document lists the possible ways in which PROACTIS P2P can be configured to allow users to authenticate using Single-Sign-On.\n\n\n\n\nNote\n\n\nIf you wish your users to use a combination of PROACTIS and SSO logins then add the following setting to the \nApplicationConfiguration.xml\n file.\n\n\n\n\n<Setting Name=\"AllowPROACTISLogins\">True</Setting>\n\n\n\n\n\n\nWindows Authentication\n\n\nIf your PROACTIS P2P server is on the same domain as your users then the system can be configured so that they are automatically signed on without the need for them to re-enter their username and password.\n\n\n\n\nEnsure that Windows Authentication is enabled in IIS for your PROACTIS website\n\n\n\n\nIt must first be installed as part of the \nWeb Server\n role. \n\n\n\n\nAnd then enabled in the authentication section of your website\n\n\n\n\n\n\nNote\n\n\nIf some of your users aren't on your domain,  then leave anonymous authentication enabled for them.\n\n\n\n\n\n\nAdd the following setting to the \nApplicationConfiguration.xml\n file.\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">WINDOWS</Setting>\n\n\n\n\n\n\nSet the \nNTLogon\n flag to True against the users,  and ensure that their usernames are in the format DOMAIN\\Username.  \nFor example PROACTIS\\DavidBetteridge\n\n\n\n\n\n\nSAML2\n\n\nPROACTIS P2P has built in support for SSO using the industry standard \nSAML2\n protocol.\n\n\n\n\nFirst generate (or obtain) a local certificate and provide the public part of this to your identity provider.\n\n\n\n\nmakecert -r -pe -n \"CN=your_cert_name\" -sky exchange -sv mycert.pvk mycert.cer\n\nEnter yourPassword for the subject key (3 times!)\n\npvk2pfx.exe -pvk mycert.pvk -spc mycert.cer  -pi yourPassword -pfx mycert.pfx -po yourPassword\n\n\n\n\n\n\nWith in your website's customer folder create a file called \nsaml.config\n.   This should be based on the following template.\n\n\n\n\n<?xml version=\"1.0\"?>\n<SAMLConfiguration xmlns=\"urn:componentspace:SAML:2.0:configuration\">\n\u00a0\u00a0 <ServiceProvider Name=\"service-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AssertionConsumerServiceUrl=\"~/SystemLogon/AssertionConsumerService\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificateFile=\"path-to-local-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificatePassword=\"local-certificate-password\"/>\n\u00a0\n\u00a0\n\u00a0\u00a0 <!-- ADFS -->\n\u00a0\u00a0 <PartnerIdentityProviders>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <PartnerIdentityProvider Name=\"partner-identity-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description=\"PROACTIS AD\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SignAuthnRequest=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantSAMLResponseSigned=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WantAssertionSigned=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantAssertionEncrypted=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PartnerCertificateFile=\"path-to-partner-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ClockSkew=\"00:03:00\"\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SingleSignOnServiceUrl=\"single-sign-on-service-url\"/>\n\u00a0\u00a0 </PartnerIdentityProviders>\n\u00a0\n</SAMLConfiguration>\n\n\n\n\n\n\nAdd the following settings to your application.configuration file\n\n\n\n\n<Setting Name=\"SSOAttributeName\">NameID</Setting>\n\n\n\n\nThe name of the attribute containing the user identifier in the attributes list returned from the ADFS server.\nIf not specified then no attribute lookup is made and user identification is based on the \u201cusername\u201d returned from the ADFS server.\n\u00a0\n\n\n<Setting Name=\"SSOAttributeNameMask\"></Setting>\n\n\n\n\nAn optional mask to be applied to the above user identifier value.\n\u00a0\n\n\n<Setting Name=\"SSOMatchP2PUserOnEmailAddress\">False</Setting>\n\n\n\n\nBy default, P2P searches the database Users table to find a user whose \u201cLoginID\u201d matches the identifier value returned from the ADFS server.\nThis optional setting will cause the lookup to be made on \u201cEmailAddress\u201d rather than \u201cLoginID\u201d\n\u00a0\n\n\n<Setting Name=\"SSODatabaseTitle\"></Setting>\n\n\n\n\nAn optional setting that only applies when a user who is already logged into a 3rd party system, initiates a logon to P2P via SSO. In this scenario, the user is not \npresented with a logon page. If the user has access to multiple databases, then this setting specifies the database title (in the database xml file) to log into.\nIf this setting is not present, P2P will select the default database in the databases xml file (or the first database if no default).\nObviously if only one database is available, then this setting is unnecessary.\n\n\n\n\nExternal\n\n\nBy default PROACTIS P2P validates the username and password entered by the user against the record in the \ndsdba.Users\n table.   It is however possible to customise PROACTIS so that users are validated against an external userstore such as LDAP.\n\n\nThe following steps should be followed in order to create an external validation DLL.\n\n\n\n\n\n\nCreate a new C# class library with a class called \nServices\n which implements the \nILogin\n interface.  This interface can be found in \nPROACTIS.P2P.grsCustInterfaces.DLL\n\n\n\n\n\n\nDecide if your login process will be called asynchronously or not and implement the UseAsynchronousImplementation as required.\n\n\n\n\n\n\n    public bool UseAsynchronousImplementation => false;\n\n\n\n\n\n\n\n\nImplement the \nLogin\n (or \nLoginAsync\n) method with your custom validation code.  This method should return True for a successful login and False for a failure.  (For security reasons it is not possible to return messages informing the user why the login failed.  For example \nthe username does not exist\n)\n\n\n\n\n\n\nCompile your code,  and ensure that the resulting DLL is named xyzLogin.DLL.   (xyz can be anything)\n\n\n\n\n\n\nCopy the DLL into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.\n\n\n\n\n\n\nAdd the following setting into your \napplicationconfiguration.xml\n file.\n\n\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">EXTERNAL</Setting>\n\n\n\n\nSee the \nPROACTIS.ExampleApplications.ExternalLogin\n example application for a complete sample implementation.\n\n\n\n\nNote\n\n\n\n\nIn order to login using the external DLL,  the user must have their NTLogon property set to True\n\n\nFailed login attempts aren't recorded\n\n\n\n\n\n\n\n\nBespoke\n\n\nIt is also possible to provide your users with a completely custom login process,  including replacing the login screen and adding the ability to automatically create users the first time they connect.\n\n\nThe process is to :\n\n\n\n\n\n\nCreate a custom page in your website's customer folder called \nCustomLogin\n\n\n\n\n\n\nWithin that page collect any required details from the user and validate their credentials.\n\n\n\n\n\n\nIf the user entered valid details then log them on by:\n\n\n\n\nFirst generating a unique token for them\n\n\nThen writing the token to the \nDSDBA.CustomLoginTokens\n table.\n\n\nFinally redirecting the user's browser to CustomLoginAsync within the main site.\n\n\n\n\n\n\n\n\nTo enable your new page to be used,  the following settings should be added to the \nApplicationConfiguration\n file.\n\n\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">CUSTOM</Setting>\n<Setting Name=\"CustomLoginURL\">https://server/custom/CustomLogin.aspx</Setting>\n\n\n\n\nWhere \nserver\n is the address of your core P2P website.\n\n\nSee these \nexample pages\n for a complete sample.\n\n\n\n\nNote\n\n\nUpon exit from P2P, the browser will be redirected back to the custom login page with the following in the querystring \naction=logout\n. If the custom logon page uses automated logins then it must take notice of this parameter to not automatically log the user back in again\n\n\n\n\nReturn Messages\n\n\nMessages are return to the custom login page using the following query string format\n\nInfoMessages=XXX&AlertMessages=YYY&ErrorMessages=ZZZ\n\n\nWhere XXX, YYY and ZZZ are base64 encoded UNICODE strings. Each encoded string contains the messages concatenate with a \u201c|\u201d separator. (see sample app)\nThese entries will only be in the querystring if there are messages to return.",
            "title": "Single Sign On (SSO)"
        },
        {
            "location": "/p2p/sso/#p2p-single-sign-on-sso",
            "text": "By default PROACTIS expects the users to enter their username and password in order to login into PROACTIS P2P.   This document lists the possible ways in which PROACTIS P2P can be configured to allow users to authenticate using Single-Sign-On.   Note  If you wish your users to use a combination of PROACTIS and SSO logins then add the following setting to the  ApplicationConfiguration.xml  file.   <Setting Name=\"AllowPROACTISLogins\">True</Setting>",
            "title": "P2P Single-Sign-On (SSO)"
        },
        {
            "location": "/p2p/sso/#windows-authentication",
            "text": "If your PROACTIS P2P server is on the same domain as your users then the system can be configured so that they are automatically signed on without the need for them to re-enter their username and password.   Ensure that Windows Authentication is enabled in IIS for your PROACTIS website   It must first be installed as part of the  Web Server  role.    And then enabled in the authentication section of your website    Note  If some of your users aren't on your domain,  then leave anonymous authentication enabled for them.    Add the following setting to the  ApplicationConfiguration.xml  file.   <Setting Name=\"AuthenticationMethod\">WINDOWS</Setting>   Set the  NTLogon  flag to True against the users,  and ensure that their usernames are in the format DOMAIN\\Username.   For example PROACTIS\\DavidBetteridge",
            "title": "Windows Authentication"
        },
        {
            "location": "/p2p/sso/#saml2",
            "text": "PROACTIS P2P has built in support for SSO using the industry standard  SAML2  protocol.   First generate (or obtain) a local certificate and provide the public part of this to your identity provider.   makecert -r -pe -n \"CN=your_cert_name\" -sky exchange -sv mycert.pvk mycert.cer\n\nEnter yourPassword for the subject key (3 times!)\n\npvk2pfx.exe -pvk mycert.pvk -spc mycert.cer  -pi yourPassword -pfx mycert.pfx -po yourPassword   With in your website's customer folder create a file called  saml.config .   This should be based on the following template.   <?xml version=\"1.0\"?>\n<SAMLConfiguration xmlns=\"urn:componentspace:SAML:2.0:configuration\">\n\u00a0\u00a0 <ServiceProvider Name=\"service-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AssertionConsumerServiceUrl=\"~/SystemLogon/AssertionConsumerService\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificateFile=\"path-to-local-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificatePassword=\"local-certificate-password\"/>\n\u00a0\n\u00a0\n\u00a0\u00a0 <!-- ADFS -->\n\u00a0\u00a0 <PartnerIdentityProviders>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <PartnerIdentityProvider Name=\"partner-identity-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description=\"PROACTIS AD\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SignAuthnRequest=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantSAMLResponseSigned=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WantAssertionSigned=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantAssertionEncrypted=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PartnerCertificateFile=\"path-to-partner-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ClockSkew=\"00:03:00\"\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SingleSignOnServiceUrl=\"single-sign-on-service-url\"/>\n\u00a0\u00a0 </PartnerIdentityProviders>\n\u00a0\n</SAMLConfiguration>   Add the following settings to your application.configuration file   <Setting Name=\"SSOAttributeName\">NameID</Setting>  The name of the attribute containing the user identifier in the attributes list returned from the ADFS server.\nIf not specified then no attribute lookup is made and user identification is based on the \u201cusername\u201d returned from the ADFS server.\n\u00a0  <Setting Name=\"SSOAttributeNameMask\"></Setting>  An optional mask to be applied to the above user identifier value.\n\u00a0  <Setting Name=\"SSOMatchP2PUserOnEmailAddress\">False</Setting>  By default, P2P searches the database Users table to find a user whose \u201cLoginID\u201d matches the identifier value returned from the ADFS server.\nThis optional setting will cause the lookup to be made on \u201cEmailAddress\u201d rather than \u201cLoginID\u201d\n\u00a0  <Setting Name=\"SSODatabaseTitle\"></Setting>  An optional setting that only applies when a user who is already logged into a 3rd party system, initiates a logon to P2P via SSO. In this scenario, the user is not \npresented with a logon page. If the user has access to multiple databases, then this setting specifies the database title (in the database xml file) to log into.\nIf this setting is not present, P2P will select the default database in the databases xml file (or the first database if no default).\nObviously if only one database is available, then this setting is unnecessary.",
            "title": "SAML2"
        },
        {
            "location": "/p2p/sso/#external",
            "text": "By default PROACTIS P2P validates the username and password entered by the user against the record in the  dsdba.Users  table.   It is however possible to customise PROACTIS so that users are validated against an external userstore such as LDAP.  The following steps should be followed in order to create an external validation DLL.    Create a new C# class library with a class called  Services  which implements the  ILogin  interface.  This interface can be found in  PROACTIS.P2P.grsCustInterfaces.DLL    Decide if your login process will be called asynchronously or not and implement the UseAsynchronousImplementation as required.        public bool UseAsynchronousImplementation => false;    Implement the  Login  (or  LoginAsync ) method with your custom validation code.  This method should return True for a successful login and False for a failure.  (For security reasons it is not possible to return messages informing the user why the login failed.  For example  the username does not exist )    Compile your code,  and ensure that the resulting DLL is named xyzLogin.DLL.   (xyz can be anything)    Copy the DLL into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.    Add the following setting into your  applicationconfiguration.xml  file.    <Setting Name=\"AuthenticationMethod\">EXTERNAL</Setting>  See the  PROACTIS.ExampleApplications.ExternalLogin  example application for a complete sample implementation.   Note   In order to login using the external DLL,  the user must have their NTLogon property set to True  Failed login attempts aren't recorded",
            "title": "External"
        },
        {
            "location": "/p2p/sso/#bespoke",
            "text": "It is also possible to provide your users with a completely custom login process,  including replacing the login screen and adding the ability to automatically create users the first time they connect.  The process is to :    Create a custom page in your website's customer folder called  CustomLogin    Within that page collect any required details from the user and validate their credentials.    If the user entered valid details then log them on by:   First generating a unique token for them  Then writing the token to the  DSDBA.CustomLoginTokens  table.  Finally redirecting the user's browser to CustomLoginAsync within the main site.     To enable your new page to be used,  the following settings should be added to the  ApplicationConfiguration  file.    <Setting Name=\"AuthenticationMethod\">CUSTOM</Setting>\n<Setting Name=\"CustomLoginURL\">https://server/custom/CustomLogin.aspx</Setting>  Where  server  is the address of your core P2P website.  See these  example pages  for a complete sample.   Note  Upon exit from P2P, the browser will be redirected back to the custom login page with the following in the querystring  action=logout . If the custom logon page uses automated logins then it must take notice of this parameter to not automatically log the user back in again",
            "title": "Bespoke"
        },
        {
            "location": "/p2p/sso/#return-messages",
            "text": "Messages are return to the custom login page using the following query string format InfoMessages=XXX&AlertMessages=YYY&ErrorMessages=ZZZ  Where XXX, YYY and ZZZ are base64 encoded UNICODE strings. Each encoded string contains the messages concatenate with a \u201c|\u201d separator. (see sample app)\nThese entries will only be in the querystring if there are messages to return.",
            "title": "Return Messages"
        },
        {
            "location": "/p2p/punchout/",
            "text": "PunchOut\n\n\nOverview\n\n\nPunchOut allows a user to jump from the PROACTIS P2P website into a supplier\u2019s shopping site.  Where they can browse a catalogue and add items to a shopping basket as per a normal e-commerce site.  Once they have finished browsing they click checkout and the items are then returned to PROACTIS as new lines on their current purchase order (or requisition).\nFor the purposes of this document, the term PunchOut does not include the ability to electronically export purchase orders to suppliers in cXML format.\n\n\n\n\nNote\n\n\nThis document details how to configure connections to supplier PunchOut sites and marketplaces in the latest release of PROACTIS P2P `17.\nUnlike the previous versions it is now possible to configure the connections directly within the product.  Previously the setup action was carried out by a technical consultant which required the coding of bespoke webpages and sometimes DLLs for installation on the P2P server.\n\n\n\n\n\n\nPunchThro.\n\n\nThere are three different methods of configuring PunchOut within the PROACTIS P2P product.   This first is referred to as punch-thro.  This is where the buyer connects to the suppliers PunchOut site via the PROACTIS S2C portal. \n\n\nAs the details of the suppliers site are configured in the PROACTIS S2C Portal the only P2P settings required are as shown below\n\n\n\n\nConfigure the connection to your PROACTIS S2C portal.  (\nApplication\n -> \nPROACTIS Connectivity\n)\n\n\n\n\n\n\n\n\nEnable the PunchOut via portal setting against the supplier.\n\n\n\n\n\n\n\n\ncXML PunchOut\n\n\nThe majority of PunchOuts follow the \ncXML\n standard.  This can be configured directly within the P2P product by completing the following fields against a supplier.\n\n\n\n\n\n\nNote\n\n\n\n\nThe values for these 5 fields should be agreed with the supplier however DUNs numbers are often used for the three identities.\n\n\nThe fields can also be edited using the new WebPMC.\n\n\n\n\n\n\n\n\nOCI PunchOut\n\n\nLess commonly used in the UK, but PROACTIS also supports the \nOpen Catalog Interface\n (OCI) PunchOut standard.  Again this can be configured directly within the product by completing the following three fields.\n\n\n\n\n\n\nNote\n\n\nThe supplier will normally provide you with their URL and your sender identity and secret.\n\n\n\n\n\n\nPunchOut customisations\n\n\nIt is possible to customise PunchOut at various points within the process:\n\n\ncXML Handshake\n\n\nThe format of the cXML sent in the initial connection to the supplier\u2019s site is generated from an XML using an XSLT transformation.  By default PROACTIS uses an XSLT embedded within the product however it is possible to use your own xslt by creating a file within the plugins folder called \nPunchoutConnection_{supplierCode}.xslt\n.  Where \n{supplierCode}\n is the code of your supplier.\n\n\nThe fields which are available to the XSLT are listed below.\n\n\n\n\nContext\n\n\nSessionID\n\n\nSupplierCode\n\n\nDepartmentCode\n\n\nCompanyCode\n\n\nTemplateLabel\n\n\nLogonName\n\n\nActualName\n\n\nFirstName\n\n\nSurname\n\n\nEmail\n\n\nReturnURL\n\n\nURL\n\n\nBuyerCookie\n\n\nPayloadID\n\n\nTimestamp\n\n\nPunchoutFromIdentity\n\n\nPunchoutToIdentity\n\n\nPunchoutSenderIdentity\n\n\nPunchoutSenderSharedSecret\n\n\nDeliveryAddressGUID\n\n\nDeliveryAddressName\n\n\nDeliveryAddressLine1\n\n\nDeliveryAddressLine2\n\n\nDeliveryAddressLine3\n\n\nDeliveryAddressLine4\n\n\nDeliveryCountry\n\n\nDeliveryCounty\n\n\nDeliveryPostcode\n\n\nDeliveryPostTown\n\n\n\n\nAn example XSLT document is available \nhere\n.\n\n\ncXML & OCI Returned Basket\n\n\nWhen the basket is returned from the supplier by default it is transformed into the correct P2P format by using an XSLT embedded within the product.  This can be replaced by your own transform by creating a file in the plugins folder called \nReturnedPunchoutBasket_{supplierCode}.xslt\n Where \n{supplierCode}\n is the code of your supplier.\nThe XSLT must generate XML in the following format:\n\n\n<PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>\n\n\n\n\nAn example XSLT document is available \nhere\n.\n\n\nCustom Return Page\n\n\nBy default the supplier posts their basket back to either \nPunchoutReturned.aspx\n (for cxml) or \nPunchoutReturnedOCI.aspx\n (for oci).  It is however possible for you to provide your own page for processing the returned basket.  This is configured by completing the following field against the supplier record.\n\n\n\n\nThis page should be placed in the Customer folder within the website.\n\n\nThe default \nPunchoutReturned.aspx\n page looks for the basket xml in the following form fields:\n\n\n\n\nXML\n\n\ncxml-urlencode\n\n\ncxml-urlencoded\n\n\ncXML-base64\n\n\noracleCart\n\n\nthe first form field\n\n\n\n\nThe default \nPunchoutReturnedOCI.aspx\n page looks for the basket xml in the form fields as follows:\n\n\n\n\nThe items are returned in arrays of fields.  Indexed from 1 onwards\n\n\nFirst it checks there is a field called NEW_ITEM+DESCRIPTION[1].  If there isn\u2019t then it assumes that no basket items were returned.\n\n\nIt then loops through all fields which are named in the format NEW_xxxxx[n] where xxxxx is the name of a property and n is the item number.\n\n\nEach of these form fields are then added into the xml.  The result xml will have the following format:\n\n\n\n\n<PurchaseOrder>\n    <line number=1 item+description=\u2019red pen\u2019 etc etc />\n</PurchaseOrder>\n\n\n\n\nMarket Place\n\n\nPROACTIS P2P allows users to connect to a \u201cmarket place\u201d where they can then browse catalogues of one or more suppliers.  When they have finished browsing and click check-out then their returned basket is used to create one or more draft purchase orders (or requisitions) within PROACTIS.\nUnlike previous versions of PROACTIS it is now possible to configure marketplace connections directly within the product.\n\n\nConfiguration\n\n\nUsing the \u201cSystem Control\u201d application choose the Marketplaces option from the Supplier Maintenance menu.  Add a New market place and complete both the Details and PunchOut sections.\n\n\nThe following marketplace types (standards) are currently supported:\n\n\n\n\nCXML\n\n\nPROACTIS EGS\n\n\nProcserve\n\n\nScience warehouse\n\n\n\n\nThe Supplier Code Mapped From field specifies how the supplier code in the returned basket is mapped back to the suppliers within PROACTIS.\n\n\nCustomisation\n\n\nThe xml used for the initial connection is generated using an xslt embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called \nMarketPlaceConnection_{marketPlaceName}.xslt\n.  Where \n{marketPlaceName}\n is the name of the configured marketplace.\nThe fields passed into the xml are listed below:\n\n\n\n\nDepartmentCode\n\n\nCompanyCode\n\n\nLogonName\n\n\nEmail\n\n\nReturnURL\n\n\nURL\n\n\nBuyerCookie\n\n\nPayloadID\n\n\nTimestamp\n\n\nPunchoutFromIdentity\n\n\nPunchoutToIdentity\n\n\nPunchoutSenderIdentity\n\n\nPunchoutSenderSharedSecret\n\n\n\n\nWhen the basket is returned from the market place by default it is transformed into the correct format by using an XSLT embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called \nMarketPlaceResult_{marketPlaceName}.xslt\n.  Where \n{marketPlaceName}\n is the name of the configured marketplace.\nThe xslt needs to generate xml in the following format\n\n\n<PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>\n\n\n\n\nEGS Marketplaces\n\n\nThe EGS settings within the PROACTIS Connectivity snapin, do not refer to marketplace PunchOut.  This are used to configure different functionality not covered by this document.\n\n\nProxy Server\n\n\nConnections to both supplier PunchOut, and marketplaces honour the proxy server settings held in the \ndsdba.ProxySettings\n table.\nThis can be configured using the System Control application.",
            "title": "PunchOut / Marketplaces"
        },
        {
            "location": "/p2p/punchout/#punchout",
            "text": "",
            "title": "PunchOut"
        },
        {
            "location": "/p2p/punchout/#overview",
            "text": "PunchOut allows a user to jump from the PROACTIS P2P website into a supplier\u2019s shopping site.  Where they can browse a catalogue and add items to a shopping basket as per a normal e-commerce site.  Once they have finished browsing they click checkout and the items are then returned to PROACTIS as new lines on their current purchase order (or requisition).\nFor the purposes of this document, the term PunchOut does not include the ability to electronically export purchase orders to suppliers in cXML format.   Note  This document details how to configure connections to supplier PunchOut sites and marketplaces in the latest release of PROACTIS P2P `17.\nUnlike the previous versions it is now possible to configure the connections directly within the product.  Previously the setup action was carried out by a technical consultant which required the coding of bespoke webpages and sometimes DLLs for installation on the P2P server.",
            "title": "Overview"
        },
        {
            "location": "/p2p/punchout/#punchthro",
            "text": "There are three different methods of configuring PunchOut within the PROACTIS P2P product.   This first is referred to as punch-thro.  This is where the buyer connects to the suppliers PunchOut site via the PROACTIS S2C portal.   As the details of the suppliers site are configured in the PROACTIS S2C Portal the only P2P settings required are as shown below   Configure the connection to your PROACTIS S2C portal.  ( Application  ->  PROACTIS Connectivity )     Enable the PunchOut via portal setting against the supplier.",
            "title": "PunchThro."
        },
        {
            "location": "/p2p/punchout/#cxml-punchout",
            "text": "The majority of PunchOuts follow the  cXML  standard.  This can be configured directly within the P2P product by completing the following fields against a supplier.    Note   The values for these 5 fields should be agreed with the supplier however DUNs numbers are often used for the three identities.  The fields can also be edited using the new WebPMC.",
            "title": "cXML PunchOut"
        },
        {
            "location": "/p2p/punchout/#oci-punchout",
            "text": "Less commonly used in the UK, but PROACTIS also supports the  Open Catalog Interface  (OCI) PunchOut standard.  Again this can be configured directly within the product by completing the following three fields.    Note  The supplier will normally provide you with their URL and your sender identity and secret.",
            "title": "OCI PunchOut"
        },
        {
            "location": "/p2p/punchout/#punchout-customisations",
            "text": "It is possible to customise PunchOut at various points within the process:",
            "title": "PunchOut customisations"
        },
        {
            "location": "/p2p/punchout/#cxml-handshake",
            "text": "The format of the cXML sent in the initial connection to the supplier\u2019s site is generated from an XML using an XSLT transformation.  By default PROACTIS uses an XSLT embedded within the product however it is possible to use your own xslt by creating a file within the plugins folder called  PunchoutConnection_{supplierCode}.xslt .  Where  {supplierCode}  is the code of your supplier.  The fields which are available to the XSLT are listed below.   Context  SessionID  SupplierCode  DepartmentCode  CompanyCode  TemplateLabel  LogonName  ActualName  FirstName  Surname  Email  ReturnURL  URL  BuyerCookie  PayloadID  Timestamp  PunchoutFromIdentity  PunchoutToIdentity  PunchoutSenderIdentity  PunchoutSenderSharedSecret  DeliveryAddressGUID  DeliveryAddressName  DeliveryAddressLine1  DeliveryAddressLine2  DeliveryAddressLine3  DeliveryAddressLine4  DeliveryCountry  DeliveryCounty  DeliveryPostcode  DeliveryPostTown   An example XSLT document is available  here .",
            "title": "cXML Handshake"
        },
        {
            "location": "/p2p/punchout/#cxml-oci-returned-basket",
            "text": "When the basket is returned from the supplier by default it is transformed into the correct P2P format by using an XSLT embedded within the product.  This can be replaced by your own transform by creating a file in the plugins folder called  ReturnedPunchoutBasket_{supplierCode}.xslt  Where  {supplierCode}  is the code of your supplier.\nThe XSLT must generate XML in the following format:  <PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>  An example XSLT document is available  here .",
            "title": "cXML &amp; OCI Returned Basket"
        },
        {
            "location": "/p2p/punchout/#custom-return-page",
            "text": "By default the supplier posts their basket back to either  PunchoutReturned.aspx  (for cxml) or  PunchoutReturnedOCI.aspx  (for oci).  It is however possible for you to provide your own page for processing the returned basket.  This is configured by completing the following field against the supplier record.   This page should be placed in the Customer folder within the website.  The default  PunchoutReturned.aspx  page looks for the basket xml in the following form fields:   XML  cxml-urlencode  cxml-urlencoded  cXML-base64  oracleCart  the first form field   The default  PunchoutReturnedOCI.aspx  page looks for the basket xml in the form fields as follows:   The items are returned in arrays of fields.  Indexed from 1 onwards  First it checks there is a field called NEW_ITEM+DESCRIPTION[1].  If there isn\u2019t then it assumes that no basket items were returned.  It then loops through all fields which are named in the format NEW_xxxxx[n] where xxxxx is the name of a property and n is the item number.  Each of these form fields are then added into the xml.  The result xml will have the following format:   <PurchaseOrder>\n    <line number=1 item+description=\u2019red pen\u2019 etc etc />\n</PurchaseOrder>",
            "title": "Custom Return Page"
        },
        {
            "location": "/p2p/punchout/#market-place",
            "text": "PROACTIS P2P allows users to connect to a \u201cmarket place\u201d where they can then browse catalogues of one or more suppliers.  When they have finished browsing and click check-out then their returned basket is used to create one or more draft purchase orders (or requisitions) within PROACTIS.\nUnlike previous versions of PROACTIS it is now possible to configure marketplace connections directly within the product.",
            "title": "Market Place"
        },
        {
            "location": "/p2p/punchout/#configuration",
            "text": "Using the \u201cSystem Control\u201d application choose the Marketplaces option from the Supplier Maintenance menu.  Add a New market place and complete both the Details and PunchOut sections.  The following marketplace types (standards) are currently supported:   CXML  PROACTIS EGS  Procserve  Science warehouse   The Supplier Code Mapped From field specifies how the supplier code in the returned basket is mapped back to the suppliers within PROACTIS.",
            "title": "Configuration"
        },
        {
            "location": "/p2p/punchout/#customisation",
            "text": "The xml used for the initial connection is generated using an xslt embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called  MarketPlaceConnection_{marketPlaceName}.xslt .  Where  {marketPlaceName}  is the name of the configured marketplace.\nThe fields passed into the xml are listed below:   DepartmentCode  CompanyCode  LogonName  Email  ReturnURL  URL  BuyerCookie  PayloadID  Timestamp  PunchoutFromIdentity  PunchoutToIdentity  PunchoutSenderIdentity  PunchoutSenderSharedSecret   When the basket is returned from the market place by default it is transformed into the correct format by using an XSLT embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called  MarketPlaceResult_{marketPlaceName}.xslt .  Where  {marketPlaceName}  is the name of the configured marketplace.\nThe xslt needs to generate xml in the following format  <PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>",
            "title": "Customisation"
        },
        {
            "location": "/p2p/punchout/#egs-marketplaces",
            "text": "The EGS settings within the PROACTIS Connectivity snapin, do not refer to marketplace PunchOut.  This are used to configure different functionality not covered by this document.",
            "title": "EGS Marketplaces"
        },
        {
            "location": "/p2p/punchout/#proxy-server",
            "text": "Connections to both supplier PunchOut, and marketplaces honour the proxy server settings held in the  dsdba.ProxySettings  table.\nThis can be configured using the System Control application.",
            "title": "Proxy Server"
        },
        {
            "location": "/p2p/nominalvalidation/",
            "text": "Nominal Validation\n\n\nOverview\n\n\nThe core PROACTIS P2P product includes the functionality for complex nominal rules to be defined using the concept of nominal groups.\n\n\nIn some situations there might be a requirement to also validate the nominal coding entered against a purchase order line against an external source,  such as a finance system.\n\n\nIn a lot of cases this can be configured using the \nGeneric Nominal Validation\n snapin directly within the product.  This is the preferred approach as all the configuration is held within the database and the generic nominal validation module automatically provides extra features such as caching.\n\n\nIf \nGeneric Nominal Validation\n is not suitable for your needs then a custom DLL can be implemented providing you with complete control of the process.\n\n\n\n\nImplementation Steps\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzNominalValidation. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll\n\n\n\n\n\n\nAdd a class called \nServices\n which implements the \ngrsCustInterfaces.INominals\n interface.\n\n\n\n\n\n\nWrite an implementation of the \ngrsCustInterfaces.INominals.NominalCheck\n method.\n\n\n\n\n\n\nbool grsCustInterfaces.INominals.NominalCheck(string NominalsXML, string POXML, ref string ErrorNominals)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNominalsXML\n\n\nIn\n\n\nAn xml document containing the nominals which need to be validated.  This also includes details of the database,  company and user.\n\n\n\n\n\n\nPOXML\n\n\nIn\n\n\nAn xml document containing the entire purchase order to validate.  By default this argument is blank unless the company-wide setting is enabled.\n\n\n\n\n\n\nErrorNominals\n\n\nOut\n\n\nIf the nominals fail validation,  then you should return an xml document listing the failing nominals.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return True if all nominals are valid and False if one or more nominals are invalid.\n\n\nNominals XML\n\n\nBelow is an example of the xml passed to the \nNominalsXML\n argument.\n\n\n<grs:NominalCheck xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n    <grs:Database grs:Server=\"Develop07\" grs:DatabaseName=\"PROACTISIII\"/>\n\n    <grs:General grs:UserGUID=\"{02E0D6D9-B655-11D5-91D6-000629864A98}\" grs:CompanyGUID=\"{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}\"/>\n\n    <grs:Nominals>\n    <grs:Nominal grs:Coding=\"1720\" grs:Element1=\"1720\" grs:Element2=\"\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:El\n    ement8=\"\" grs:ValidNominal=\"False\"/>\n\n        <grs:Nominal grs:Coding=\"4744.1100\" grs:Element1=\"4744\" grs:Element2=\"1100\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n    </grs:Nominals>\n</grs:NominalCheck>\n\n\n\n\nPOXML\n\n\n\n\nWarning\n\n\nThe POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively. \n\n\n\n\nError Nominals\n\n\nThe xml for the returned invalid nominals takes a similar structure to the NominalsXML argument.  For example:\n\n\n<grs:Nominals xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n   <grs:Nominal grs:Coding=\"1720\" grs:Element1=\"1720\" grs:Element2=\"\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n   <grs:Nominal grs:Coding=\"4744.1100\" grs:Element1=\"4744\" grs:Element2=\"1100\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n</grs:Nominals>\n\n\n\n\n\n\nExample\n\n\nSee the \nexample application\n for a complete implementation.\n\n\n\n\nDeployment\n\n\nYou dll should be complied (and named xyzNominalValidation.dll) and then copied into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.",
            "title": "Nominal Validation"
        },
        {
            "location": "/p2p/nominalvalidation/#nominal-validation",
            "text": "",
            "title": "Nominal Validation"
        },
        {
            "location": "/p2p/nominalvalidation/#overview",
            "text": "The core PROACTIS P2P product includes the functionality for complex nominal rules to be defined using the concept of nominal groups.  In some situations there might be a requirement to also validate the nominal coding entered against a purchase order line against an external source,  such as a finance system.  In a lot of cases this can be configured using the  Generic Nominal Validation  snapin directly within the product.  This is the preferred approach as all the configuration is held within the database and the generic nominal validation module automatically provides extra features such as caching.  If  Generic Nominal Validation  is not suitable for your needs then a custom DLL can be implemented providing you with complete control of the process.",
            "title": "Overview"
        },
        {
            "location": "/p2p/nominalvalidation/#implementation-steps",
            "text": "Create a new C# Class Library project called xyzNominalValidation. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll    Add a class called  Services  which implements the  grsCustInterfaces.INominals  interface.    Write an implementation of the  grsCustInterfaces.INominals.NominalCheck  method.    bool grsCustInterfaces.INominals.NominalCheck(string NominalsXML, string POXML, ref string ErrorNominals)",
            "title": "Implementation Steps"
        },
        {
            "location": "/p2p/nominalvalidation/#arguments",
            "text": "Argument  Direction  Description      NominalsXML  In  An xml document containing the nominals which need to be validated.  This also includes details of the database,  company and user.    POXML  In  An xml document containing the entire purchase order to validate.  By default this argument is blank unless the company-wide setting is enabled.    ErrorNominals  Out  If the nominals fail validation,  then you should return an xml document listing the failing nominals.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/nominalvalidation/#return-value",
            "text": "The function should return True if all nominals are valid and False if one or more nominals are invalid.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/nominalvalidation/#nominals-xml",
            "text": "Below is an example of the xml passed to the  NominalsXML  argument.  <grs:NominalCheck xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n    <grs:Database grs:Server=\"Develop07\" grs:DatabaseName=\"PROACTISIII\"/>\n\n    <grs:General grs:UserGUID=\"{02E0D6D9-B655-11D5-91D6-000629864A98}\" grs:CompanyGUID=\"{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}\"/>\n\n    <grs:Nominals>\n    <grs:Nominal grs:Coding=\"1720\" grs:Element1=\"1720\" grs:Element2=\"\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:El\n    ement8=\"\" grs:ValidNominal=\"False\"/>\n\n        <grs:Nominal grs:Coding=\"4744.1100\" grs:Element1=\"4744\" grs:Element2=\"1100\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n    </grs:Nominals>\n</grs:NominalCheck>",
            "title": "Nominals XML"
        },
        {
            "location": "/p2p/nominalvalidation/#poxml",
            "text": "Warning  The POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively.",
            "title": "POXML"
        },
        {
            "location": "/p2p/nominalvalidation/#error-nominals",
            "text": "The xml for the returned invalid nominals takes a similar structure to the NominalsXML argument.  For example:  <grs:Nominals xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n   <grs:Nominal grs:Coding=\"1720\" grs:Element1=\"1720\" grs:Element2=\"\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n   <grs:Nominal grs:Coding=\"4744.1100\" grs:Element1=\"4744\" grs:Element2=\"1100\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n</grs:Nominals>",
            "title": "Error Nominals"
        },
        {
            "location": "/p2p/nominalvalidation/#example",
            "text": "See the  example application  for a complete implementation.",
            "title": "Example"
        },
        {
            "location": "/p2p/nominalvalidation/#deployment",
            "text": "You dll should be complied (and named xyzNominalValidation.dll) and then copied into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.",
            "title": "Deployment"
        },
        {
            "location": "/p2p/budgetchecking/",
            "text": "Budget Checking\n\n\nOverview\n\n\nPROACTIS P2P allows budgets to be checking against an external source when a purchase order is being submitted.\n\n\nThe preferred method is to configure budget checking using the \nGeneric Budget Checking\n snapin and the module keeps all the settings in the P2P database and automatically provides additional functions such as caching.\n\n\n\n\nCustom DLL\n\n\nTo write a custom budget checking DLL,  the following methods must be implemented.\n\n\n\n\n\n\nCommitmentCheck\n\nGiven a set of nominal lines from a purchase order returns False if at least one line on the order has failed budget checking\n\n\n\n\n\n\nCommitmentReport\n\nGiven a set of nominal lines from a purchase order returns a custom table showing the available funds calculation for each.  For example the table might have columns for Original Budget,  Spend To Date,  Accruals and Remaining Budget.\n\n\n\n\n\n\nGetOverspend\n\nGiven a set of nominal lines from a purchase order returns the total amount that the document exceeds the available budget.   This figure can be used in your authorisation workflow to route an document to the correct approver.\n\n\n\n\n\n\n\n\nNote\n\n\nYou are not required to implement the \nGetOverspend\n method but it is recommended.\n\n\n\n\n\n\nImplementation\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzBudgetChecking. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll\n\n\n\n\n\n\nAdd a class called \nServices\n which implements the \ngrsCustInterfaces.IOverSpend\n and \ngrsCustInterfaces.ICustCommit\n interfaces.\n\n\n\n\n\n\nWrite an implementation of the \ngrsCustInterfaces.ICustCommit.CommitmentCheck\n method.\n\n\n\n\n\n\nbool grsCustInterfaces.ICustCommit.CommitmentCheck(string NominalsXML, string POXML)\n\n\n\n\n\n\nWrite an implementation of the \ngrsCustInterfaces.ICustCommit.CommitmentReport\n method.\n\n\n\n\nstring grsCustInterfaces.ICustCommit.CommitmentReport(string NominalsXML, string POXML)\n\n\n\n\n\n\n(Optionally) Write an implementation of the \ngrsCustInterfaces.IOverSpend.GetOverspend\n method.\n\n\n\n\ndecimal grsCustInterfaces.IOverSpend.GetOverspend(string NominalsXML, string POXML)\n\n\n\n\n\n\nICustCommit.CommitmentCheck\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNominalsXML\n\n\nIn\n\n\nAn xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.\n\n\n\n\n\n\nPOXML\n\n\nIn\n\n\nAn xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return True if all the lines pass budget checking and False if at least one line fails the check.\n\n\nNominals XML\n\n\nBelow is an example of the xml passed to the \nNominalsXML\n argument.\n\n\n<grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n</grs:CommitmentLookup>\n\n\n\n\nThe \nNominalPeriods\n element is repeated for each nominal line on the purchase order.\n\n\n\n\nWarning\n\n\nThe POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively. \n\n\n\n\n\n\nICustCommit.CommitmentReport\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNominalsXML\n\n\nIn\n\n\nAn xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.\n\n\n\n\n\n\nPOXML\n\n\nIn\n\n\nAn xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return a table (in xml format) which describes the budget calculation for each line on the order.\n\n\nNominals XML\n\n\nBelow is an example of the xml passed to the \nNominalsXML\n argument.\n\n\n<grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n</grs:CommitmentLookup>\n\n\n\n\nThe \nNominalPeriods\n element is repeated for each nominal line on the purchase order.\n\n\n\n\nWarning\n\n\nThe POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively. \n\n\n\n\nReturned XML\n\n\nThe function needs to return XML with the following structure\n\n\n<grs:HeadedList xmlns:grs='http://www.getrealsystems.com/xml/xml-ns'>\n\n<grs:Headings>\n    <grs:Column grs:Number='1' grs:Type=''          grs:BudgetType=''>Nominal Coding</grs:Column>\n    <grs:Column grs:Number='2' grs:Type='Currency'  grs:BudgetType='Budget'>Budget For Year</grs:Column>\n    <grs:Column grs:Number='3' grs:Type='Currency'  grs:BudgetType='Cost'>Spend To Date</grs:Column>\n    <grs:Column grs:Number='4' grs:Type='Currency'  grs:BudgetType='Cost'>Accruals</grs:Column>\n    <grs:Column grs:Number='5' grs:Type='Currency'  grs:BudgetType='Cost'>This Document</grs:Column>\n    <grs:Column grs:Number='6' grs:Type='Currency'  grs:BudgetType=''>Remaining Budget</grs:Column>\n    <grs:Column grs:Number='7' grs:Type='Highlight' grs:BudgetType=''>Highlight</grs:Column>\n</grs:Headings>\n\n<grs:Items>\n    <grs:Item grs:GUID='{3A8D2AC2-6287-41DF-817A-F77B0551D80D}' >\n        <grs:Column grs:Number='1' grs:Type='Standard'>SALES.CONF.MARKETING</grs:Column>\n        <grs:Column grs:Number='2' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>100000</grs:Column>\n        <grs:Column grs:Number='3' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>60000</grs:Column>\n        <grs:Column grs:Number='4' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency' Hyperlink='/CommitmentReport.html'>50000</grs:Column>\n        <grs:Column grs:Number='5' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>20000</grs:Column>\n        <grs:Column grs:Number='6' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>-10000</grs:Column>\n        <grs:Column grs:Number='7' grs:Type='Highlight'>true</grs:Column>\n    </grs:Item>\n</grs:Items>\n\n</grs:HeadedList>\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nYou need to define one \ngrs:Column\n element for each column you wish to appear in the commitment report.\n\n\n\n\nThe grs:Number attribute should sequentially number the columns 1...\n\n\nThe grs:Type attribute can be \"\" (blank),  Currency (for a monetary value) or Highlight (failure indicator)\n\n\nThe grs:BudgetType columns is used by the budget graphic.  It can be \"\" (blank),  Budget or Cost  \n\n\n\n\n\n\n\n\nYou need to add one \ngrs:Item\n for each line that you wish to appear on the report.  Within each \nItem\n element a \nColumn\n element must be added for each column you defined in the \nHeadings\n element.\n\n\n\n\nThe grs:Number attribute should match the number of the column.\n\n\nThe grs:Type attribute can be \"\" (blank),  Currency (for a monetary value) or Highlight (failure indicator)\n\n\nIf the Type is currency,  then the CurrencySymbol and DecimalPlaces attributes should also be provided\n\n\nOptionally a hyperlink attribute can be provided.  The renders the value as an HTML 'a' link.\n\n\n\n\n\n\n\n\n\n\nIOverSpend.GetOverspend\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNominalsXML\n\n\nIn\n\n\nAn xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.\n\n\n\n\n\n\nPOXML\n\n\nIn\n\n\nAn xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return the total amount (as a decimal) that the lines on the order exceed their budget.  For example if the first line exceeded by \u00a310 and the second by \u00a320 then you should return 30.\n\n\nNominals XML\n\n\nBelow is an example of the xml passed to the \nNominalsXML\n argument.\n\n\n<grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n\n\n\n\n\nWarning\n\n\nThe POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively. \n\n\n\n\n\n\nExample\n\n\nSee the \nexample application\n for a complete implementation.\n\n\n\n\nDeployment\n\n\nYou dll should be complied (and named xyzBudgetChecking.dll) and then copied into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.",
            "title": "Budget Checking"
        },
        {
            "location": "/p2p/budgetchecking/#budget-checking",
            "text": "",
            "title": "Budget Checking"
        },
        {
            "location": "/p2p/budgetchecking/#overview",
            "text": "PROACTIS P2P allows budgets to be checking against an external source when a purchase order is being submitted.  The preferred method is to configure budget checking using the  Generic Budget Checking  snapin and the module keeps all the settings in the P2P database and automatically provides additional functions such as caching.",
            "title": "Overview"
        },
        {
            "location": "/p2p/budgetchecking/#custom-dll",
            "text": "To write a custom budget checking DLL,  the following methods must be implemented.    CommitmentCheck \nGiven a set of nominal lines from a purchase order returns False if at least one line on the order has failed budget checking    CommitmentReport \nGiven a set of nominal lines from a purchase order returns a custom table showing the available funds calculation for each.  For example the table might have columns for Original Budget,  Spend To Date,  Accruals and Remaining Budget.    GetOverspend \nGiven a set of nominal lines from a purchase order returns the total amount that the document exceeds the available budget.   This figure can be used in your authorisation workflow to route an document to the correct approver.     Note  You are not required to implement the  GetOverspend  method but it is recommended.",
            "title": "Custom DLL"
        },
        {
            "location": "/p2p/budgetchecking/#implementation",
            "text": "Create a new C# Class Library project called xyzBudgetChecking. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll    Add a class called  Services  which implements the  grsCustInterfaces.IOverSpend  and  grsCustInterfaces.ICustCommit  interfaces.    Write an implementation of the  grsCustInterfaces.ICustCommit.CommitmentCheck  method.    bool grsCustInterfaces.ICustCommit.CommitmentCheck(string NominalsXML, string POXML)   Write an implementation of the  grsCustInterfaces.ICustCommit.CommitmentReport  method.   string grsCustInterfaces.ICustCommit.CommitmentReport(string NominalsXML, string POXML)   (Optionally) Write an implementation of the  grsCustInterfaces.IOverSpend.GetOverspend  method.   decimal grsCustInterfaces.IOverSpend.GetOverspend(string NominalsXML, string POXML)",
            "title": "Implementation"
        },
        {
            "location": "/p2p/budgetchecking/#icustcommitcommitmentcheck",
            "text": "",
            "title": "ICustCommit.CommitmentCheck"
        },
        {
            "location": "/p2p/budgetchecking/#arguments",
            "text": "Argument  Direction  Description      NominalsXML  In  An xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.    POXML  In  An xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/budgetchecking/#return-value",
            "text": "The function should return True if all the lines pass budget checking and False if at least one line fails the check.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/budgetchecking/#nominals-xml",
            "text": "Below is an example of the xml passed to the  NominalsXML  argument.  <grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n</grs:CommitmentLookup>  The  NominalPeriods  element is repeated for each nominal line on the purchase order.   Warning  The POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively.",
            "title": "Nominals XML"
        },
        {
            "location": "/p2p/budgetchecking/#icustcommitcommitmentreport",
            "text": "",
            "title": "ICustCommit.CommitmentReport"
        },
        {
            "location": "/p2p/budgetchecking/#arguments_1",
            "text": "Argument  Direction  Description      NominalsXML  In  An xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.    POXML  In  An xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/budgetchecking/#return-value_1",
            "text": "The function should return a table (in xml format) which describes the budget calculation for each line on the order.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/budgetchecking/#nominals-xml_1",
            "text": "Below is an example of the xml passed to the  NominalsXML  argument.  <grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n</grs:CommitmentLookup>  The  NominalPeriods  element is repeated for each nominal line on the purchase order.   Warning  The POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively.",
            "title": "Nominals XML"
        },
        {
            "location": "/p2p/budgetchecking/#returned-xml",
            "text": "The function needs to return XML with the following structure  <grs:HeadedList xmlns:grs='http://www.getrealsystems.com/xml/xml-ns'>\n\n<grs:Headings>\n    <grs:Column grs:Number='1' grs:Type=''          grs:BudgetType=''>Nominal Coding</grs:Column>\n    <grs:Column grs:Number='2' grs:Type='Currency'  grs:BudgetType='Budget'>Budget For Year</grs:Column>\n    <grs:Column grs:Number='3' grs:Type='Currency'  grs:BudgetType='Cost'>Spend To Date</grs:Column>\n    <grs:Column grs:Number='4' grs:Type='Currency'  grs:BudgetType='Cost'>Accruals</grs:Column>\n    <grs:Column grs:Number='5' grs:Type='Currency'  grs:BudgetType='Cost'>This Document</grs:Column>\n    <grs:Column grs:Number='6' grs:Type='Currency'  grs:BudgetType=''>Remaining Budget</grs:Column>\n    <grs:Column grs:Number='7' grs:Type='Highlight' grs:BudgetType=''>Highlight</grs:Column>\n</grs:Headings>\n\n<grs:Items>\n    <grs:Item grs:GUID='{3A8D2AC2-6287-41DF-817A-F77B0551D80D}' >\n        <grs:Column grs:Number='1' grs:Type='Standard'>SALES.CONF.MARKETING</grs:Column>\n        <grs:Column grs:Number='2' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>100000</grs:Column>\n        <grs:Column grs:Number='3' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>60000</grs:Column>\n        <grs:Column grs:Number='4' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency' Hyperlink='/CommitmentReport.html'>50000</grs:Column>\n        <grs:Column grs:Number='5' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>20000</grs:Column>\n        <grs:Column grs:Number='6' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>-10000</grs:Column>\n        <grs:Column grs:Number='7' grs:Type='Highlight'>true</grs:Column>\n    </grs:Item>\n</grs:Items>\n\n</grs:HeadedList>   Note    You need to define one  grs:Column  element for each column you wish to appear in the commitment report.   The grs:Number attribute should sequentially number the columns 1...  The grs:Type attribute can be \"\" (blank),  Currency (for a monetary value) or Highlight (failure indicator)  The grs:BudgetType columns is used by the budget graphic.  It can be \"\" (blank),  Budget or Cost       You need to add one  grs:Item  for each line that you wish to appear on the report.  Within each  Item  element a  Column  element must be added for each column you defined in the  Headings  element.   The grs:Number attribute should match the number of the column.  The grs:Type attribute can be \"\" (blank),  Currency (for a monetary value) or Highlight (failure indicator)  If the Type is currency,  then the CurrencySymbol and DecimalPlaces attributes should also be provided  Optionally a hyperlink attribute can be provided.  The renders the value as an HTML 'a' link.",
            "title": "Returned XML"
        },
        {
            "location": "/p2p/budgetchecking/#ioverspendgetoverspend",
            "text": "",
            "title": "IOverSpend.GetOverspend"
        },
        {
            "location": "/p2p/budgetchecking/#arguments_2",
            "text": "Argument  Direction  Description      NominalsXML  In  An xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.    POXML  In  An xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/budgetchecking/#return-value_2",
            "text": "The function should return the total amount (as a decimal) that the lines on the order exceed their budget.  For example if the first line exceeded by \u00a310 and the second by \u00a320 then you should return 30.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/budgetchecking/#nominals-xml_2",
            "text": "Below is an example of the xml passed to the  NominalsXML  argument.  <grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>   Warning  The POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively.",
            "title": "Nominals XML"
        },
        {
            "location": "/p2p/budgetchecking/#example",
            "text": "See the  example application  for a complete implementation.",
            "title": "Example"
        },
        {
            "location": "/p2p/budgetchecking/#deployment",
            "text": "You dll should be complied (and named xyzBudgetChecking.dll) and then copied into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.",
            "title": "Deployment"
        },
        {
            "location": "/p2p/customtab/",
            "text": "Custom Tab\n\n\nThe P2P website can be extended by creating additional \"custom\" tabs.  \n\n\n\n\nLicence File\n\n\nIn order to display a custom tab you will first need a licence file which includes the name of the tab.  \n\n\n\n\n\n\nNote\n\n\nPlease contact your account manager for assistance with this.\n\n\n\n\nIn this example the tab will be displayed as  \nManage Resource Bookings\n and will only be visible to users with the \nMAY_BOOK_RESOURCES\n user role.\n\n\n \n\n\n\n\nDevelopment\n\n\nCustom tab are developed as independent websites which are then displayed as part of the core site within an iFrame.\n\n\n\n\nIn the screenshot above,  the blue menu bar comes from the main site,  whilst the remainder of the page (in white) is the custom tab.\n\n\nBy convention the custom sites are placed within the \nWebSite\\Customer\n folder and are mapped as a virtual application with in IIS.   \n\n\n\n\nIn order for P2P to know the URL of the page is displayed it's path needs to be added to the \nApplicationConfig.xml\n file.\n\n\n \n\n\n\n\nWarning\n\n\nAfter changing the application configuration file the caches in the website will need refreshing.   This can be done either by recycling the application pool,  or by performing an IIS reset.\n\n\n\n\n\n\nSession Details\n\n\nAs the custom tab is running in a different website to the main site it is not possible to share the session state within IIS.\n\n\nInstead the following steps must be followed in order to obtain the details of the current user.\n\n\n\n\n\n\nBefore the main site opens your landing page it first generates a unique session token which is stored in the database within the \ndsdba.LoginTokens\n table.  This table also holds who the current user is. \n\n\n\n\n\n\nWhen the landing page is opened,  it is passed the following information as query string parameters\n\n\n\n\nToken  (the unique token)\n\n\nTitle  (the name of the tab)\n\n\nURL    (the url of the tab)\n\n\n\n\nThe token argument is made up of the {Database's Title} @ {The unique generated session token}\n\n\n\n\n\n\nThe custom tab should then connect to the P2P database and call the \nDSDBA.usp_cust_GetSessionDetailsFromToken\n stored procedure supplying the full token.  This stored procedure will return with a single row containing the following columns:\n\n\n\n\nUserGUID\n\n\nLoginID\n\n\nCompanyGUID\n\n\nCompanyCode\n\n\nDepartmentGUID\n\n\nDepartmentCode\n\n\nStoreGUID\n\n\nStoreCode\n\n\nSessionID  (the internal P2P session ID)\n\n\nExpires  (when the login token will expiry)\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe stored procedure will return a row even when the session ID is not valid.  In this case however all the values will be NULL.\n\n\n\n\n\n\nPlease Wait Spinner\n\n\nWhilst your tab is first loading the main site will be displaying the please wait spinner.  In order to remove the spinner the following javascript code should be added to the end of your first page\n\n\n    <script type=\"text/javascript\">\n        //Hide the spinner in the main window.\n        $().ready(function () {\n            parent.hideSpinner();\n        });\n    </script>\n\n\n\n\nIf you wish to re-display the spinner then the following javascript can be used\n\n\n\u00a0\u00a0\u00a0 <script type=\"text/javascript\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 window.parent.showSpinner();\n\u00a0\u00a0\u00a0 </script>\n\n\n\n\n\n\nUser Role Security\n\n\nBy default all users have access to the new tab.  If you wish to restrict access to only certain users then the name of a user role (or a custom role) can be specified for the tab within the licence file.\n\n\nIf you wish to create a custom role,  then you will also need to insert an entry into the \nDSDBA.Roles\n table with the same name.\n\n\nINSERT INTO DSDBA.Roles (GUID, Code, Description, Properties, CompanyGUID)\nSELECT newID(), 'MAY_BOOK_RESOURCES', 'Users may use the bookings tab', '', C.GUID\n  FROM DSDBA.Companies C\n\n\n\n\n\n\nExample Application\n\n\nPlease see the \nexample application\n for a complete implementation.\n\n\n\n\nTroubleshooting\n\n\nIf your custom tab does not appear then check the following\n\n\n\n\nYour licence file includes the section for your custom tab.\n\n\nIf the RelatedRole has been specified in the licence file then the user has been granted that role.\n\n\nThe URL of the custom page has been specified in the \nweb.config\n file",
            "title": "Custom Tabs"
        },
        {
            "location": "/p2p/customtab/#custom-tab",
            "text": "The P2P website can be extended by creating additional \"custom\" tabs.",
            "title": "Custom Tab"
        },
        {
            "location": "/p2p/customtab/#licence-file",
            "text": "In order to display a custom tab you will first need a licence file which includes the name of the tab.      Note  Please contact your account manager for assistance with this.   In this example the tab will be displayed as   Manage Resource Bookings  and will only be visible to users with the  MAY_BOOK_RESOURCES  user role.",
            "title": "Licence File"
        },
        {
            "location": "/p2p/customtab/#development",
            "text": "Custom tab are developed as independent websites which are then displayed as part of the core site within an iFrame.   In the screenshot above,  the blue menu bar comes from the main site,  whilst the remainder of the page (in white) is the custom tab.  By convention the custom sites are placed within the  WebSite\\Customer  folder and are mapped as a virtual application with in IIS.      In order for P2P to know the URL of the page is displayed it's path needs to be added to the  ApplicationConfig.xml  file.      Warning  After changing the application configuration file the caches in the website will need refreshing.   This can be done either by recycling the application pool,  or by performing an IIS reset.",
            "title": "Development"
        },
        {
            "location": "/p2p/customtab/#session-details",
            "text": "As the custom tab is running in a different website to the main site it is not possible to share the session state within IIS.  Instead the following steps must be followed in order to obtain the details of the current user.    Before the main site opens your landing page it first generates a unique session token which is stored in the database within the  dsdba.LoginTokens  table.  This table also holds who the current user is.     When the landing page is opened,  it is passed the following information as query string parameters   Token  (the unique token)  Title  (the name of the tab)  URL    (the url of the tab)   The token argument is made up of the {Database's Title} @ {The unique generated session token}    The custom tab should then connect to the P2P database and call the  DSDBA.usp_cust_GetSessionDetailsFromToken  stored procedure supplying the full token.  This stored procedure will return with a single row containing the following columns:   UserGUID  LoginID  CompanyGUID  CompanyCode  DepartmentGUID  DepartmentCode  StoreGUID  StoreCode  SessionID  (the internal P2P session ID)  Expires  (when the login token will expiry)      Warning  The stored procedure will return a row even when the session ID is not valid.  In this case however all the values will be NULL.",
            "title": "Session Details"
        },
        {
            "location": "/p2p/customtab/#please-wait-spinner",
            "text": "Whilst your tab is first loading the main site will be displaying the please wait spinner.  In order to remove the spinner the following javascript code should be added to the end of your first page      <script type=\"text/javascript\">\n        //Hide the spinner in the main window.\n        $().ready(function () {\n            parent.hideSpinner();\n        });\n    </script>  If you wish to re-display the spinner then the following javascript can be used  \u00a0\u00a0\u00a0 <script type=\"text/javascript\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 window.parent.showSpinner();\n\u00a0\u00a0\u00a0 </script>",
            "title": "Please Wait Spinner"
        },
        {
            "location": "/p2p/customtab/#user-role-security",
            "text": "By default all users have access to the new tab.  If you wish to restrict access to only certain users then the name of a user role (or a custom role) can be specified for the tab within the licence file.  If you wish to create a custom role,  then you will also need to insert an entry into the  DSDBA.Roles  table with the same name.  INSERT INTO DSDBA.Roles (GUID, Code, Description, Properties, CompanyGUID)\nSELECT newID(), 'MAY_BOOK_RESOURCES', 'Users may use the bookings tab', '', C.GUID\n  FROM DSDBA.Companies C",
            "title": "User Role Security"
        },
        {
            "location": "/p2p/customtab/#example-application",
            "text": "Please see the  example application  for a complete implementation.",
            "title": "Example Application"
        },
        {
            "location": "/p2p/customtab/#troubleshooting",
            "text": "If your custom tab does not appear then check the following   Your licence file includes the section for your custom tab.  If the RelatedRole has been specified in the licence file then the user has been granted that role.  The URL of the custom page has been specified in the  web.config  file",
            "title": "Troubleshooting"
        },
        {
            "location": "/p2p/addins/",
            "text": "Add-ins\n\n\nP2P supports the concept of 'Add-ins' which are additional custom links which can be added to any page within the core website.\n\n\n\n\nSetup\n\n\n\n\n\n\nEnsure that a sub-folder called \nAddins\n exists within the Customer virtual directory in the root of the web site. \n\n\n\n\n\n\nIf the folder doesn't already contain a file called \nAddins.xml\n then create the following file.  If the file does already exist then add your new page to it.\n\n\n\n\n\n\n<AddIns>\n    <Page Name=\"Purchasing/Orders/Plus/MultiLineEntry.asp\">\n        <Link AddInURL=\"SampleOrderAddIn.aspx\" WindowWidth=\"900\" WindowHeight=\"600\" WindowName=\"OrderTaxReset\">Sample Order AddIn</Link>\n    </Page>\n</AddIns>\n\n\n\n\nIn the example above,  a link captioned \nSample Order Addin\n will be added to the \nMultiLineEntry.asp\n page.  When this link is clicked a new window will open (900x600) which will display the URL \nSampleOrderAddIn.aspx\n\n\n\n\n\n\nIn the same folder create your add-in page.   (\nFor example SampleOrderAddIn.aspx\n)\n\n\n\n\n\n\nIf you wish your add-in to interact with the main site,  then please read the following \nJavascript\n section.\n\n\n\n\n\n\n\n\nCSS\n\n\nIn order to pick up some of the styling from the main site (such as the default font-family and font size for the page) the \nCustomSupport/Site.css\n style-sheet should be referenced.\n\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"../../CustomSupport/Site.css\" />\n\n\n\n\n\n\nJavascript\n\n\nAn add-in page can communicate with the parent P2P application via javaScript calls exposed by the addInClient library.\n\n\nIncludes\n\n\nThe main web site has a \nCustomSupport\n folder that contains the files that need to be included (some optionally) in each add-in page.\n\n\nAddInClient.js\n:\u00a0 mandatory for communication between the add-in page and the owning main P2P page in the client\u2019s browser (which can in turn communicate with the server)\n\n\njquery-xxx.im.js\n: mandatory\u00a0 \n\n\njquery.filerNode.js\n: mandatory if you wish to use the xml services exposed by the AddInClient class, for manipulating order/invoice xml. Otherwise can be left out. \n\n\nkendo.xxx.min.js\n, Notifications.inc, Site.css: mandatory if you wish to use the same notification services and styling as the main web site for info, alert and error messages. Otherwise can be left out. \n\n\n    <script src=\"../../CustomSupport/jquery-2.2.4.min.js\"></script>\n    <script src=\"../../CustomSupport/jquery.filerNode.js\"></script>\n    <script src=\"../../CustomSupport/AddInClient.js\"></script>\n    <script src=\"../../CustomSupport/kendo.core.min.js\"></script>\n    <script src=\"../../CustomSupport/kendo.notification.min.js\"></script>\n    <script src=\"../../CustomSupport/kendo.popup.min.js\"></script>\n\n\n\n\naddInClient\n\n\nA core deliverable for any javaScript add-in solution, is the recognition that any single add-in page may need to make numerous AJAX calls in order to retrieve all the data it requires in order to function. Since those AJAX calls are asynchronous, the challenge is how to co-ordinate and handle their callbacks. \n\u00a0\nThe addInClient javaScript class solves the callback challenge. Through the use of jQuery Deferred/Promise functionality, it can accept any number of AJAX calls as input, will manage their respective callbacks, combine the data retrieved and make that data available to the caller.\u00a0 \n\u00a0\nThe \naddInClient\n class exposes the following AJAX methods. Understand that these calls are asynchronous. The return values described below are not returned directly but rather indirectly via the \nMonitorAjaxCalls\n method. The methods below directly return a jQuery Promise object. \n\u00a0\n\n GetSessionID() \n    -   Returns the current session-id \n\n GetSessionParm(keyName) \n    -  Returns the session value (as a string) stored against the specified key-name. \n    - Returns null if the session value is not present \n\n GetSessionParms(keyNames) \n    - Accepts an array of key-names and returns the corresponding session values (or null values if the session value does not exist) \n    - Return value is a JSON array of key/value pairs \n    - First entry in return array is always the session-id. \n\n GetOrderInEdit() \n    - Returns the full order xml (including all lines) for the order currently in edit in the current session. \n    - Returns an error if no order is currently in edit \n\n GetOrderInEditWithoutLines() \n    - Returns the order xml with an empty LineSet xml node (i.e. order header and footer only) \n    - Returns an error if no order is currently in edit \n\n GetInvoiceInEdit() \n    - Returns the full invoice xml (including all lines) for the invoice currently in edit in the current session. \n\n GetInvoiceInEditHeader() \n    - Returns the invoice header xml for the invoice currently in edit in the current session. \n\n GetInvoiceInEditFooter \n    - Returns the invoice footer xml for the invoice currently in edit in the current session. \n\u00a0\n\n MonitorAjaxCalls(ajaxCalls) \n    - Accepts an array of any combination of the above AJAX \u201cGet\u2026\u201d methods. Since each of the above \u201cGet\u2026\u201d methods actually returns a jQuery Promise object, the input to this method is actually an array of those Promise objects to be monitored.\u00a0 \n    - Returns a single jQuery Promise object to which resolve/fail events can be attached \n    - If all input \u201cGet\u2026\u201d methods succeed then\u00a0 \n        - All \u201cresolve\u201d events attached to the returned Promise, are triggered (in the order in which they were attached) \n        - Each \u201cresolve\u201d event is passed the following parameters \n        -    \nResults\n: an array of return values, matching the AJAX calls that were input. The array entries will be simple strings, JSON key/value arrays or xml strings, as per the return types from the above \u201cGet\u2026\u201d methods.\u00a0 \n        -    \nAlertMessages\n: an array of all alert messages output by the AJAX \u201cGet\u2026\u201d messages\n        -    \nInfoMessages\n: an array of all info messages output by the AJAX \u201cGet\u2026\u201d messages\n    - If any of input AJAX \u201cGet\u2026\u201d methods fail then \n        - All \u201cfail\u201d events attached to the returned Promise, are triggered (in the order in which they were attached) \n        - Each \u201cfail\u201d event is passed an array of error messages. \n        - Even if some of the input AJAX \u201cGet\u2026\u201d events succeed, no \u201cresolve\u201d events are triggered. \n\n HandleError(errorMessages) \no Will test for the presence of notification services and output formal error notifications if possible. Otherwise will issue alerts for each error message. \n\n\nXMLServices\n\n\nExposes a set of helper methods for working with document xml (i.e. xml with the \u201cgrs\u201d namespace). The following methods are available \n\n loadDOM(xml) \n    - Accepts an xml string and returns a jQuery DOM object \n\n getNode(parentNode, nodeName) \n    - Accepts a parent node (or the DOM) and the name of an immediate child element. \n    - Returns the child element \n    - nodeName can be an array of element names. Where each name corresponds to an element that is a child of the previous name (element).\u00a0 \n\n attr(node, attributeName) \n    - Returns the given attribute of the given element. \n\n getNodeAttr(parentNode, nodeName, attributeName) \n    - Finds the specified immediate child element of the parent node and returns the specified attribute value. \n* filterNodeAttr(parentNode, nodeName, attributeName, attributeName) \n    - Finds the specified immediate child element of the parent node, which also has an attribute with the specified name and value. Returns the text value of that child element. \n\u00a0\n\n\nSample Add-In\n\n\nThere is a sample add-in and xml file available \nhere\n.\n\n\nThe sample is available from the multi-line orders page and shows how order information can be retrieved and displayed.",
            "title": "Addins"
        },
        {
            "location": "/p2p/addins/#add-ins",
            "text": "P2P supports the concept of 'Add-ins' which are additional custom links which can be added to any page within the core website.",
            "title": "Add-ins"
        },
        {
            "location": "/p2p/addins/#setup",
            "text": "Ensure that a sub-folder called  Addins  exists within the Customer virtual directory in the root of the web site.     If the folder doesn't already contain a file called  Addins.xml  then create the following file.  If the file does already exist then add your new page to it.    <AddIns>\n    <Page Name=\"Purchasing/Orders/Plus/MultiLineEntry.asp\">\n        <Link AddInURL=\"SampleOrderAddIn.aspx\" WindowWidth=\"900\" WindowHeight=\"600\" WindowName=\"OrderTaxReset\">Sample Order AddIn</Link>\n    </Page>\n</AddIns>  In the example above,  a link captioned  Sample Order Addin  will be added to the  MultiLineEntry.asp  page.  When this link is clicked a new window will open (900x600) which will display the URL  SampleOrderAddIn.aspx    In the same folder create your add-in page.   ( For example SampleOrderAddIn.aspx )    If you wish your add-in to interact with the main site,  then please read the following  Javascript  section.",
            "title": "Setup"
        },
        {
            "location": "/p2p/addins/#css",
            "text": "In order to pick up some of the styling from the main site (such as the default font-family and font size for the page) the  CustomSupport/Site.css  style-sheet should be referenced.  <link rel=\"stylesheet\" type=\"text/css\" href=\"../../CustomSupport/Site.css\" />",
            "title": "CSS"
        },
        {
            "location": "/p2p/addins/#javascript",
            "text": "An add-in page can communicate with the parent P2P application via javaScript calls exposed by the addInClient library.",
            "title": "Javascript"
        },
        {
            "location": "/p2p/addins/#includes",
            "text": "The main web site has a  CustomSupport  folder that contains the files that need to be included (some optionally) in each add-in page.  AddInClient.js :\u00a0 mandatory for communication between the add-in page and the owning main P2P page in the client\u2019s browser (which can in turn communicate with the server)  jquery-xxx.im.js : mandatory\u00a0   jquery.filerNode.js : mandatory if you wish to use the xml services exposed by the AddInClient class, for manipulating order/invoice xml. Otherwise can be left out.   kendo.xxx.min.js , Notifications.inc, Site.css: mandatory if you wish to use the same notification services and styling as the main web site for info, alert and error messages. Otherwise can be left out.       <script src=\"../../CustomSupport/jquery-2.2.4.min.js\"></script>\n    <script src=\"../../CustomSupport/jquery.filerNode.js\"></script>\n    <script src=\"../../CustomSupport/AddInClient.js\"></script>\n    <script src=\"../../CustomSupport/kendo.core.min.js\"></script>\n    <script src=\"../../CustomSupport/kendo.notification.min.js\"></script>\n    <script src=\"../../CustomSupport/kendo.popup.min.js\"></script>",
            "title": "Includes"
        },
        {
            "location": "/p2p/addins/#addinclient",
            "text": "A core deliverable for any javaScript add-in solution, is the recognition that any single add-in page may need to make numerous AJAX calls in order to retrieve all the data it requires in order to function. Since those AJAX calls are asynchronous, the challenge is how to co-ordinate and handle their callbacks. \n\u00a0\nThe addInClient javaScript class solves the callback challenge. Through the use of jQuery Deferred/Promise functionality, it can accept any number of AJAX calls as input, will manage their respective callbacks, combine the data retrieved and make that data available to the caller.\u00a0 \n\u00a0\nThe  addInClient  class exposes the following AJAX methods. Understand that these calls are asynchronous. The return values described below are not returned directly but rather indirectly via the  MonitorAjaxCalls  method. The methods below directly return a jQuery Promise object. \n\u00a0  GetSessionID() \n    -   Returns the current session-id   GetSessionParm(keyName) \n    -  Returns the session value (as a string) stored against the specified key-name. \n    - Returns null if the session value is not present   GetSessionParms(keyNames) \n    - Accepts an array of key-names and returns the corresponding session values (or null values if the session value does not exist) \n    - Return value is a JSON array of key/value pairs \n    - First entry in return array is always the session-id.   GetOrderInEdit() \n    - Returns the full order xml (including all lines) for the order currently in edit in the current session. \n    - Returns an error if no order is currently in edit   GetOrderInEditWithoutLines() \n    - Returns the order xml with an empty LineSet xml node (i.e. order header and footer only) \n    - Returns an error if no order is currently in edit   GetInvoiceInEdit() \n    - Returns the full invoice xml (including all lines) for the invoice currently in edit in the current session.   GetInvoiceInEditHeader() \n    - Returns the invoice header xml for the invoice currently in edit in the current session.   GetInvoiceInEditFooter \n    - Returns the invoice footer xml for the invoice currently in edit in the current session. \n\u00a0  MonitorAjaxCalls(ajaxCalls) \n    - Accepts an array of any combination of the above AJAX \u201cGet\u2026\u201d methods. Since each of the above \u201cGet\u2026\u201d methods actually returns a jQuery Promise object, the input to this method is actually an array of those Promise objects to be monitored.\u00a0 \n    - Returns a single jQuery Promise object to which resolve/fail events can be attached \n    - If all input \u201cGet\u2026\u201d methods succeed then\u00a0 \n        - All \u201cresolve\u201d events attached to the returned Promise, are triggered (in the order in which they were attached) \n        - Each \u201cresolve\u201d event is passed the following parameters \n        -     Results : an array of return values, matching the AJAX calls that were input. The array entries will be simple strings, JSON key/value arrays or xml strings, as per the return types from the above \u201cGet\u2026\u201d methods.\u00a0 \n        -     AlertMessages : an array of all alert messages output by the AJAX \u201cGet\u2026\u201d messages\n        -     InfoMessages : an array of all info messages output by the AJAX \u201cGet\u2026\u201d messages\n    - If any of input AJAX \u201cGet\u2026\u201d methods fail then \n        - All \u201cfail\u201d events attached to the returned Promise, are triggered (in the order in which they were attached) \n        - Each \u201cfail\u201d event is passed an array of error messages. \n        - Even if some of the input AJAX \u201cGet\u2026\u201d events succeed, no \u201cresolve\u201d events are triggered.   HandleError(errorMessages) \no Will test for the presence of notification services and output formal error notifications if possible. Otherwise will issue alerts for each error message.",
            "title": "addInClient"
        },
        {
            "location": "/p2p/addins/#xmlservices",
            "text": "Exposes a set of helper methods for working with document xml (i.e. xml with the \u201cgrs\u201d namespace). The following methods are available   loadDOM(xml) \n    - Accepts an xml string and returns a jQuery DOM object   getNode(parentNode, nodeName) \n    - Accepts a parent node (or the DOM) and the name of an immediate child element. \n    - Returns the child element \n    - nodeName can be an array of element names. Where each name corresponds to an element that is a child of the previous name (element).\u00a0   attr(node, attributeName) \n    - Returns the given attribute of the given element.   getNodeAttr(parentNode, nodeName, attributeName) \n    - Finds the specified immediate child element of the parent node and returns the specified attribute value. \n* filterNodeAttr(parentNode, nodeName, attributeName, attributeName) \n    - Finds the specified immediate child element of the parent node, which also has an attribute with the specified name and value. Returns the text value of that child element.",
            "title": "XMLServices"
        },
        {
            "location": "/p2p/addins/#sample-add-in",
            "text": "There is a sample add-in and xml file available  here .  The sample is available from the multi-line orders page and shows how order information can be retrieved and displayed.",
            "title": "Sample Add-In"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this product.",
            "title": "Spend Analytics"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this product.",
            "title": "APF"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this product.",
            "title": "S2C"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this product.",
            "title": "DueNorth"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this product.",
            "title": "System4"
        }
    ]
}