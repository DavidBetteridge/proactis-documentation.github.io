{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\nThis site provides technical documentation for the PROACTIS suite of applications.\n\n\nIntellectual Property\n\n\nThis document contains information related to certain products and services which is proprietary to PROACTIS Group Limited. Notably, all Intellectual property related to the deployment of the PROACTIS Suite of applications is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "PROACTIS"
        },
        {
            "location": "/#welcome",
            "text": "This site provides technical documentation for the PROACTIS suite of applications.",
            "title": "Welcome"
        },
        {
            "location": "/#intellectual-property",
            "text": "This document contains information related to certain products and services which is proprietary to PROACTIS Group Limited. Notably, all Intellectual property related to the deployment of the PROACTIS Suite of applications is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "Intellectual Property"
        },
        {
            "location": "/p2p/sso/",
            "text": "P2P Single-Sign-On (SSO)\n\n\nBy default PROACTIS expects the users to enter their username and password in order to login into PROACTIS P2P.   This document lists the possible ways in which PROACTIS P2P can be configured to allow users to authenticate using Single-Sign-On.\n\n\n\n\nNote\n\n\nIf you wish your users to use a combination of PROACTIS and SSO logins then add the following setting to the \nApplicationConfiguration.xml\n file.\n\n\n\n\n<Setting Name=\"AllowPROACTISLogins\">True</Setting>\n\n\n\n\n\n\nWindows Authentication\n\n\nIf your PROACTIS P2P server is on the same domain as your users then the system can be configured so that they are automatically signed on without the need for them to re-enter their username and password.\n\n\n\n\nEnsure that Windows Authentication is enabled in IIS for your PROACTIS website\n\n\n\n\nIt must first be installed as part of the \nWeb Server\n role. \n\n\n\n\nAnd then enabled in the authentication section of your website\n\n\n\n\n\n\nNote\n\n\nIf some of your users aren't on your domain,  then leave anonymous authentication enabled for them.\n\n\n\n\n\n\nAdd the following setting to the \nApplicationConfiguration.xml\n file.\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">WINDOWS</Setting>\n\n\n\n\n\n\nSet the \nNTLogon\n flag to True against the users,  and ensure that their usernames are in the format DOMAIN\\Username.  \nFor example PROACTIS\\DavidBetteridge\n\n\n\n\n\n\nSAML2\n\n\nPROACTIS P2P has built in support for SSO using the industry standard \nSAML2\n protocol.\n\n\n\n\nFirst generate (or obtain) a local certificate and provide the public part of this to your identity provider.\n\n\n\n\nmakecert -r -pe -n \"CN=your_cert_name\" -sky exchange -sv mycert.pvk mycert.cer\n\nEnter yourPassword for the subject key (3 times!)\n\npvk2pfx.exe -pvk mycert.pvk -spc mycert.cer  -pi yourPassword -pfx mycert.pfx -po yourPassword\n\n\n\n\nYou will need to supply the identity provider with the public part of the generated certificate along with the path to the AssertionConsumerService which will be \nhttps://{server}/SystemLogon/AssertionConsumerService\n.\n\n\n\n\nWarning\n\n\nIn order to use the SAML protocol your P2P website must be accessed using HTTPS not HTTP.\n\n\n\n\n\n\nWith in your website's customer folder create a file called \nsaml.config\n.   This should be based on the following template.\n\n\n\n\n<?xml version=\"1.0\"?>\n<SAMLConfiguration xmlns=\"urn:componentspace:SAML:2.0:configuration\">\n\u00a0\u00a0 <ServiceProvider Name=\"service-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AssertionConsumerServiceUrl=\"~/SystemLogon/AssertionConsumerService\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificateFile=\"path-to-local-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificatePassword=\"local-certificate-password\"/>\n\u00a0\n\u00a0\n\u00a0\u00a0 <!-- ADFS -->\n\u00a0\u00a0 <PartnerIdentityProviders>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <PartnerIdentityProvider Name=\"partner-identity-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description=\"PROACTIS AD\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SignAuthnRequest=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantSAMLResponseSigned=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WantAssertionSigned=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantAssertionEncrypted=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PartnerCertificateFile=\"path-to-partner-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ClockSkew=\"00:03:00\"\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SingleSignOnServiceUrl=\"single-sign-on-service-url\"/>\n\u00a0\u00a0 </PartnerIdentityProviders>\n\u00a0\n</SAMLConfiguration>\n\n\n\n\n\n\nAdd the following settings to your application.configuration file\n\n\n\n\n<Setting Name=\"SSOAttributeName\">NameID</Setting>\n\n\n\n\nThe name of the attribute containing the user identifier in the attributes list returned from the ADFS server.\nIf not specified then no attribute lookup is made and user identification is based on the \u201cusername\u201d returned from the ADFS server.\n\u00a0\n\n\n<Setting Name=\"SSOAttributeNameMask\"></Setting>\n\n\n\n\nAn optional mask to be applied to the above user identifier value.\n\u00a0\n\n\n<Setting Name=\"SSOMatchP2PUserOnEmailAddress\">False</Setting>\n\n\n\n\nBy default, P2P searches the database Users table to find a user whose \u201cLoginID\u201d matches the identifier value returned from the ADFS server.\nThis optional setting will cause the lookup to be made on \u201cEmailAddress\u201d rather than \u201cLoginID\u201d\n\u00a0\n\n\n<Setting Name=\"SSODatabaseTitle\"></Setting>\n\n\n\n\nAn optional setting that only applies when a user who is already logged into a 3rd party system, initiates a logon to P2P via SSO. In this scenario, the user is not \npresented with a logon page. If the user has access to multiple databases, then this setting specifies the database title (in the database xml file) to log into.\nIf this setting is not present, P2P will select the default database in the databases xml file (or the first database if no default).\nObviously if only one database is available, then this setting is unnecessary.\n\n\n\n\nExternal\n\n\nBy default PROACTIS P2P validates the username and password entered by the user against the record in the \ndsdba.Users\n table.   It is however possible to customise PROACTIS so that users are validated against an external userstore such as LDAP.\n\n\nThe following steps should be followed in order to create an external validation DLL.\n\n\n\n\n\n\nCreate a new C# class library with a class called \nServices\n which implements the \nILogin\n interface.  This interface can be found in \nPROACTIS.P2P.grsCustInterfaces.DLL\n\n\n\n\n\n\nDecide if your login process will be called asynchronously or not and implement the UseAsynchronousImplementation as required.\n\n\n\n\n\n\n    public bool UseAsynchronousImplementation => false;\n\n\n\n\n\n\n\n\nImplement the \nLogin\n (or \nLoginAsync\n) method with your custom validation code.  This method should return True for a successful login and False for a failure.  (For security reasons it is not possible to return messages informing the user why the login failed.  For example \nthe username does not exist\n)\n\n\n\n\n\n\nCompile your code,  and ensure that the resulting DLL is named xyzLogin.DLL.   (xyz can be anything)\n\n\n\n\n\n\nCopy the DLL into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.\n\n\n\n\n\n\nAdd the following setting into your \napplicationconfiguration.xml\n file.\n\n\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">EXTERNAL</Setting>\n\n\n\n\nSee the \nPROACTIS.ExampleApplications.ExternalLogin\n example application for a complete sample implementation.\n\n\n\n\nNote\n\n\n\n\nIn order to login using the external DLL,  the user must have their NTLogon property set to True\n\n\nFailed login attempts aren't recorded\n\n\n\n\n\n\n\n\nBespoke\n\n\nIt is also possible to provide your users with a completely custom login process,  including replacing the login screen and adding the ability to automatically create users the first time they connect.\n\n\nThe process is to :\n\n\n\n\n\n\nCreate a custom page in your website's customer folder called \nCustomLogin\n\n\n\n\n\n\nWithin that page collect any required details from the user and validate their credentials.\n\n\n\n\n\n\nIf the user entered valid details then log them on by:\n\n\n\n\nFirst generating a unique token for them\n\n\nThen writing the token to the \nDSDBA.CustomLoginTokens\n table.\n\n\nFinally redirecting the user's browser to CustomLoginAsync within the main site.\n\n\n\n\n\n\n\n\nTo enable your new page to be used,  the following settings should be added to the \nApplicationConfiguration\n file.\n\n\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">CUSTOM</Setting>\n<Setting Name=\"CustomLoginURL\">https://server/custom/CustomLogin.aspx</Setting>\n\n\n\n\nWhere \nserver\n is the address of your core P2P website.\n\n\nSee these \nexample pages\n for a complete sample.\n\n\n\n\nNote\n\n\nUpon exit from P2P, the browser will be redirected back to the custom login page with the following in the querystring \naction=logout\n. If the custom logon page uses automated logins then it must take notice of this parameter to not automatically log the user back in again\n\n\n\n\nReturn Messages\n\n\nMessages are return to the custom login page using the following query string format\n\nInfoMessages=XXX&AlertMessages=YYY&ErrorMessages=ZZZ\n\n\nWhere XXX, YYY and ZZZ are base64 encoded UNICODE strings. Each encoded string contains the messages concatenate with a \u201c|\u201d separator. (see sample app)\nThese entries will only be in the querystring if there are messages to return.",
            "title": "Single Sign On (SSO)"
        },
        {
            "location": "/p2p/sso/#p2p-single-sign-on-sso",
            "text": "By default PROACTIS expects the users to enter their username and password in order to login into PROACTIS P2P.   This document lists the possible ways in which PROACTIS P2P can be configured to allow users to authenticate using Single-Sign-On.   Note  If you wish your users to use a combination of PROACTIS and SSO logins then add the following setting to the  ApplicationConfiguration.xml  file.   <Setting Name=\"AllowPROACTISLogins\">True</Setting>",
            "title": "P2P Single-Sign-On (SSO)"
        },
        {
            "location": "/p2p/sso/#windows-authentication",
            "text": "If your PROACTIS P2P server is on the same domain as your users then the system can be configured so that they are automatically signed on without the need for them to re-enter their username and password.   Ensure that Windows Authentication is enabled in IIS for your PROACTIS website   It must first be installed as part of the  Web Server  role.    And then enabled in the authentication section of your website    Note  If some of your users aren't on your domain,  then leave anonymous authentication enabled for them.    Add the following setting to the  ApplicationConfiguration.xml  file.   <Setting Name=\"AuthenticationMethod\">WINDOWS</Setting>   Set the  NTLogon  flag to True against the users,  and ensure that their usernames are in the format DOMAIN\\Username.   For example PROACTIS\\DavidBetteridge",
            "title": "Windows Authentication"
        },
        {
            "location": "/p2p/sso/#saml2",
            "text": "PROACTIS P2P has built in support for SSO using the industry standard  SAML2  protocol.   First generate (or obtain) a local certificate and provide the public part of this to your identity provider.   makecert -r -pe -n \"CN=your_cert_name\" -sky exchange -sv mycert.pvk mycert.cer\n\nEnter yourPassword for the subject key (3 times!)\n\npvk2pfx.exe -pvk mycert.pvk -spc mycert.cer  -pi yourPassword -pfx mycert.pfx -po yourPassword  You will need to supply the identity provider with the public part of the generated certificate along with the path to the AssertionConsumerService which will be  https://{server}/SystemLogon/AssertionConsumerService .   Warning  In order to use the SAML protocol your P2P website must be accessed using HTTPS not HTTP.    With in your website's customer folder create a file called  saml.config .   This should be based on the following template.   <?xml version=\"1.0\"?>\n<SAMLConfiguration xmlns=\"urn:componentspace:SAML:2.0:configuration\">\n\u00a0\u00a0 <ServiceProvider Name=\"service-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AssertionConsumerServiceUrl=\"~/SystemLogon/AssertionConsumerService\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificateFile=\"path-to-local-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificatePassword=\"local-certificate-password\"/>\n\u00a0\n\u00a0\n\u00a0\u00a0 <!-- ADFS -->\n\u00a0\u00a0 <PartnerIdentityProviders>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <PartnerIdentityProvider Name=\"partner-identity-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description=\"PROACTIS AD\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SignAuthnRequest=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantSAMLResponseSigned=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WantAssertionSigned=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantAssertionEncrypted=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PartnerCertificateFile=\"path-to-partner-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ClockSkew=\"00:03:00\"\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SingleSignOnServiceUrl=\"single-sign-on-service-url\"/>\n\u00a0\u00a0 </PartnerIdentityProviders>\n\u00a0\n</SAMLConfiguration>   Add the following settings to your application.configuration file   <Setting Name=\"SSOAttributeName\">NameID</Setting>  The name of the attribute containing the user identifier in the attributes list returned from the ADFS server.\nIf not specified then no attribute lookup is made and user identification is based on the \u201cusername\u201d returned from the ADFS server.\n\u00a0  <Setting Name=\"SSOAttributeNameMask\"></Setting>  An optional mask to be applied to the above user identifier value.\n\u00a0  <Setting Name=\"SSOMatchP2PUserOnEmailAddress\">False</Setting>  By default, P2P searches the database Users table to find a user whose \u201cLoginID\u201d matches the identifier value returned from the ADFS server.\nThis optional setting will cause the lookup to be made on \u201cEmailAddress\u201d rather than \u201cLoginID\u201d\n\u00a0  <Setting Name=\"SSODatabaseTitle\"></Setting>  An optional setting that only applies when a user who is already logged into a 3rd party system, initiates a logon to P2P via SSO. In this scenario, the user is not \npresented with a logon page. If the user has access to multiple databases, then this setting specifies the database title (in the database xml file) to log into.\nIf this setting is not present, P2P will select the default database in the databases xml file (or the first database if no default).\nObviously if only one database is available, then this setting is unnecessary.",
            "title": "SAML2"
        },
        {
            "location": "/p2p/sso/#external",
            "text": "By default PROACTIS P2P validates the username and password entered by the user against the record in the  dsdba.Users  table.   It is however possible to customise PROACTIS so that users are validated against an external userstore such as LDAP.  The following steps should be followed in order to create an external validation DLL.    Create a new C# class library with a class called  Services  which implements the  ILogin  interface.  This interface can be found in  PROACTIS.P2P.grsCustInterfaces.DLL    Decide if your login process will be called asynchronously or not and implement the UseAsynchronousImplementation as required.        public bool UseAsynchronousImplementation => false;    Implement the  Login  (or  LoginAsync ) method with your custom validation code.  This method should return True for a successful login and False for a failure.  (For security reasons it is not possible to return messages informing the user why the login failed.  For example  the username does not exist )    Compile your code,  and ensure that the resulting DLL is named xyzLogin.DLL.   (xyz can be anything)    Copy the DLL into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.    Add the following setting into your  applicationconfiguration.xml  file.    <Setting Name=\"AuthenticationMethod\">EXTERNAL</Setting>  See the  PROACTIS.ExampleApplications.ExternalLogin  example application for a complete sample implementation.   Note   In order to login using the external DLL,  the user must have their NTLogon property set to True  Failed login attempts aren't recorded",
            "title": "External"
        },
        {
            "location": "/p2p/sso/#bespoke",
            "text": "It is also possible to provide your users with a completely custom login process,  including replacing the login screen and adding the ability to automatically create users the first time they connect.  The process is to :    Create a custom page in your website's customer folder called  CustomLogin    Within that page collect any required details from the user and validate their credentials.    If the user entered valid details then log them on by:   First generating a unique token for them  Then writing the token to the  DSDBA.CustomLoginTokens  table.  Finally redirecting the user's browser to CustomLoginAsync within the main site.     To enable your new page to be used,  the following settings should be added to the  ApplicationConfiguration  file.    <Setting Name=\"AuthenticationMethod\">CUSTOM</Setting>\n<Setting Name=\"CustomLoginURL\">https://server/custom/CustomLogin.aspx</Setting>  Where  server  is the address of your core P2P website.  See these  example pages  for a complete sample.   Note  Upon exit from P2P, the browser will be redirected back to the custom login page with the following in the querystring  action=logout . If the custom logon page uses automated logins then it must take notice of this parameter to not automatically log the user back in again",
            "title": "Bespoke"
        },
        {
            "location": "/p2p/sso/#return-messages",
            "text": "Messages are return to the custom login page using the following query string format InfoMessages=XXX&AlertMessages=YYY&ErrorMessages=ZZZ  Where XXX, YYY and ZZZ are base64 encoded UNICODE strings. Each encoded string contains the messages concatenate with a \u201c|\u201d separator. (see sample app)\nThese entries will only be in the querystring if there are messages to return.",
            "title": "Return Messages"
        },
        {
            "location": "/p2p/punchout/",
            "text": "PunchOut\n\n\nOverview\n\n\nPunchOut allows a user to jump from the PROACTIS P2P website into a supplier\u2019s shopping site.  Where they can browse a catalogue and add items to a shopping basket as per a normal e-commerce site.  Once they have finished browsing they click checkout and the items are then returned to PROACTIS as new lines on their current purchase order (or requisition).\nFor the purposes of this document, the term PunchOut does not include the ability to electronically export purchase orders to suppliers in cXML format.\n\n\n\n\nNote\n\n\nThis document details how to configure connections to supplier PunchOut sites and marketplaces in the latest release of PROACTIS P2P `17.\nUnlike the previous versions it is now possible to configure the connections directly within the product.  Previously the setup action was carried out by a technical consultant which required the coding of bespoke webpages and sometimes DLLs for installation on the P2P server.\n\n\n\n\n\n\nPunchThro.\n\n\nThere are three different methods of configuring PunchOut within the PROACTIS P2P product.   This first is referred to as punch-thro.  This is where the buyer connects to the suppliers PunchOut site via the PROACTIS S2C portal. \n\n\nAs the details of the suppliers site are configured in the PROACTIS S2C Portal the only P2P settings required are as shown below\n\n\n\n\nConfigure the connection to your PROACTIS S2C portal.  (\nApplication\n -> \nPROACTIS Connectivity\n)\n\n\n\n\n\n\n\n\nEnable the PunchOut via portal setting against the supplier.\n\n\n\n\n\n\n\n\ncXML PunchOut\n\n\nThe majority of PunchOuts follow the \ncXML\n standard.  This can be configured directly within the P2P product by completing the following fields against a supplier.\n\n\n\n\n\n\nNote\n\n\n\n\nThe values for these 5 fields should be agreed with the supplier however DUNs numbers are often used for the three identities.\n\n\nThe fields can also be edited using the new WebPMC.\n\n\n\n\n\n\n\n\nOCI PunchOut\n\n\nLess commonly used in the UK, but PROACTIS also supports the \nOpen Catalog Interface\n (OCI) PunchOut standard.  Again this can be configured directly within the product by completing the following three fields.\n\n\n\n\n\n\nNote\n\n\nThe supplier will normally provide you with their URL and your sender identity and secret.\n\n\n\n\n\n\nPunchOut customisations\n\n\nIt is possible to customise PunchOut at various points within the process:\n\n\ncXML Handshake\n\n\nThe format of the cXML sent in the initial connection to the supplier\u2019s site is generated from an XML using an XSLT transformation.  By default PROACTIS uses an XSLT embedded within the product however it is possible to use your own xslt by creating a file within the plugins folder called \nPunchoutConnection_{supplierCode}.xslt\n.  Where \n{supplierCode}\n is the code of your supplier.\n\n\nThe fields which are available to the XSLT are listed below.\n\n\n\n\nContext\n\n\nSessionID\n\n\nSupplierCode\n\n\nDepartmentCode\n\n\nCompanyCode\n\n\nTemplateLabel\n\n\nLogonName\n\n\nActualName\n\n\nFirstName\n\n\nSurname\n\n\nEmail\n\n\nReturnURL\n\n\nURL\n\n\nBuyerCookie\n\n\nPayloadID\n\n\nTimestamp\n\n\nPunchoutFromIdentity\n\n\nPunchoutToIdentity\n\n\nPunchoutSenderIdentity\n\n\nPunchoutSenderSharedSecret\n\n\nDeliveryAddressGUID\n\n\nDeliveryAddressName\n\n\nDeliveryAddressLine1\n\n\nDeliveryAddressLine2\n\n\nDeliveryAddressLine3\n\n\nDeliveryAddressLine4\n\n\nDeliveryCountry\n\n\nDeliveryCounty\n\n\nDeliveryPostcode\n\n\nDeliveryPostTown\n\n\n\n\nAn example XSLT document is available \nhere\n.\n\n\ncXML & OCI Returned Basket\n\n\nWhen the basket is returned from the supplier by default it is transformed into the correct P2P format by using an XSLT embedded within the product.  This can be replaced by your own transform by creating a file in the plugins folder called \nReturnedPunchoutBasket_{supplierCode}.xslt\n Where \n{supplierCode}\n is the code of your supplier.\nThe XSLT must generate XML in the following format:\n\n\n<PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>\n\n\n\n\nAn example XSLT document is available \nhere\n.\n\n\nCustom Return Page\n\n\nBy default the supplier posts their basket back to either \nPunchoutReturned.aspx\n (for cxml) or \nPunchoutReturnedOCI.aspx\n (for oci).  It is however possible for you to provide your own page for processing the returned basket.  This is configured by completing the following field against the supplier record.\n\n\n\n\nThis page should be placed in the Customer folder within the website.\n\n\nThe default \nPunchoutReturned.aspx\n page looks for the basket xml in the following form fields:\n\n\n\n\nXML\n\n\ncxml-urlencode\n\n\ncxml-urlencoded\n\n\ncXML-base64\n\n\noracleCart\n\n\nthe first form field\n\n\n\n\nThe default \nPunchoutReturnedOCI.aspx\n page looks for the basket xml in the form fields as follows:\n\n\n\n\nThe items are returned in arrays of fields.  Indexed from 1 onwards\n\n\nFirst it checks there is a field called NEW_ITEM+DESCRIPTION[1].  If there isn\u2019t then it assumes that no basket items were returned.\n\n\nIt then loops through all fields which are named in the format NEW_xxxxx[n] where xxxxx is the name of a property and n is the item number.\n\n\nEach of these form fields are then added into the xml.  The result xml will have the following format:\n\n\n\n\n<PurchaseOrder>\n    <line number=1 item+description=\u2019red pen\u2019 etc etc />\n</PurchaseOrder>\n\n\n\n\nMarket Place\n\n\nPROACTIS P2P allows users to connect to a \u201cmarket place\u201d where they can then browse catalogues of one or more suppliers.  When they have finished browsing and click check-out then their returned basket is used to create one or more draft purchase orders (or requisitions) within PROACTIS.\nUnlike previous versions of PROACTIS it is now possible to configure marketplace connections directly within the product.\n\n\nConfiguration\n\n\nUsing the \u201cSystem Control\u201d application choose the Marketplaces option from the Supplier Maintenance menu.  Add a New market place and complete both the Details and PunchOut sections.\n\n\nThe following marketplace types (standards) are currently supported:\n\n\n\n\nCXML\n\n\nPROACTIS EGS\n\n\nProcserve\n\n\nScience warehouse\n\n\n\n\nThe Supplier Code Mapped From field specifies how the supplier code in the returned basket is mapped back to the suppliers within PROACTIS.\n\n\nCustomisation\n\n\nThe xml used for the initial connection is generated using an xslt embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called \nMarketPlaceConnection_{marketPlaceName}.xslt\n.  Where \n{marketPlaceName}\n is the name of the configured marketplace.\nThe fields passed into the xml are listed below:\n\n\n\n\nDepartmentCode\n\n\nCompanyCode\n\n\nLogonName\n\n\nEmail\n\n\nReturnURL\n\n\nURL\n\n\nBuyerCookie\n\n\nPayloadID\n\n\nTimestamp\n\n\nPunchoutFromIdentity\n\n\nPunchoutToIdentity\n\n\nPunchoutSenderIdentity\n\n\nPunchoutSenderSharedSecret\n\n\n\n\nWhen the basket is returned from the market place by default it is transformed into the correct format by using an XSLT embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called \nMarketPlaceResult_{marketPlaceName}.xslt\n.  Where \n{marketPlaceName}\n is the name of the configured marketplace.\nThe xslt needs to generate xml in the following format\n\n\n<PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>\n\n\n\n\nTroubleshooting\n\n\nThe default XSLTs used for processing the returned baskets may create the following reference fields against the generated items:\n\n\n\n\nContractReference\n\n\nPartID\n\n\n\n\nIf however either of these references already exist in \ndsdba.CompanyReferences\n table but without a category of 'global' then the following error will be reported.\n\n\nThere is already a reference of type template with a code of ContractReference. This reference cannot be linked to an item.\n\n\n\n\nThe solution is to either convert the reference field to a global one,  or drop a custom XSLT into the plugins folder which uses a different reference field.\n\n\nEGS Marketplaces\n\n\nThe EGS settings within the PROACTIS Connectivity snapin, do not refer to marketplace PunchOut.  This are used to configure different functionality not covered by this document.\n\n\nProxy Server\n\n\nConnections to both supplier PunchOut, and marketplaces honour the proxy server settings held in the \ndsdba.ProxySettings\n table.\nThis can be configured using the System Control application.",
            "title": "PunchOut / Marketplaces"
        },
        {
            "location": "/p2p/punchout/#punchout",
            "text": "",
            "title": "PunchOut"
        },
        {
            "location": "/p2p/punchout/#overview",
            "text": "PunchOut allows a user to jump from the PROACTIS P2P website into a supplier\u2019s shopping site.  Where they can browse a catalogue and add items to a shopping basket as per a normal e-commerce site.  Once they have finished browsing they click checkout and the items are then returned to PROACTIS as new lines on their current purchase order (or requisition).\nFor the purposes of this document, the term PunchOut does not include the ability to electronically export purchase orders to suppliers in cXML format.   Note  This document details how to configure connections to supplier PunchOut sites and marketplaces in the latest release of PROACTIS P2P `17.\nUnlike the previous versions it is now possible to configure the connections directly within the product.  Previously the setup action was carried out by a technical consultant which required the coding of bespoke webpages and sometimes DLLs for installation on the P2P server.",
            "title": "Overview"
        },
        {
            "location": "/p2p/punchout/#punchthro",
            "text": "There are three different methods of configuring PunchOut within the PROACTIS P2P product.   This first is referred to as punch-thro.  This is where the buyer connects to the suppliers PunchOut site via the PROACTIS S2C portal.   As the details of the suppliers site are configured in the PROACTIS S2C Portal the only P2P settings required are as shown below   Configure the connection to your PROACTIS S2C portal.  ( Application  ->  PROACTIS Connectivity )     Enable the PunchOut via portal setting against the supplier.",
            "title": "PunchThro."
        },
        {
            "location": "/p2p/punchout/#cxml-punchout",
            "text": "The majority of PunchOuts follow the  cXML  standard.  This can be configured directly within the P2P product by completing the following fields against a supplier.    Note   The values for these 5 fields should be agreed with the supplier however DUNs numbers are often used for the three identities.  The fields can also be edited using the new WebPMC.",
            "title": "cXML PunchOut"
        },
        {
            "location": "/p2p/punchout/#oci-punchout",
            "text": "Less commonly used in the UK, but PROACTIS also supports the  Open Catalog Interface  (OCI) PunchOut standard.  Again this can be configured directly within the product by completing the following three fields.    Note  The supplier will normally provide you with their URL and your sender identity and secret.",
            "title": "OCI PunchOut"
        },
        {
            "location": "/p2p/punchout/#punchout-customisations",
            "text": "It is possible to customise PunchOut at various points within the process:",
            "title": "PunchOut customisations"
        },
        {
            "location": "/p2p/punchout/#cxml-handshake",
            "text": "The format of the cXML sent in the initial connection to the supplier\u2019s site is generated from an XML using an XSLT transformation.  By default PROACTIS uses an XSLT embedded within the product however it is possible to use your own xslt by creating a file within the plugins folder called  PunchoutConnection_{supplierCode}.xslt .  Where  {supplierCode}  is the code of your supplier.  The fields which are available to the XSLT are listed below.   Context  SessionID  SupplierCode  DepartmentCode  CompanyCode  TemplateLabel  LogonName  ActualName  FirstName  Surname  Email  ReturnURL  URL  BuyerCookie  PayloadID  Timestamp  PunchoutFromIdentity  PunchoutToIdentity  PunchoutSenderIdentity  PunchoutSenderSharedSecret  DeliveryAddressGUID  DeliveryAddressName  DeliveryAddressLine1  DeliveryAddressLine2  DeliveryAddressLine3  DeliveryAddressLine4  DeliveryCountry  DeliveryCounty  DeliveryPostcode  DeliveryPostTown   An example XSLT document is available  here .",
            "title": "cXML Handshake"
        },
        {
            "location": "/p2p/punchout/#cxml-oci-returned-basket",
            "text": "When the basket is returned from the supplier by default it is transformed into the correct P2P format by using an XSLT embedded within the product.  This can be replaced by your own transform by creating a file in the plugins folder called  ReturnedPunchoutBasket_{supplierCode}.xslt  Where  {supplierCode}  is the code of your supplier.\nThe XSLT must generate XML in the following format:  <PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>  An example XSLT document is available  here .",
            "title": "cXML &amp; OCI Returned Basket"
        },
        {
            "location": "/p2p/punchout/#custom-return-page",
            "text": "By default the supplier posts their basket back to either  PunchoutReturned.aspx  (for cxml) or  PunchoutReturnedOCI.aspx  (for oci).  It is however possible for you to provide your own page for processing the returned basket.  This is configured by completing the following field against the supplier record.   This page should be placed in the Customer folder within the website.  The default  PunchoutReturned.aspx  page looks for the basket xml in the following form fields:   XML  cxml-urlencode  cxml-urlencoded  cXML-base64  oracleCart  the first form field   The default  PunchoutReturnedOCI.aspx  page looks for the basket xml in the form fields as follows:   The items are returned in arrays of fields.  Indexed from 1 onwards  First it checks there is a field called NEW_ITEM+DESCRIPTION[1].  If there isn\u2019t then it assumes that no basket items were returned.  It then loops through all fields which are named in the format NEW_xxxxx[n] where xxxxx is the name of a property and n is the item number.  Each of these form fields are then added into the xml.  The result xml will have the following format:   <PurchaseOrder>\n    <line number=1 item+description=\u2019red pen\u2019 etc etc />\n</PurchaseOrder>",
            "title": "Custom Return Page"
        },
        {
            "location": "/p2p/punchout/#market-place",
            "text": "PROACTIS P2P allows users to connect to a \u201cmarket place\u201d where they can then browse catalogues of one or more suppliers.  When they have finished browsing and click check-out then their returned basket is used to create one or more draft purchase orders (or requisitions) within PROACTIS.\nUnlike previous versions of PROACTIS it is now possible to configure marketplace connections directly within the product.",
            "title": "Market Place"
        },
        {
            "location": "/p2p/punchout/#configuration",
            "text": "Using the \u201cSystem Control\u201d application choose the Marketplaces option from the Supplier Maintenance menu.  Add a New market place and complete both the Details and PunchOut sections.  The following marketplace types (standards) are currently supported:   CXML  PROACTIS EGS  Procserve  Science warehouse   The Supplier Code Mapped From field specifies how the supplier code in the returned basket is mapped back to the suppliers within PROACTIS.",
            "title": "Configuration"
        },
        {
            "location": "/p2p/punchout/#customisation",
            "text": "The xml used for the initial connection is generated using an xslt embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called  MarketPlaceConnection_{marketPlaceName}.xslt .  Where  {marketPlaceName}  is the name of the configured marketplace.\nThe fields passed into the xml are listed below:   DepartmentCode  CompanyCode  LogonName  Email  ReturnURL  URL  BuyerCookie  PayloadID  Timestamp  PunchoutFromIdentity  PunchoutToIdentity  PunchoutSenderIdentity  PunchoutSenderSharedSecret   When the basket is returned from the market place by default it is transformed into the correct format by using an XSLT embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called  MarketPlaceResult_{marketPlaceName}.xslt .  Where  {marketPlaceName}  is the name of the configured marketplace.\nThe xslt needs to generate xml in the following format  <PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>",
            "title": "Customisation"
        },
        {
            "location": "/p2p/punchout/#troubleshooting",
            "text": "The default XSLTs used for processing the returned baskets may create the following reference fields against the generated items:   ContractReference  PartID   If however either of these references already exist in  dsdba.CompanyReferences  table but without a category of 'global' then the following error will be reported.  There is already a reference of type template with a code of ContractReference. This reference cannot be linked to an item.  The solution is to either convert the reference field to a global one,  or drop a custom XSLT into the plugins folder which uses a different reference field.",
            "title": "Troubleshooting"
        },
        {
            "location": "/p2p/punchout/#egs-marketplaces",
            "text": "The EGS settings within the PROACTIS Connectivity snapin, do not refer to marketplace PunchOut.  This are used to configure different functionality not covered by this document.",
            "title": "EGS Marketplaces"
        },
        {
            "location": "/p2p/punchout/#proxy-server",
            "text": "Connections to both supplier PunchOut, and marketplaces honour the proxy server settings held in the  dsdba.ProxySettings  table.\nThis can be configured using the System Control application.",
            "title": "Proxy Server"
        },
        {
            "location": "/p2p/nominalvalidation/",
            "text": "Nominal Validation\n\n\nOverview\n\n\nThe core PROACTIS P2P product includes the functionality for complex nominal rules to be defined using the concept of nominal groups.\n\n\nIn some situations there might be a requirement to also validate the nominal coding entered against a purchase order line against an external source,  such as a finance system.\n\n\nIn a lot of cases this can be configured using the \nGeneric Nominal Validation\n snapin directly within the product.  This is the preferred approach as all the configuration is held within the database and the generic nominal validation module automatically provides extra features such as caching.\n\n\nIf \nGeneric Nominal Validation\n is not suitable for your needs then a custom DLL can be implemented providing you with complete control of the process.\n\n\n\n\nImplementation Steps\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzNominalValidation. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll\n\n\n\n\n\n\nAdd a class called \nServices\n which implements the \ngrsCustInterfaces.INominals\n interface.\n\n\n\n\n\n\nWrite an implementation of the \ngrsCustInterfaces.INominals.NominalCheck\n method.\n\n\n\n\n\n\nbool grsCustInterfaces.INominals.NominalCheck(string NominalsXML, string POXML, ref string ErrorNominals)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNominalsXML\n\n\nIn\n\n\nAn xml document containing the nominals which need to be validated.  This also includes details of the database,  company and user.\n\n\n\n\n\n\nPOXML\n\n\nIn\n\n\nAn xml document containing the entire purchase order to validate.  By default this argument is blank unless the company-wide setting is enabled.\n\n\n\n\n\n\nErrorNominals\n\n\nOut\n\n\nIf the nominals fail validation,  then you should return an xml document listing the failing nominals.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return True if all nominals are valid and False if one or more nominals are invalid.\n\n\nNominals XML\n\n\nBelow is an example of the xml passed to the \nNominalsXML\n argument.\n\n\n<grs:NominalCheck xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n    <grs:Database grs:Server=\"Develop07\" grs:DatabaseName=\"PROACTISIII\"/>\n\n    <grs:General grs:UserGUID=\"{02E0D6D9-B655-11D5-91D6-000629864A98}\" grs:CompanyGUID=\"{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}\"/>\n\n    <grs:Nominals>\n    <grs:Nominal grs:Coding=\"1720\" grs:Element1=\"1720\" grs:Element2=\"\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:El\n    ement8=\"\" grs:ValidNominal=\"False\"/>\n\n        <grs:Nominal grs:Coding=\"4744.1100\" grs:Element1=\"4744\" grs:Element2=\"1100\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n    </grs:Nominals>\n</grs:NominalCheck>\n\n\n\n\nPOXML\n\n\n\n\nWarning\n\n\nThe POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively. \n\n\n\n\nError Nominals\n\n\nThe xml for the returned invalid nominals takes a similar structure to the NominalsXML argument.  For example:\n\n\n<grs:Nominals xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n   <grs:Nominal grs:Coding=\"1720\" grs:Element1=\"1720\" grs:Element2=\"\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n   <grs:Nominal grs:Coding=\"4744.1100\" grs:Element1=\"4744\" grs:Element2=\"1100\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n</grs:Nominals>\n\n\n\n\n\n\nExample\n\n\nSee the \nexample application\n for a complete implementation.\n\n\n\n\nDeployment\n\n\nYour dll should be complied (and named xyzNominalValidation.dll) and then copied into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.",
            "title": "Nominal Validation"
        },
        {
            "location": "/p2p/nominalvalidation/#nominal-validation",
            "text": "",
            "title": "Nominal Validation"
        },
        {
            "location": "/p2p/nominalvalidation/#overview",
            "text": "The core PROACTIS P2P product includes the functionality for complex nominal rules to be defined using the concept of nominal groups.  In some situations there might be a requirement to also validate the nominal coding entered against a purchase order line against an external source,  such as a finance system.  In a lot of cases this can be configured using the  Generic Nominal Validation  snapin directly within the product.  This is the preferred approach as all the configuration is held within the database and the generic nominal validation module automatically provides extra features such as caching.  If  Generic Nominal Validation  is not suitable for your needs then a custom DLL can be implemented providing you with complete control of the process.",
            "title": "Overview"
        },
        {
            "location": "/p2p/nominalvalidation/#implementation-steps",
            "text": "Create a new C# Class Library project called xyzNominalValidation. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll    Add a class called  Services  which implements the  grsCustInterfaces.INominals  interface.    Write an implementation of the  grsCustInterfaces.INominals.NominalCheck  method.    bool grsCustInterfaces.INominals.NominalCheck(string NominalsXML, string POXML, ref string ErrorNominals)",
            "title": "Implementation Steps"
        },
        {
            "location": "/p2p/nominalvalidation/#arguments",
            "text": "Argument  Direction  Description      NominalsXML  In  An xml document containing the nominals which need to be validated.  This also includes details of the database,  company and user.    POXML  In  An xml document containing the entire purchase order to validate.  By default this argument is blank unless the company-wide setting is enabled.    ErrorNominals  Out  If the nominals fail validation,  then you should return an xml document listing the failing nominals.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/nominalvalidation/#return-value",
            "text": "The function should return True if all nominals are valid and False if one or more nominals are invalid.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/nominalvalidation/#nominals-xml",
            "text": "Below is an example of the xml passed to the  NominalsXML  argument.  <grs:NominalCheck xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n    <grs:Database grs:Server=\"Develop07\" grs:DatabaseName=\"PROACTISIII\"/>\n\n    <grs:General grs:UserGUID=\"{02E0D6D9-B655-11D5-91D6-000629864A98}\" grs:CompanyGUID=\"{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}\"/>\n\n    <grs:Nominals>\n    <grs:Nominal grs:Coding=\"1720\" grs:Element1=\"1720\" grs:Element2=\"\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:El\n    ement8=\"\" grs:ValidNominal=\"False\"/>\n\n        <grs:Nominal grs:Coding=\"4744.1100\" grs:Element1=\"4744\" grs:Element2=\"1100\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n    </grs:Nominals>\n</grs:NominalCheck>",
            "title": "Nominals XML"
        },
        {
            "location": "/p2p/nominalvalidation/#poxml",
            "text": "Warning  The POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively.",
            "title": "POXML"
        },
        {
            "location": "/p2p/nominalvalidation/#error-nominals",
            "text": "The xml for the returned invalid nominals takes a similar structure to the NominalsXML argument.  For example:  <grs:Nominals xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n   <grs:Nominal grs:Coding=\"1720\" grs:Element1=\"1720\" grs:Element2=\"\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n   <grs:Nominal grs:Coding=\"4744.1100\" grs:Element1=\"4744\" grs:Element2=\"1100\" grs:Element3=\"\" grs:Element4=\"\" grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\" grs:ValidNominal=\"False\"/>\n</grs:Nominals>",
            "title": "Error Nominals"
        },
        {
            "location": "/p2p/nominalvalidation/#example",
            "text": "See the  example application  for a complete implementation.",
            "title": "Example"
        },
        {
            "location": "/p2p/nominalvalidation/#deployment",
            "text": "Your dll should be complied (and named xyzNominalValidation.dll) and then copied into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.",
            "title": "Deployment"
        },
        {
            "location": "/p2p/budgetchecking/",
            "text": "Budget Checking\n\n\nOverview\n\n\nPROACTIS P2P allows budgets to be checking against an external source when a purchase order is being submitted.\n\n\nThe preferred method is to configure budget checking using the \nGeneric Budget Checking\n snapin and the module keeps all the settings in the P2P database and automatically provides additional functions such as caching.\n\n\n\n\nCustom DLL\n\n\nTo write a custom budget checking DLL,  the following methods must be implemented.\n\n\n\n\n\n\nCommitmentCheck\n\nGiven a set of nominal lines from a purchase order returns False if at least one line on the order has failed budget checking\n\n\n\n\n\n\nCommitmentReport\n\nGiven a set of nominal lines from a purchase order returns a custom table showing the available funds calculation for each.  For example the table might have columns for Original Budget,  Spend To Date,  Accruals and Remaining Budget.\n\n\n\n\n\n\nGetOverspend\n\nGiven a set of nominal lines from a purchase order returns the total amount that the document exceeds the available budget.   This figure can be used in your authorisation workflow to route an document to the correct approver.\n\n\n\n\n\n\n\n\nNote\n\n\nYou are not required to implement the \nGetOverspend\n method but it is recommended.\n\n\n\n\n\n\nImplementation\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzBudgetChecking. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll\n\n\n\n\n\n\nAdd a class called \nServices\n which implements the \ngrsCustInterfaces.IOverSpend\n and \ngrsCustInterfaces.ICustCommit\n interfaces.\n\n\n\n\n\n\nWrite an implementation of the \ngrsCustInterfaces.ICustCommit.CommitmentCheck\n method.\n\n\n\n\n\n\nbool grsCustInterfaces.ICustCommit.CommitmentCheck(string NominalsXML, string POXML)\n\n\n\n\n\n\nWrite an implementation of the \ngrsCustInterfaces.ICustCommit.CommitmentReport\n method.\n\n\n\n\nstring grsCustInterfaces.ICustCommit.CommitmentReport(string NominalsXML, string POXML)\n\n\n\n\n\n\n(Optionally) Write an implementation of the \ngrsCustInterfaces.IOverSpend.GetOverspend\n method.\n\n\n\n\ndecimal grsCustInterfaces.IOverSpend.GetOverspend(string NominalsXML, string POXML)\n\n\n\n\n\n\nICustCommit.CommitmentCheck\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNominalsXML\n\n\nIn\n\n\nAn xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.\n\n\n\n\n\n\nPOXML\n\n\nIn\n\n\nAn xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return True if all the lines pass budget checking and False if at least one line fails the check.\n\n\nNominals XML\n\n\nBelow is an example of the xml passed to the \nNominalsXML\n argument.\n\n\n<grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n</grs:CommitmentLookup>\n\n\n\n\nThe \nNominalPeriods\n element is repeated for each nominal line on the purchase order.\n\n\n\n\nWarning\n\n\nThe POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively. \n\n\n\n\n\n\nICustCommit.CommitmentReport\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNominalsXML\n\n\nIn\n\n\nAn xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.\n\n\n\n\n\n\nPOXML\n\n\nIn\n\n\nAn xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return a table (in xml format) which describes the budget calculation for each line on the order.\n\n\nNominals XML\n\n\nBelow is an example of the xml passed to the \nNominalsXML\n argument.\n\n\n<grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n</grs:CommitmentLookup>\n\n\n\n\nThe \nNominalPeriods\n element is repeated for each nominal line on the purchase order.\n\n\n\n\nWarning\n\n\nThe POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively. \n\n\n\n\nReturned XML\n\n\nThe function needs to return XML with the following structure\n\n\n<grs:HeadedList xmlns:grs='http://www.getrealsystems.com/xml/xml-ns'>\n\n<grs:Headings>\n    <grs:Column grs:Number='1' grs:Type=''          grs:BudgetType=''>Nominal Coding</grs:Column>\n    <grs:Column grs:Number='2' grs:Type='Currency'  grs:BudgetType='Budget'>Budget For Year</grs:Column>\n    <grs:Column grs:Number='3' grs:Type='Currency'  grs:BudgetType='Cost'>Spend To Date</grs:Column>\n    <grs:Column grs:Number='4' grs:Type='Currency'  grs:BudgetType='Cost'>Accruals</grs:Column>\n    <grs:Column grs:Number='5' grs:Type='Currency'  grs:BudgetType='Cost'>This Document</grs:Column>\n    <grs:Column grs:Number='6' grs:Type='Currency'  grs:BudgetType=''>Remaining Budget</grs:Column>\n    <grs:Column grs:Number='7' grs:Type='Highlight' grs:BudgetType=''>Highlight</grs:Column>\n</grs:Headings>\n\n<grs:Items>\n    <grs:Item grs:GUID='{3A8D2AC2-6287-41DF-817A-F77B0551D80D}' >\n        <grs:Column grs:Number='1' grs:Type='Standard'>SALES.CONF.MARKETING</grs:Column>\n        <grs:Column grs:Number='2' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>100000</grs:Column>\n        <grs:Column grs:Number='3' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>60000</grs:Column>\n        <grs:Column grs:Number='4' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency' Hyperlink='/CommitmentReport.html'>50000</grs:Column>\n        <grs:Column grs:Number='5' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>20000</grs:Column>\n        <grs:Column grs:Number='6' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>-10000</grs:Column>\n        <grs:Column grs:Number='7' grs:Type='Highlight'>true</grs:Column>\n    </grs:Item>\n</grs:Items>\n\n</grs:HeadedList>\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nYou need to define one \ngrs:Column\n element for each column you wish to appear in the commitment report.\n\n\n\n\nThe grs:Number attribute should sequentially number the columns 1...\n\n\nThe grs:Type attribute can be \"\" (blank),  Currency (for a monetary value) or Highlight (failure indicator)\n\n\nThe grs:BudgetType columns is used by the budget graphic.  It can be \"\" (blank),  Budget or Cost  \n\n\n\n\n\n\n\n\nYou need to add one \ngrs:Item\n for each line that you wish to appear on the report.  Within each \nItem\n element a \nColumn\n element must be added for each column you defined in the \nHeadings\n element.\n\n\n\n\nThe grs:Number attribute should match the number of the column.\n\n\nThe grs:Type attribute can be \"\" (blank),  Currency (for a monetary value) or Highlight (failure indicator)\n\n\nIf the Type is currency,  then the CurrencySymbol and DecimalPlaces attributes should also be provided\n\n\nOptionally a hyperlink attribute can be provided.  The renders the value as an HTML 'a' link.\n\n\n\n\n\n\n\n\n\n\nIOverSpend.GetOverspend\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNominalsXML\n\n\nIn\n\n\nAn xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.\n\n\n\n\n\n\nPOXML\n\n\nIn\n\n\nAn xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return the total amount (as a decimal) that the lines on the order exceed their budget.  For example if the first line exceeded by \u00a310 and the second by \u00a320 then you should return 30.\n\n\nNominals XML\n\n\nBelow is an example of the xml passed to the \nNominalsXML\n argument.\n\n\n<grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n\n\n\n\n\nWarning\n\n\nThe POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively. \n\n\n\n\n\n\nExample\n\n\nSee the \nexample application\n for a complete implementation.\n\n\n\n\nDeployment\n\n\nYour dll should be complied (and named xyzBudgetChecking.dll) and then copied into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.",
            "title": "Budget Checking"
        },
        {
            "location": "/p2p/budgetchecking/#budget-checking",
            "text": "",
            "title": "Budget Checking"
        },
        {
            "location": "/p2p/budgetchecking/#overview",
            "text": "PROACTIS P2P allows budgets to be checking against an external source when a purchase order is being submitted.  The preferred method is to configure budget checking using the  Generic Budget Checking  snapin and the module keeps all the settings in the P2P database and automatically provides additional functions such as caching.",
            "title": "Overview"
        },
        {
            "location": "/p2p/budgetchecking/#custom-dll",
            "text": "To write a custom budget checking DLL,  the following methods must be implemented.    CommitmentCheck \nGiven a set of nominal lines from a purchase order returns False if at least one line on the order has failed budget checking    CommitmentReport \nGiven a set of nominal lines from a purchase order returns a custom table showing the available funds calculation for each.  For example the table might have columns for Original Budget,  Spend To Date,  Accruals and Remaining Budget.    GetOverspend \nGiven a set of nominal lines from a purchase order returns the total amount that the document exceeds the available budget.   This figure can be used in your authorisation workflow to route an document to the correct approver.     Note  You are not required to implement the  GetOverspend  method but it is recommended.",
            "title": "Custom DLL"
        },
        {
            "location": "/p2p/budgetchecking/#implementation",
            "text": "Create a new C# Class Library project called xyzBudgetChecking. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll    Add a class called  Services  which implements the  grsCustInterfaces.IOverSpend  and  grsCustInterfaces.ICustCommit  interfaces.    Write an implementation of the  grsCustInterfaces.ICustCommit.CommitmentCheck  method.    bool grsCustInterfaces.ICustCommit.CommitmentCheck(string NominalsXML, string POXML)   Write an implementation of the  grsCustInterfaces.ICustCommit.CommitmentReport  method.   string grsCustInterfaces.ICustCommit.CommitmentReport(string NominalsXML, string POXML)   (Optionally) Write an implementation of the  grsCustInterfaces.IOverSpend.GetOverspend  method.   decimal grsCustInterfaces.IOverSpend.GetOverspend(string NominalsXML, string POXML)",
            "title": "Implementation"
        },
        {
            "location": "/p2p/budgetchecking/#icustcommitcommitmentcheck",
            "text": "",
            "title": "ICustCommit.CommitmentCheck"
        },
        {
            "location": "/p2p/budgetchecking/#arguments",
            "text": "Argument  Direction  Description      NominalsXML  In  An xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.    POXML  In  An xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/budgetchecking/#return-value",
            "text": "The function should return True if all the lines pass budget checking and False if at least one line fails the check.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/budgetchecking/#nominals-xml",
            "text": "Below is an example of the xml passed to the  NominalsXML  argument.  <grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n</grs:CommitmentLookup>  The  NominalPeriods  element is repeated for each nominal line on the purchase order.   Warning  The POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively.",
            "title": "Nominals XML"
        },
        {
            "location": "/p2p/budgetchecking/#icustcommitcommitmentreport",
            "text": "",
            "title": "ICustCommit.CommitmentReport"
        },
        {
            "location": "/p2p/budgetchecking/#arguments_1",
            "text": "Argument  Direction  Description      NominalsXML  In  An xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.    POXML  In  An xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/budgetchecking/#return-value_1",
            "text": "The function should return a table (in xml format) which describes the budget calculation for each line on the order.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/budgetchecking/#nominals-xml_1",
            "text": "Below is an example of the xml passed to the  NominalsXML  argument.  <grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>\n\n</grs:CommitmentLookup>  The  NominalPeriods  element is repeated for each nominal line on the purchase order.   Warning  The POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively.",
            "title": "Nominals XML"
        },
        {
            "location": "/p2p/budgetchecking/#returned-xml",
            "text": "The function needs to return XML with the following structure  <grs:HeadedList xmlns:grs='http://www.getrealsystems.com/xml/xml-ns'>\n\n<grs:Headings>\n    <grs:Column grs:Number='1' grs:Type=''          grs:BudgetType=''>Nominal Coding</grs:Column>\n    <grs:Column grs:Number='2' grs:Type='Currency'  grs:BudgetType='Budget'>Budget For Year</grs:Column>\n    <grs:Column grs:Number='3' grs:Type='Currency'  grs:BudgetType='Cost'>Spend To Date</grs:Column>\n    <grs:Column grs:Number='4' grs:Type='Currency'  grs:BudgetType='Cost'>Accruals</grs:Column>\n    <grs:Column grs:Number='5' grs:Type='Currency'  grs:BudgetType='Cost'>This Document</grs:Column>\n    <grs:Column grs:Number='6' grs:Type='Currency'  grs:BudgetType=''>Remaining Budget</grs:Column>\n    <grs:Column grs:Number='7' grs:Type='Highlight' grs:BudgetType=''>Highlight</grs:Column>\n</grs:Headings>\n\n<grs:Items>\n    <grs:Item grs:GUID='{3A8D2AC2-6287-41DF-817A-F77B0551D80D}' >\n        <grs:Column grs:Number='1' grs:Type='Standard'>SALES.CONF.MARKETING</grs:Column>\n        <grs:Column grs:Number='2' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>100000</grs:Column>\n        <grs:Column grs:Number='3' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>60000</grs:Column>\n        <grs:Column grs:Number='4' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency' Hyperlink='/CommitmentReport.html'>50000</grs:Column>\n        <grs:Column grs:Number='5' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>20000</grs:Column>\n        <grs:Column grs:Number='6' grs:CurrencySymbol='\u00a3' grs:DecimalPlaces='0' grs:Type='Currency'>-10000</grs:Column>\n        <grs:Column grs:Number='7' grs:Type='Highlight'>true</grs:Column>\n    </grs:Item>\n</grs:Items>\n\n</grs:HeadedList>   Note    You need to define one  grs:Column  element for each column you wish to appear in the commitment report.   The grs:Number attribute should sequentially number the columns 1...  The grs:Type attribute can be \"\" (blank),  Currency (for a monetary value) or Highlight (failure indicator)  The grs:BudgetType columns is used by the budget graphic.  It can be \"\" (blank),  Budget or Cost       You need to add one  grs:Item  for each line that you wish to appear on the report.  Within each  Item  element a  Column  element must be added for each column you defined in the  Headings  element.   The grs:Number attribute should match the number of the column.  The grs:Type attribute can be \"\" (blank),  Currency (for a monetary value) or Highlight (failure indicator)  If the Type is currency,  then the CurrencySymbol and DecimalPlaces attributes should also be provided  Optionally a hyperlink attribute can be provided.  The renders the value as an HTML 'a' link.",
            "title": "Returned XML"
        },
        {
            "location": "/p2p/budgetchecking/#ioverspendgetoverspend",
            "text": "",
            "title": "IOverSpend.GetOverspend"
        },
        {
            "location": "/p2p/budgetchecking/#arguments_2",
            "text": "Argument  Direction  Description      NominalsXML  In  An xml document containing the nominals which need to be budget checked.  This also includes details of the database,  company and user.    POXML  In  An xml document containing the entire purchase order to check.  By default this argument is blank unless the company-wide setting is enabled.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/budgetchecking/#return-value_2",
            "text": "The function should return the total amount (as a decimal) that the lines on the order exceed their budget.  For example if the first line exceeded by \u00a310 and the second by \u00a320 then you should return 30.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/budgetchecking/#nominals-xml_2",
            "text": "Below is an example of the xml passed to the  NominalsXML  argument.  <grs:CommitmentLookup xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:Database grs:Server=\"localhost\" grs:DatabaseName=\"PROACTIS\" />\n<grs:General grs:UserGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:CompanyGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" />\n<grs:Currencies><grs:Currency grs:CurrencyGUID=\"{2E67C438-9012-415B-AED4-8809F0012A78}\" grs:Status=\"H1\" grs:Symbol=\"\u00a3\" grs:DecimalPlaces=\"2\" /></grs:Currencies>\n\n<grs:NominalPeriods>\n    <grs:NominalPeriod grs:Year=\"2017\" grs:Period=\"1\" grs:YearPeriodGUID=\"{3A8D2AC2-6287-41DF-817A-F77B0551D80D}\" grs:Value=\"120.12\" \n    grs:Home1Value=\"120.12\" grs:Home2Value=\"120.12\" grs:NonRecoverableTax=\"0\" grs:NonRecoverableTaxHome1=\"0\" grs:NonRecoverableTaxHome2=\"0\">\n        <grs:Nominal grs:Coding=\"SALES.CONF.MARKET\" grs:Element1=\"SALES\" grs:Element2=\"CONF\" grs:Element3=\"MARKET\" grs:Element4=\"\" \n        grs:Element5=\"\" grs:Element6=\"\" grs:Element7=\"\" grs:Element8=\"\"></grs:Nominal>\n    </grs:NominalPeriod>\n</grs:NominalPeriods>   Warning  The POXML argument is populated with an xml document based on a internal product structure which may change over time from release to release.  It is recommended that you only extract information that you cannot obtain from elsewhere,  and also code defensively.",
            "title": "Nominals XML"
        },
        {
            "location": "/p2p/budgetchecking/#example",
            "text": "See the  example application  for a complete implementation.",
            "title": "Example"
        },
        {
            "location": "/p2p/budgetchecking/#deployment",
            "text": "Your dll should be complied (and named xyzBudgetChecking.dll) and then copied into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.",
            "title": "Deployment"
        },
        {
            "location": "/p2p/customtab/",
            "text": "Custom Tab\n\n\nThe P2P website can be extended by creating additional \"custom\" tabs.  \n\n\n\n\nLicence File\n\n\nIn order to display a custom tab you will first need a licence file which includes the name of the tab.  \n\n\n\n\n\n\nNote\n\n\nPlease contact your account manager for assistance with this.\n\n\n\n\nIn this example the tab will be displayed as  \nManage Resource Bookings\n and will only be visible to users with the \nMAY_BOOK_RESOURCES\n user role.\n\n\n \n\n\n\n\nDevelopment\n\n\nCustom tab are developed as independent websites which are then displayed as part of the core site within an iFrame.\n\n\n\n\nIn the screenshot above,  the blue menu bar comes from the main site,  whilst the remainder of the page (in white) is the custom tab.\n\n\nBy convention the custom sites are placed within the \nWebSite\\Customer\n folder and are mapped as a virtual application with in IIS.   \n\n\n\n\nIn order for P2P to know the URL of the page is displayed it's path needs to be added to the \nApplicationConfig.xml\n file.\n\n\n \n\n\n\n\nWarning\n\n\nAfter changing the application configuration file the caches in the website will need refreshing.   This can be done either by recycling the application pool,  or by performing an IIS reset.\n\n\n\n\n\n\nSession Details\n\n\nAs the custom tab is running in a different website to the main site it is not possible to share the session state within IIS.\n\n\nInstead the following steps must be followed in order to obtain the details of the current user.\n\n\n\n\n\n\nBefore the main site opens your landing page it first generates a unique session token which is stored in the database within the \ndsdba.LoginTokens\n table.  This table also holds who the current user is. \n\n\n\n\n\n\nWhen the landing page is opened,  it is passed the following information as query string parameters\n\n\n\n\nToken  (the unique token)\n\n\nTitle  (the name of the tab)\n\n\nURL    (the url of the tab)\n\n\n\n\nThe token argument is made up of the {Database's Title} @ {The unique generated session token}\n\n\n\n\n\n\nThe custom tab should then connect to the P2P database and call the \nDSDBA.usp_cust_GetSessionDetailsFromToken\n stored procedure supplying the full token.  This stored procedure will return with a single row containing the following columns:\n\n\n\n\nUserGUID\n\n\nLoginID\n\n\nCompanyGUID\n\n\nCompanyCode\n\n\nDepartmentGUID\n\n\nDepartmentCode\n\n\nStoreGUID\n\n\nStoreCode\n\n\nSessionID  (the internal P2P session ID)\n\n\nExpires  (when the login token will expiry)\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe stored procedure will return a row even when the session ID is not valid.  In this case however all the values will be NULL.\n\n\n\n\n\n\nPlease Wait Spinner\n\n\nWhilst your tab is first loading the main site will be displaying the please wait spinner.  In order to remove the spinner the following javascript code should be added to the end of your first page\n\n\n    <script type=\"text/javascript\">\n        //Hide the spinner in the main window.\n        $().ready(function () {\n            parent.hideSpinner();\n        });\n    </script>\n\n\n\n\nIf you wish to re-display the spinner then the following javascript can be used\n\n\n\u00a0\u00a0\u00a0 <script type=\"text/javascript\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 window.parent.showSpinner();\n\u00a0\u00a0\u00a0 </script>\n\n\n\n\n\n\nUser Role Security\n\n\nBy default all users have access to the new tab.  If you wish to restrict access to only certain users then the name of a user role (or a custom role) can be specified for the tab within the licence file.\n\n\nIf you wish to create a custom role,  then you will also need to insert an entry into the \nDSDBA.Roles\n table with the same name.\n\n\nINSERT INTO DSDBA.Roles (GUID, Code, Description, Properties, CompanyGUID)\nSELECT newID(), 'MAY_BOOK_RESOURCES', 'Users may use the bookings tab', '', C.GUID\n  FROM DSDBA.Companies C\n\n\n\n\n\n\nExample Application\n\n\nPlease see the \nexample application\n for a complete implementation.\n\n\n\n\nTroubleshooting\n\n\nIf your custom tab does not appear then check the following\n\n\n\n\nYour licence file includes the section for your custom tab.\n\n\nIf the RelatedRole has been specified in the licence file then the user has been granted that role.\n\n\nThe URL of the custom page has been specified in the \nweb.config\n file",
            "title": "Custom Tabs"
        },
        {
            "location": "/p2p/customtab/#custom-tab",
            "text": "The P2P website can be extended by creating additional \"custom\" tabs.",
            "title": "Custom Tab"
        },
        {
            "location": "/p2p/customtab/#licence-file",
            "text": "In order to display a custom tab you will first need a licence file which includes the name of the tab.      Note  Please contact your account manager for assistance with this.   In this example the tab will be displayed as   Manage Resource Bookings  and will only be visible to users with the  MAY_BOOK_RESOURCES  user role.",
            "title": "Licence File"
        },
        {
            "location": "/p2p/customtab/#development",
            "text": "Custom tab are developed as independent websites which are then displayed as part of the core site within an iFrame.   In the screenshot above,  the blue menu bar comes from the main site,  whilst the remainder of the page (in white) is the custom tab.  By convention the custom sites are placed within the  WebSite\\Customer  folder and are mapped as a virtual application with in IIS.      In order for P2P to know the URL of the page is displayed it's path needs to be added to the  ApplicationConfig.xml  file.      Warning  After changing the application configuration file the caches in the website will need refreshing.   This can be done either by recycling the application pool,  or by performing an IIS reset.",
            "title": "Development"
        },
        {
            "location": "/p2p/customtab/#session-details",
            "text": "As the custom tab is running in a different website to the main site it is not possible to share the session state within IIS.  Instead the following steps must be followed in order to obtain the details of the current user.    Before the main site opens your landing page it first generates a unique session token which is stored in the database within the  dsdba.LoginTokens  table.  This table also holds who the current user is.     When the landing page is opened,  it is passed the following information as query string parameters   Token  (the unique token)  Title  (the name of the tab)  URL    (the url of the tab)   The token argument is made up of the {Database's Title} @ {The unique generated session token}    The custom tab should then connect to the P2P database and call the  DSDBA.usp_cust_GetSessionDetailsFromToken  stored procedure supplying the full token.  This stored procedure will return with a single row containing the following columns:   UserGUID  LoginID  CompanyGUID  CompanyCode  DepartmentGUID  DepartmentCode  StoreGUID  StoreCode  SessionID  (the internal P2P session ID)  Expires  (when the login token will expiry)      Warning  The stored procedure will return a row even when the session ID is not valid.  In this case however all the values will be NULL.",
            "title": "Session Details"
        },
        {
            "location": "/p2p/customtab/#please-wait-spinner",
            "text": "Whilst your tab is first loading the main site will be displaying the please wait spinner.  In order to remove the spinner the following javascript code should be added to the end of your first page      <script type=\"text/javascript\">\n        //Hide the spinner in the main window.\n        $().ready(function () {\n            parent.hideSpinner();\n        });\n    </script>  If you wish to re-display the spinner then the following javascript can be used  \u00a0\u00a0\u00a0 <script type=\"text/javascript\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 window.parent.showSpinner();\n\u00a0\u00a0\u00a0 </script>",
            "title": "Please Wait Spinner"
        },
        {
            "location": "/p2p/customtab/#user-role-security",
            "text": "By default all users have access to the new tab.  If you wish to restrict access to only certain users then the name of a user role (or a custom role) can be specified for the tab within the licence file.  If you wish to create a custom role,  then you will also need to insert an entry into the  DSDBA.Roles  table with the same name.  INSERT INTO DSDBA.Roles (GUID, Code, Description, Properties, CompanyGUID)\nSELECT newID(), 'MAY_BOOK_RESOURCES', 'Users may use the bookings tab', '', C.GUID\n  FROM DSDBA.Companies C",
            "title": "User Role Security"
        },
        {
            "location": "/p2p/customtab/#example-application",
            "text": "Please see the  example application  for a complete implementation.",
            "title": "Example Application"
        },
        {
            "location": "/p2p/customtab/#troubleshooting",
            "text": "If your custom tab does not appear then check the following   Your licence file includes the section for your custom tab.  If the RelatedRole has been specified in the licence file then the user has been granted that role.  The URL of the custom page has been specified in the  web.config  file",
            "title": "Troubleshooting"
        },
        {
            "location": "/p2p/addins/",
            "text": "Add-ins\n\n\nP2P supports the concept of 'Add-ins' which are additional custom links which can be added to any page within the core website.\n\n\n\n\nSetup\n\n\n\n\n\n\nEnsure that a sub-folder called \nAddins\n exists within the Customer virtual directory in the root of the web site. \n\n\n\n\n\n\nIf the folder doesn't already contain a file called \nAddins.xml\n then create the following file.  If the file does already exist then add your new page to it.\n\n\n\n\n\n\n<AddIns>\n    <Page Name=\"Purchasing/Orders/Plus/MultiLineEntry.asp\">\n        <Link AddInURL=\"SampleOrderAddIn.aspx\" WindowWidth=\"900\" WindowHeight=\"600\" WindowName=\"OrderTaxReset\">Sample Order AddIn</Link>\n    </Page>\n</AddIns>\n\n\n\n\nIn the example above,  a link captioned \nSample Order Addin\n will be added to the \nMultiLineEntry.asp\n page.  When this link is clicked a new window will open (900x600) which will display the URL \nSampleOrderAddIn.aspx\n\n\n\n\n\n\nIn the same folder create your add-in page.   (\nFor example SampleOrderAddIn.aspx\n)\n\n\n\n\n\n\nIf you wish your add-in to interact with the main site,  then please read the following \nJavascript\n section.\n\n\n\n\n\n\n\n\nCSS\n\n\nIn order to pick up some of the styling from the main site (such as the default font-family and font size for the page) the \nCustomSupport/Site.css\n style-sheet should be referenced.\n\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"../../CustomSupport/Site.css\" />\n\n\n\n\n\n\nJavascript\n\n\nAn add-in page can communicate with the parent P2P application via javaScript calls exposed by the addInClient library.\n\n\nIncludes\n\n\nThe main web site has a \nCustomSupport\n folder that contains the files that need to be included (some optionally) in each add-in page.\n\n\nAddInClient.js\n:\u00a0 mandatory for communication between the add-in page and the owning main P2P page in the client\u2019s browser (which can in turn communicate with the server)\n\n\njquery-xxx.im.js\n: mandatory\u00a0 \n\n\njquery.filerNode.js\n: mandatory if you wish to use the xml services exposed by the AddInClient class, for manipulating order/invoice xml. Otherwise can be left out. \n\n\nkendo.xxx.min.js\n, Notifications.inc, Site.css: mandatory if you wish to use the same notification services and styling as the main web site for info, alert and error messages. Otherwise can be left out. \n\n\n    <script src=\"../../CustomSupport/jquery-2.2.4.min.js\"></script>\n    <script src=\"../../CustomSupport/jquery.filerNode.js\"></script>\n    <script src=\"../../CustomSupport/AddInClient.js\"></script>\n    <script src=\"../../CustomSupport/kendo.core.min.js\"></script>\n    <script src=\"../../CustomSupport/kendo.notification.min.js\"></script>\n    <script src=\"../../CustomSupport/kendo.popup.min.js\"></script>\n\n\n\n\n\n\naddInClient\n\n\nA core deliverable for any javaScript add-in solution, is the recognition that any single add-in page may need to make numerous AJAX calls in order to retrieve all the data it requires in order to function. Since those AJAX calls are asynchronous, the challenge is how to co-ordinate and handle their callbacks.\n\n\nThe addInClient javaScript class solves the callback challenge. Through the use of jQuery Deferred/Promise functionality, it can accept any number of AJAX calls as input, will manage their respective callbacks, combine the data retrieved and make that data available to the caller.\u00a0\n\n\nThe \naddInClient\n class exposes the following AJAX methods. Understand that these calls are asynchronous. The return values described below are not returned directly but rather indirectly via the \nMonitorAjaxCalls\n method. The methods below directly return a jQuery Promise object. \n\u00a0\n\n\nGetSessionID()\n\n\n\n\nReturns the current session-id.\n\n\n\n\nGetSessionParm(keyName)\n\n\n\n\nReturns the session value (as a string) stored against the specified key-name. \n\n\nReturns null if the session value is not present.\n\n\n\n\nGetSessionParms(keyNames)\n\n\nAccepts an array of key-names and returns the corresponding session values (or null values if the session value does not exist) Return value is a JSON array of key/value pairs First entry in return array is always the session-id. \n\n\nGetOrderInEdit()\n\n\n\n\nReturns the full order xml (including all lines) for the order currently in edit in the current session. \n\n\nReturns an error if no order is currently in edit.\n\n\n\n\nGetOrderInEditWithoutLines()\n\n\n\n\nReturns the order xml with an empty LineSet xml node (i.e. order header and footer only). \n\n\nReturns an error if no order is currently in edit \n\n\n\n\nGetInvoiceInEdit()\n\n\n\n\nReturns the full invoice xml (including all lines) for the invoice currently in edit in the current session. \n\n\n\n\nGetInvoiceInEditHeader()\n\n\n\n\nReturns the invoice header xml for the invoice currently in edit in the current session. \n\n\n\n\nGetInvoiceInEditFooter()\n\n\n\n\nReturns the invoice footer xml for the invoice currently in edit in the current session. \n\n\n\n\nMonitorAjaxCalls(ajaxCalls)\n\n\n\n\nAccepts an array of any combination of the above AJAX \u201cGet\u2026\u201d methods. Since each of the above \u201cGet\u2026\u201d methods actually returns a jQuery Promise object, the input to this method is actually an array of those Promise objects to be monitored.\u00a0 \n\n\nReturns a single jQuery Promise object to which resolve/fail events can be attached \n\n\nIf all input \u201cGet\u2026\u201d methods succeed then\u00a0 \n\n\nAll \u201cresolve\u201d events attached to the returned Promise, are triggered (in the order in which they were attached) \n\n\nEach \u201cresolve\u201d event is passed the following parameters \n\n\nResults\n: an array of return values, matching the AJAX calls that were input. The array entries will be simple strings, JSON key/value arrays or xml strings, as per the return types from the above \u201cGet\u2026\u201d methods.\u00a0 \n\n\nAlertMessages\n: an array of all alert messages output by the AJAX \u201cGet\u2026\u201d messages\n\n\nInfoMessages\n: an array of all info messages output by the AJAX \u201cGet\u2026\u201d messages\n\n\n\n\n\n\nIf any of input AJAX \u201cGet\u2026\u201d methods fail then \n\n\nAll \u201cfail\u201d events attached to the returned Promise, are triggered (in the order in which they were attached) \n\n\nEach \u201cfail\u201d event is passed an array of error messages. \n\n\nEven if some of the input AJAX \u201cGet\u2026\u201d events succeed, no \u201cresolve\u201d events are triggered. \n\n\n\n\n\n\n\n\nHandleError(errorMessages)\n\n\nWill test for the presence of notification services and output formal error notifications if possible. Otherwise will issue alerts for each error message. \n\n\n\n\nXMLServices\n\n\nExposes a set of helper methods for working with document xml (i.e. xml with the \u201cgrs\u201d namespace). The following methods are available \n\n\nloadDOM(xml)\n\n\n\n\nAccepts an xml string and returns a jQuery DOM object \n\n\n\n\ngetNode(parentNode, nodeName)\n\n\n\n\nAccepts a parent node (or the DOM) and the name of an immediate child element. \n\n\nReturns the child element \n\n\nnodeName can be an array of element names. Where each name corresponds to an element that is a child of the previous name (element).\u00a0 \n\n\n\n\nattr(node, attributeName)\n\n\n\n\nReturns the given attribute of the given element. \n\n\n\n\ngetNodeAttr(parentNode, nodeName, attributeName)\n\n\n\n\nFinds the specified immediate child element of the parent node and returns the specified attribute value. \n\n\n\n\nfilterNodeAttr(parentNode, nodeName, attributeName, attributeName)\n\n\n\n\nFinds the specified immediate child element of the parent node, which also has an attribute with the specified name and value. \n\n\nReturns the text value of that child element. \n\u00a0\n\n\n\n\n\n\nSample Add-In\n\n\nThere is a sample add-in and xml file available \nhere\n.\n\n\nThe sample is available from the multi-line orders page and shows how order information can be retrieved and displayed.",
            "title": "Addins"
        },
        {
            "location": "/p2p/addins/#add-ins",
            "text": "P2P supports the concept of 'Add-ins' which are additional custom links which can be added to any page within the core website.",
            "title": "Add-ins"
        },
        {
            "location": "/p2p/addins/#setup",
            "text": "Ensure that a sub-folder called  Addins  exists within the Customer virtual directory in the root of the web site.     If the folder doesn't already contain a file called  Addins.xml  then create the following file.  If the file does already exist then add your new page to it.    <AddIns>\n    <Page Name=\"Purchasing/Orders/Plus/MultiLineEntry.asp\">\n        <Link AddInURL=\"SampleOrderAddIn.aspx\" WindowWidth=\"900\" WindowHeight=\"600\" WindowName=\"OrderTaxReset\">Sample Order AddIn</Link>\n    </Page>\n</AddIns>  In the example above,  a link captioned  Sample Order Addin  will be added to the  MultiLineEntry.asp  page.  When this link is clicked a new window will open (900x600) which will display the URL  SampleOrderAddIn.aspx    In the same folder create your add-in page.   ( For example SampleOrderAddIn.aspx )    If you wish your add-in to interact with the main site,  then please read the following  Javascript  section.",
            "title": "Setup"
        },
        {
            "location": "/p2p/addins/#css",
            "text": "In order to pick up some of the styling from the main site (such as the default font-family and font size for the page) the  CustomSupport/Site.css  style-sheet should be referenced.  <link rel=\"stylesheet\" type=\"text/css\" href=\"../../CustomSupport/Site.css\" />",
            "title": "CSS"
        },
        {
            "location": "/p2p/addins/#javascript",
            "text": "An add-in page can communicate with the parent P2P application via javaScript calls exposed by the addInClient library.",
            "title": "Javascript"
        },
        {
            "location": "/p2p/addins/#includes",
            "text": "The main web site has a  CustomSupport  folder that contains the files that need to be included (some optionally) in each add-in page.  AddInClient.js :\u00a0 mandatory for communication between the add-in page and the owning main P2P page in the client\u2019s browser (which can in turn communicate with the server)  jquery-xxx.im.js : mandatory\u00a0   jquery.filerNode.js : mandatory if you wish to use the xml services exposed by the AddInClient class, for manipulating order/invoice xml. Otherwise can be left out.   kendo.xxx.min.js , Notifications.inc, Site.css: mandatory if you wish to use the same notification services and styling as the main web site for info, alert and error messages. Otherwise can be left out.       <script src=\"../../CustomSupport/jquery-2.2.4.min.js\"></script>\n    <script src=\"../../CustomSupport/jquery.filerNode.js\"></script>\n    <script src=\"../../CustomSupport/AddInClient.js\"></script>\n    <script src=\"../../CustomSupport/kendo.core.min.js\"></script>\n    <script src=\"../../CustomSupport/kendo.notification.min.js\"></script>\n    <script src=\"../../CustomSupport/kendo.popup.min.js\"></script>",
            "title": "Includes"
        },
        {
            "location": "/p2p/addins/#addinclient",
            "text": "A core deliverable for any javaScript add-in solution, is the recognition that any single add-in page may need to make numerous AJAX calls in order to retrieve all the data it requires in order to function. Since those AJAX calls are asynchronous, the challenge is how to co-ordinate and handle their callbacks.  The addInClient javaScript class solves the callback challenge. Through the use of jQuery Deferred/Promise functionality, it can accept any number of AJAX calls as input, will manage their respective callbacks, combine the data retrieved and make that data available to the caller.\u00a0  The  addInClient  class exposes the following AJAX methods. Understand that these calls are asynchronous. The return values described below are not returned directly but rather indirectly via the  MonitorAjaxCalls  method. The methods below directly return a jQuery Promise object.",
            "title": "addInClient"
        },
        {
            "location": "/p2p/addins/#getsessionid",
            "text": "Returns the current session-id.",
            "title": "GetSessionID()"
        },
        {
            "location": "/p2p/addins/#getsessionparmkeyname",
            "text": "Returns the session value (as a string) stored against the specified key-name.   Returns null if the session value is not present.",
            "title": "GetSessionParm(keyName)"
        },
        {
            "location": "/p2p/addins/#getsessionparmskeynames",
            "text": "Accepts an array of key-names and returns the corresponding session values (or null values if the session value does not exist) Return value is a JSON array of key/value pairs First entry in return array is always the session-id.",
            "title": "GetSessionParms(keyNames)"
        },
        {
            "location": "/p2p/addins/#getorderinedit",
            "text": "Returns the full order xml (including all lines) for the order currently in edit in the current session.   Returns an error if no order is currently in edit.",
            "title": "GetOrderInEdit()"
        },
        {
            "location": "/p2p/addins/#getorderineditwithoutlines",
            "text": "Returns the order xml with an empty LineSet xml node (i.e. order header and footer only).   Returns an error if no order is currently in edit",
            "title": "GetOrderInEditWithoutLines()"
        },
        {
            "location": "/p2p/addins/#getinvoiceinedit",
            "text": "Returns the full invoice xml (including all lines) for the invoice currently in edit in the current session.",
            "title": "GetInvoiceInEdit()"
        },
        {
            "location": "/p2p/addins/#getinvoiceineditheader",
            "text": "Returns the invoice header xml for the invoice currently in edit in the current session.",
            "title": "GetInvoiceInEditHeader()"
        },
        {
            "location": "/p2p/addins/#getinvoiceineditfooter",
            "text": "Returns the invoice footer xml for the invoice currently in edit in the current session.",
            "title": "GetInvoiceInEditFooter()"
        },
        {
            "location": "/p2p/addins/#monitorajaxcallsajaxcalls",
            "text": "Accepts an array of any combination of the above AJAX \u201cGet\u2026\u201d methods. Since each of the above \u201cGet\u2026\u201d methods actually returns a jQuery Promise object, the input to this method is actually an array of those Promise objects to be monitored.\u00a0   Returns a single jQuery Promise object to which resolve/fail events can be attached   If all input \u201cGet\u2026\u201d methods succeed then\u00a0   All \u201cresolve\u201d events attached to the returned Promise, are triggered (in the order in which they were attached)   Each \u201cresolve\u201d event is passed the following parameters   Results : an array of return values, matching the AJAX calls that were input. The array entries will be simple strings, JSON key/value arrays or xml strings, as per the return types from the above \u201cGet\u2026\u201d methods.\u00a0   AlertMessages : an array of all alert messages output by the AJAX \u201cGet\u2026\u201d messages  InfoMessages : an array of all info messages output by the AJAX \u201cGet\u2026\u201d messages    If any of input AJAX \u201cGet\u2026\u201d methods fail then   All \u201cfail\u201d events attached to the returned Promise, are triggered (in the order in which they were attached)   Each \u201cfail\u201d event is passed an array of error messages.   Even if some of the input AJAX \u201cGet\u2026\u201d events succeed, no \u201cresolve\u201d events are triggered.",
            "title": "MonitorAjaxCalls(ajaxCalls)"
        },
        {
            "location": "/p2p/addins/#handleerrorerrormessages",
            "text": "Will test for the presence of notification services and output formal error notifications if possible. Otherwise will issue alerts for each error message.",
            "title": "HandleError(errorMessages)"
        },
        {
            "location": "/p2p/addins/#xmlservices",
            "text": "Exposes a set of helper methods for working with document xml (i.e. xml with the \u201cgrs\u201d namespace). The following methods are available",
            "title": "XMLServices"
        },
        {
            "location": "/p2p/addins/#loaddomxml",
            "text": "Accepts an xml string and returns a jQuery DOM object",
            "title": "loadDOM(xml)"
        },
        {
            "location": "/p2p/addins/#getnodeparentnode-nodename",
            "text": "Accepts a parent node (or the DOM) and the name of an immediate child element.   Returns the child element   nodeName can be an array of element names. Where each name corresponds to an element that is a child of the previous name (element).",
            "title": "getNode(parentNode, nodeName)"
        },
        {
            "location": "/p2p/addins/#attrnode-attributename",
            "text": "Returns the given attribute of the given element.",
            "title": "attr(node, attributeName)"
        },
        {
            "location": "/p2p/addins/#getnodeattrparentnode-nodename-attributename",
            "text": "Finds the specified immediate child element of the parent node and returns the specified attribute value.",
            "title": "getNodeAttr(parentNode, nodeName, attributeName)"
        },
        {
            "location": "/p2p/addins/#filternodeattrparentnode-nodename-attributename-attributename",
            "text": "Finds the specified immediate child element of the parent node, which also has an attribute with the specified name and value.   Returns the text value of that child element.",
            "title": "filterNodeAttr(parentNode, nodeName, attributeName, attributeName)"
        },
        {
            "location": "/p2p/addins/#sample-add-in",
            "text": "There is a sample add-in and xml file available  here .  The sample is available from the multi-line orders page and shows how order information can be retrieved and displayed.",
            "title": "Sample Add-In"
        },
        {
            "location": "/p2p/genericimaging/",
            "text": "Generic Imaging DLL\n\n\nOverview\n\n\nThe PROACTIS P2P product has been designed so that it can be easily integrated with a number of different Document Management Systems (DMS).\n\n\nA typical PROACTIS imaging solution requires the following integration points:-\n\n\n\n\nThe scanned image needs to be associated with an invoice within PROACTIS.\n\n\nUsers need to be able to see the original scanned image by clicking a link within the PROACTIS web site.\n\n\n\n\nAlthough there are many different possible methods available (as different DMS and customers have different requirements) a generic imaging DLL has been written which meets the majority of customer\u2019s requirements.\nThis document describes how to install and configure this DLL.\n\n\n\n\nInstalling the Generic Imaging DLL\n\n\nWithin your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder create a file called \nPROACTIS.P2P.proGenericImaging.dll\n  This can be an empty text file.\n\n\n\n\nConfiguring the imaging DLL\n\n\nThe \u201cgeneric imaging\u201d DLL supports two different sources for viewing scanned images.  They can be displayed either from an existing image file on the filesystem, or from an external URL.  Different sources can be defined for different document types.  For example, expense claims might exist as .gif files in a file share, whilst scanned images might be held in a document management system accessed via a webpage.\nThe configuration for the generic imaging DLL is carried out via the \u201cImaging Settings\u201d snap in within the PROACTIS Management Console.\n\n\n\n\nExamples\n\n\nIn order to view an image via a URL held in an external DMS, the following settings would be required.\n\n\n\n\n\n\n\n\nSetting Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDefaultImageSource\n\n\nURL \u2013 the image is retrieved from the external system using an URL\n\n\n\n\n\n\nInvoiceImageIdentifier\n\n\nDisplayNumber \u2013 the PROACTIS invoice number is used to identify the image in the DMS.\n\n\n\n\n\n\nDefaultURL\n\n\nThe tag {{ImageID}} will be replaced with the value of the InvoiceImageIdentifier when access the DMS.\n\n\n\n\n\n\n\n\n\n\nAdditional Settings\n\n\nThe other available settings are detailed below:-\n\n\nThe image source\n\n\nThe image source specifies where the image will be found and should have the value of either URL or FILE.\n\n\nThe DLL first checks for the value of {doctype}ImageSource setting.  \n{doctype}\n is one of the following values depending on the type of document being viewed.\n\n\n\n\nInvoice\n\n\nCreditNote\n\n\nExpense\n\n\nAcceptance\n\n\n\n\nIf this setting does not exist, or is blank then the DLL checks for the value of DefaultImageSource\nIf no image source can be found for a document type or the value is not either FILE or URL, then the following error will be raised\n\u201cInvalid image source \u2013\u201c\n\n\nThe image identifier\n\n\nThe DLL then determines how to identify the image.   Images can be identified by their\n- ImageReference (Invoices and Credit Notes only)\n- HeaderReference\n- DisplayNumber\n\n\nThe \u201c{doctype}ImageIdentifier\u201d setting specifies which of these sources will be used for the {doctype} document type.  If the setting is not set for the current document type then the following defaults will be used\n- Invoices and Credit Notes -   ImageReference\n- Expenses and Acceptances  -   HeaderReference\n\n\nIf HeaderReference has been specified for the xxx document type, then the name of the reference field must also be set in either the\n- DefaultImageReference setting\n\nOr\n- {doctype}ImageReference setting.\n\n\nViewing Images from an URL\n\n\nIf the source type is determined to be a URL then the base URL is read from one of the following settings:\n- InvoiceURL\n- CreditNoteURL\n- ExpenseClaimURL\n- AcceptanceURL\n\n\nIf the setting is blank or does not exist, then the value of DefaultURL is used.\n\n\nOnce the URL has been determined, the image identifier is then appended to the end.  For example if the base URL is http://image-server.asp?ImageID=  and the ImageIdentifier is PINV1234 then the following URL will be used http://image-server.asp?ImageID=PINV1234\n\n\nIf the URL contains the markup tag {{ImageID}}  then instead of the ImageIdentifier being appended to the end of the URL it will replace the tag within the URL.\nFor example http://localhost/intranet/DMS/{{ImageID}}.bmp will become http://localhost/intranet/DMS/PINV1234.bmp\n\u2003\n\n\nViewing Images from a FILE\n\n\nIf the source type is determined to be a FILE then the image folder is read from one of the following settings\n- InvoiceFolder\n- CreditNoteFolder\n- ExpenseClaimFolder\n- AcceptanceFolder\nIf the setting is blank or does not exist, then the value of DefaultFolder is used.\n\n\nNext the mime type of the image file is resolved using the following settings\n- InvoiceMIMEType\n- CreditNoteMIMEType\n- ExpenseClaimMIMEType\n- AcceptanceMIMEType\n\n\nIf the setting is blank or does not exist, then the value of DefaultMIMEType is used.\nIf the value for the MIME type is still unknown then the DLL queries the registry for find the mime type registered for the file extensions.  This is held in HKEY_LOCAL_MACHINE\\Software\\Classes{fileext}\\Content Type where {fileext} is the file extension.\nIf a value still can\u2019t be found then it defaults to a mime type of application/octet-stream\nOnce the MIME type and Folder is known, the complete target filename is generated by appending the image identifier to the folder.  For example if the folder is c:\\Images and the ImageIdentifier is PINV1234.gif then the filename c:\\Images\\PINV1234.gif will be displayed.\n\n\n\n\nThe \u201cGeneric Imaging DLL\u201d - Processing\n\n\nDisplay of the Process Images Link\n\n\nTo determine if the \u201cProcess Images\u201d link should be displayed the following setting is queried\n- ProcessInvoice\n- ProcessCreditNote\n- ProcessExpenseClaim\n- ProcessAcceptance\n\n\nIf the setting is missing or blank then the ProcessDefault setting will be used.\nIf it has a value of ALWAYS then the link will always be displayed.  If the setting is NEVER then the link will always be hidden.  Otherwise the link will only be displayed if there are some images to process.\nThis allows the Process scanned image functionality so be available for some document types but not for others.\n\n\nListing Images From the Database\n\n\nIf the image source for the document type is URL (see above) then the list of available images is determined by querying the database.\nThe DLL then selects from the \u201cdsdba.view_cus_UnprocessedDocumentImages\u201d database view.  This view must be customised to select from your images database.\nEach of the columns returned by the view will then be displayed within a table on the website.\nOne of the columns must be designated as a key column,  this means that it uniquely identifies the image.\nThe key column is defined by the following setting\n- InvoiceProcessKey\n- CreditNoteProcessKey\n- ExpenseClaimProcessKey\n- AcceptanceProcessKey\n\n\nIf the setting is missing or blank then the ProcessKeyDefault setting will be used.\n\n\nListing Images From a folder\n\n\nIf the image source for the document type is FILE (see above) then the list of available images is determined by the files in an existing folder.\nThe folder is determined by the following setting\n- InvoiceProcessFolder\n- CreditNoteProcessFolder\n- ExpenseClaimProcessFolder\n- AcceptanceProcessFolder\n\n\nIf the setting is missing or blank then the ProcessFolderDefault setting will be used.\n\n\nThe system can be configured so that each user can have their own folder of images.  If the following setting is set to YES then the users loginID will be appended to the folder name\n- InvoicePostfixLogin\n- CreditNotePostfixLogin\n- ExpenseClaimNotePostfixLogin\n- AcceptancePostfixLogin\n\n\nIf the setting is missing or blank then the DefaultPostfixLogin setting will be used.\nFor example, if the folder is C:\\Images and the post fix login is YES and the username is DAVID then the folder c:\\Image\\David will be used.\n\n\n\n\nProcessing Database Images\n\n\nOnce an image held in the database has been processed then image identifier is then set against the document within PROACTIS.\n\n\nProcessing File Images\n\n\nOnce a file image has been processed then the file is moved into a processed folder.  The folder is determined from the following setting.\n- InvoiceProcessFolder\n- CreditNoteProcessFolder\n- ExpenseClaimProcessFolder\n- AcceptanceProcessFolder\n\n\nIf the setting is missing or blank then the DefaultProcessFolder setting will be used.\nThe file can also be renamed as it\u2019s moved when the following setting is set to YES\n- InvoiceFileRename\n- CreditNoteFileRename\n- AcceptanceFileRename\n- ExpenseClaimFileRename\n\n\nIf the setting is missing or blank then the DefaultFileRename setting will be used.\n\n\n\n\nSummary of Settings\n\n\n\n\n\n\n\n\nSetting Name\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nInvoiceImageSource\n\n\nFILE or URL\n\n\nThe source for viewing invoice files\n\n\n\n\n\n\nCreditNoteImageSource\n\n\nFILE or URL\n\n\nThe source for viewing credit note files\n\n\n\n\n\n\nAcceptanceImageSource\n\n\nFILE or URL\n\n\nThe source for viewing acceptance files\n\n\n\n\n\n\nExpenseImageSource\n\n\nFILE or URL\n\n\nThe source for viewing expense claim files\n\n\n\n\n\n\nDefaultImageSource\n\n\nFILE or URL\n\n\nSource used when the above setting is blank or missing\n\n\n\n\n\n\nExpenseClaimImageReference\n\n\nIMAGE\n\n\nThe code of the reference field on an expense claim which holds the identifier of the image.\n\n\n\n\n\n\nAcceptanceImageReference\n\n\nBARCODE\n\n\nThe code of the reference field on an acceptance document which holds the identifier of the image.\n\n\n\n\n\n\nDefaultImageReference\n\n\nID\n\n\nThe reference field used when the above settings are blank or missing\n\n\n\n\n\n\nInvoiceURL\n\n\nhttp://images?ID=\n\n\nThe prefix for the URL used for displaying invoices.\n\n\n\n\n\n\nCreditNoteURL\n\n\nhttps://images?Doc=\n\n\nThe prefix for the URL used for displaying credit notes.\n\n\n\n\n\n\nExpenseClaimURL\n\n\nhttp://127.0.0.1/?BarCode=\n\n\nThe prefix for the URL used for displaying expense claims.\n\n\n\n\n\n\nAcceptanceURL\n\n\nhttp://www.images.com?ID\n\n\nThe prefix for the URL used for displaying acceptance documents.\n\n\n\n\n\n\nDefaultURL\n\n\nhttp://img-server?type=PROACTIS&ID=\n\n\nThe URL used when the above settings are blank or missing\n\n\n\n\n\n\nInvoiceFolder\n\n\nC:\\Images\n\n\nThe folder containing the invoice images\n\n\n\n\n\n\nCreditNoteFolder\n\n\n\\file-server\\Images\n\n\nThe folder containing the credit note images\n\n\n\n\n\n\nExpenseClaimFolder\n\n\n\\127.0.0.1\\Images\n\n\nThe folder containing the expense claim images\n\n\n\n\n\n\nAcceptanceFolder\n\n\nC:\\Images\n\n\nThe folder containing the acceptance document images\n\n\n\n\n\n\nDefaultFolder\n\n\n\n\nThe Folder used when the above settings are blank or missing\n\n\n\n\n\n\n\n\n\n\nBeyond the Imaging DLL\n\n\nIf the \u201cGeneric Imaging DLL\u201d does not meet your requirements,  then a custom DLL can written which implements the \ngrsImageIface.IImaging\n and \ngrsImageIface.IProcess\n interfaces.  The application server can then be configured to call this DLL when a user wishes to \u201cprocess a new invoice\u201d or view an existing scanned image.\nThe development of a custom DLL is not described within this page.",
            "title": "Generic Imaging"
        },
        {
            "location": "/p2p/genericimaging/#generic-imaging-dll",
            "text": "",
            "title": "Generic Imaging DLL"
        },
        {
            "location": "/p2p/genericimaging/#overview",
            "text": "The PROACTIS P2P product has been designed so that it can be easily integrated with a number of different Document Management Systems (DMS).  A typical PROACTIS imaging solution requires the following integration points:-   The scanned image needs to be associated with an invoice within PROACTIS.  Users need to be able to see the original scanned image by clicking a link within the PROACTIS web site.   Although there are many different possible methods available (as different DMS and customers have different requirements) a generic imaging DLL has been written which meets the majority of customer\u2019s requirements.\nThis document describes how to install and configure this DLL.",
            "title": "Overview"
        },
        {
            "location": "/p2p/genericimaging/#installing-the-generic-imaging-dll",
            "text": "Within your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder create a file called  PROACTIS.P2P.proGenericImaging.dll   This can be an empty text file.",
            "title": "Installing the Generic Imaging DLL"
        },
        {
            "location": "/p2p/genericimaging/#configuring-the-imaging-dll",
            "text": "The \u201cgeneric imaging\u201d DLL supports two different sources for viewing scanned images.  They can be displayed either from an existing image file on the filesystem, or from an external URL.  Different sources can be defined for different document types.  For example, expense claims might exist as .gif files in a file share, whilst scanned images might be held in a document management system accessed via a webpage.\nThe configuration for the generic imaging DLL is carried out via the \u201cImaging Settings\u201d snap in within the PROACTIS Management Console.",
            "title": "Configuring the imaging DLL"
        },
        {
            "location": "/p2p/genericimaging/#examples",
            "text": "In order to view an image via a URL held in an external DMS, the following settings would be required.     Setting Name  Description      DefaultImageSource  URL \u2013 the image is retrieved from the external system using an URL    InvoiceImageIdentifier  DisplayNumber \u2013 the PROACTIS invoice number is used to identify the image in the DMS.    DefaultURL  The tag {{ImageID}} will be replaced with the value of the InvoiceImageIdentifier when access the DMS.",
            "title": "Examples"
        },
        {
            "location": "/p2p/genericimaging/#additional-settings",
            "text": "The other available settings are detailed below:-",
            "title": "Additional Settings"
        },
        {
            "location": "/p2p/genericimaging/#the-image-source",
            "text": "The image source specifies where the image will be found and should have the value of either URL or FILE.  The DLL first checks for the value of {doctype}ImageSource setting.   {doctype}  is one of the following values depending on the type of document being viewed.   Invoice  CreditNote  Expense  Acceptance   If this setting does not exist, or is blank then the DLL checks for the value of DefaultImageSource\nIf no image source can be found for a document type or the value is not either FILE or URL, then the following error will be raised\n\u201cInvalid image source \u2013\u201c",
            "title": "The image source"
        },
        {
            "location": "/p2p/genericimaging/#the-image-identifier",
            "text": "The DLL then determines how to identify the image.   Images can be identified by their\n- ImageReference (Invoices and Credit Notes only)\n- HeaderReference\n- DisplayNumber  The \u201c{doctype}ImageIdentifier\u201d setting specifies which of these sources will be used for the {doctype} document type.  If the setting is not set for the current document type then the following defaults will be used\n- Invoices and Credit Notes -   ImageReference\n- Expenses and Acceptances  -   HeaderReference  If HeaderReference has been specified for the xxx document type, then the name of the reference field must also be set in either the\n- DefaultImageReference setting \nOr\n- {doctype}ImageReference setting.",
            "title": "The image identifier"
        },
        {
            "location": "/p2p/genericimaging/#viewing-images-from-an-url",
            "text": "If the source type is determined to be a URL then the base URL is read from one of the following settings:\n- InvoiceURL\n- CreditNoteURL\n- ExpenseClaimURL\n- AcceptanceURL  If the setting is blank or does not exist, then the value of DefaultURL is used.  Once the URL has been determined, the image identifier is then appended to the end.  For example if the base URL is http://image-server.asp?ImageID=  and the ImageIdentifier is PINV1234 then the following URL will be used http://image-server.asp?ImageID=PINV1234  If the URL contains the markup tag {{ImageID}}  then instead of the ImageIdentifier being appended to the end of the URL it will replace the tag within the URL.\nFor example http://localhost/intranet/DMS/{{ImageID}}.bmp will become http://localhost/intranet/DMS/PINV1234.bmp",
            "title": "Viewing Images from an URL"
        },
        {
            "location": "/p2p/genericimaging/#viewing-images-from-a-file",
            "text": "If the source type is determined to be a FILE then the image folder is read from one of the following settings\n- InvoiceFolder\n- CreditNoteFolder\n- ExpenseClaimFolder\n- AcceptanceFolder\nIf the setting is blank or does not exist, then the value of DefaultFolder is used.  Next the mime type of the image file is resolved using the following settings\n- InvoiceMIMEType\n- CreditNoteMIMEType\n- ExpenseClaimMIMEType\n- AcceptanceMIMEType  If the setting is blank or does not exist, then the value of DefaultMIMEType is used.\nIf the value for the MIME type is still unknown then the DLL queries the registry for find the mime type registered for the file extensions.  This is held in HKEY_LOCAL_MACHINE\\Software\\Classes{fileext}\\Content Type where {fileext} is the file extension.\nIf a value still can\u2019t be found then it defaults to a mime type of application/octet-stream\nOnce the MIME type and Folder is known, the complete target filename is generated by appending the image identifier to the folder.  For example if the folder is c:\\Images and the ImageIdentifier is PINV1234.gif then the filename c:\\Images\\PINV1234.gif will be displayed.",
            "title": "Viewing Images from a FILE"
        },
        {
            "location": "/p2p/genericimaging/#the-generic-imaging-dll-processing",
            "text": "",
            "title": "The \u201cGeneric Imaging DLL\u201d - Processing"
        },
        {
            "location": "/p2p/genericimaging/#display-of-the-process-images-link",
            "text": "To determine if the \u201cProcess Images\u201d link should be displayed the following setting is queried\n- ProcessInvoice\n- ProcessCreditNote\n- ProcessExpenseClaim\n- ProcessAcceptance  If the setting is missing or blank then the ProcessDefault setting will be used.\nIf it has a value of ALWAYS then the link will always be displayed.  If the setting is NEVER then the link will always be hidden.  Otherwise the link will only be displayed if there are some images to process.\nThis allows the Process scanned image functionality so be available for some document types but not for others.",
            "title": "Display of the Process Images Link"
        },
        {
            "location": "/p2p/genericimaging/#listing-images-from-the-database",
            "text": "If the image source for the document type is URL (see above) then the list of available images is determined by querying the database.\nThe DLL then selects from the \u201cdsdba.view_cus_UnprocessedDocumentImages\u201d database view.  This view must be customised to select from your images database.\nEach of the columns returned by the view will then be displayed within a table on the website.\nOne of the columns must be designated as a key column,  this means that it uniquely identifies the image.\nThe key column is defined by the following setting\n- InvoiceProcessKey\n- CreditNoteProcessKey\n- ExpenseClaimProcessKey\n- AcceptanceProcessKey  If the setting is missing or blank then the ProcessKeyDefault setting will be used.",
            "title": "Listing Images From the Database"
        },
        {
            "location": "/p2p/genericimaging/#listing-images-from-a-folder",
            "text": "If the image source for the document type is FILE (see above) then the list of available images is determined by the files in an existing folder.\nThe folder is determined by the following setting\n- InvoiceProcessFolder\n- CreditNoteProcessFolder\n- ExpenseClaimProcessFolder\n- AcceptanceProcessFolder  If the setting is missing or blank then the ProcessFolderDefault setting will be used.  The system can be configured so that each user can have their own folder of images.  If the following setting is set to YES then the users loginID will be appended to the folder name\n- InvoicePostfixLogin\n- CreditNotePostfixLogin\n- ExpenseClaimNotePostfixLogin\n- AcceptancePostfixLogin  If the setting is missing or blank then the DefaultPostfixLogin setting will be used.\nFor example, if the folder is C:\\Images and the post fix login is YES and the username is DAVID then the folder c:\\Image\\David will be used.",
            "title": "Listing Images From a folder"
        },
        {
            "location": "/p2p/genericimaging/#processing-database-images",
            "text": "Once an image held in the database has been processed then image identifier is then set against the document within PROACTIS.",
            "title": "Processing Database Images"
        },
        {
            "location": "/p2p/genericimaging/#processing-file-images",
            "text": "Once a file image has been processed then the file is moved into a processed folder.  The folder is determined from the following setting.\n- InvoiceProcessFolder\n- CreditNoteProcessFolder\n- ExpenseClaimProcessFolder\n- AcceptanceProcessFolder  If the setting is missing or blank then the DefaultProcessFolder setting will be used.\nThe file can also be renamed as it\u2019s moved when the following setting is set to YES\n- InvoiceFileRename\n- CreditNoteFileRename\n- AcceptanceFileRename\n- ExpenseClaimFileRename  If the setting is missing or blank then the DefaultFileRename setting will be used.",
            "title": "Processing File Images"
        },
        {
            "location": "/p2p/genericimaging/#summary-of-settings",
            "text": "Setting Name  Example  Description      InvoiceImageSource  FILE or URL  The source for viewing invoice files    CreditNoteImageSource  FILE or URL  The source for viewing credit note files    AcceptanceImageSource  FILE or URL  The source for viewing acceptance files    ExpenseImageSource  FILE or URL  The source for viewing expense claim files    DefaultImageSource  FILE or URL  Source used when the above setting is blank or missing    ExpenseClaimImageReference  IMAGE  The code of the reference field on an expense claim which holds the identifier of the image.    AcceptanceImageReference  BARCODE  The code of the reference field on an acceptance document which holds the identifier of the image.    DefaultImageReference  ID  The reference field used when the above settings are blank or missing    InvoiceURL  http://images?ID=  The prefix for the URL used for displaying invoices.    CreditNoteURL  https://images?Doc=  The prefix for the URL used for displaying credit notes.    ExpenseClaimURL  http://127.0.0.1/?BarCode=  The prefix for the URL used for displaying expense claims.    AcceptanceURL  http://www.images.com?ID  The prefix for the URL used for displaying acceptance documents.    DefaultURL  http://img-server?type=PROACTIS&ID=  The URL used when the above settings are blank or missing    InvoiceFolder  C:\\Images  The folder containing the invoice images    CreditNoteFolder  \\file-server\\Images  The folder containing the credit note images    ExpenseClaimFolder  \\127.0.0.1\\Images  The folder containing the expense claim images    AcceptanceFolder  C:\\Images  The folder containing the acceptance document images    DefaultFolder   The Folder used when the above settings are blank or missing",
            "title": "Summary of Settings"
        },
        {
            "location": "/p2p/genericimaging/#beyond-the-imaging-dll",
            "text": "If the \u201cGeneric Imaging DLL\u201d does not meet your requirements,  then a custom DLL can written which implements the  grsImageIface.IImaging  and  grsImageIface.IProcess  interfaces.  The application server can then be configured to call this DLL when a user wishes to \u201cprocess a new invoice\u201d or view an existing scanned image.\nThe development of a custom DLL is not described within this page.",
            "title": "Beyond the Imaging DLL"
        },
        {
            "location": "/p2p/customimaging/",
            "text": "Custom Imaging DLLs\n\n\nOverview\n\n\nThe PROACTIS P2P product has been designed so that it can be easily integrated with a number of different Document Management Systems (DMS).\n\n\nA typical PROACTIS imaging solution requires the following integration points:-\n\n\n\n\nThe scanned image needs to be associated with an invoice within PROACTIS.\n\n\nUsers need to be able to see the original scanned image by clicking a link within the PROACTIS web site.\n\n\n\n\nAlthough there are many different possible methods available (as different DMS and customers have different requirements) a generic imaging DLL has been written which meets the majority of customer\u2019s requirements.\n\n\nFor the cases where neither the built-in PROACTIS imaging solution or the Generic Imaging DLLs meet your requirements a completely custom DLL can be written.\n\n\n\n\nViewing Images\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzImaging. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsImagingIface.dll\n\n\n\n\n\n\nAdd a public class called \nImaging\n which implements the \ngrsImageIface.IImaging\n interface.\n\n\n\n\n\n\nWrite an implementation of the following methods.\n\n\n\n\nGetImage\n\n\nGetImageInfo\n\n\nHasImage\n\n\n\n\n\n\n\n\n\n\nHasImage\n\n\nControls if the View Image link is available when looking at a transaction within P2P\n\n\nbool IImaging.HasImage(string DocumentDetailsXML)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDocumentDetailsXML\n\n\nIn\n\n\nAn xml document containing the details of the document currently being displayed.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return True if an image is available.\n\n\n\n\nGetImageInfo\n\n\nReturns basic information (MimeType and NumberOfPages) for an image held against a document.\n\n\nint IImaging.GetImageInfo(string DocumentDetailsXML, out string MIMEType)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDocumentDetailsXML\n\n\nIn\n\n\nAn xml document containing the details of the document currently being displayed.\n\n\n\n\n\n\nMIMEType\n\n\nOut\n\n\nMime type of the document\n\n\n\n\n\n\n\n\nMIMEType\n\n\nThis should be set to the MIME type of the image.    If image will be display via an URL to another system this must be set to text/url.\n\n\nReturn Value\n\n\nThe function should return the name of pages within the document.  Normally 1\n\n\n\n\nGetImage\n\n\nUsed to return either the bytes which make up the image of the URL for the image if it's in a DMS.\n\n\nbool IImaging.GetImage(string DocumentDetailsXML, out string MIMEType, out byte[] Image, out string URL)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDocumentDetailsXML\n\n\nIn\n\n\nAn xml document containing the details of the document currently being displayed.\n\n\n\n\n\n\nMIMEType\n\n\nOut\n\n\nThe type of image\n\n\n\n\n\n\nImage\n\n\nOut\n\n\nByte[] containing the image\n\n\n\n\n\n\nURL\n\n\nOut\n\n\nURL to the image\n\n\n\n\n\n\n\n\nMIMEType\n\n\nThis should be set to the MIME type of the image.    If image will be display via an URL to another system this must be set to text/url.\n\n\nImage\n\n\nThe image file as an array of bytes.  This will be steamed to the client's browser\n\n\nURL\n\n\nThe URL of image in a DMS.\n\n\n\n\nNotes\n\n\nEither the Image \nor\n URL argument should be used.\n\n\n\n\n\n\nDocumentDetailsXML\n\n\nThe xml in the DocumentDetailsXML argument is made up from some context specific details based on the document being display and the settings you have defined in the imaging settings table.\n\n\n<?xml version='1.0'?><grs:ImagingSettings xmlns:grs='http://www.getrealsystems.com/xml/xml-ns'>\n<grs:SessionID>eb89c444-0270-4f06-b8b6-ec0303b00117#dbserver2008r2\\qa#DavidB_94#en-gb</grs:SessionID>\n<grs:DocumentType>I</grs:DocumentType>\n<grs:DocumentGUID>{D79D1EE8-4B87-414B-8512-92590DFBE2E8}</grs:DocumentGUID>\n<grs:ImageNumber>0</grs:ImageNumber>\n<grs:CompanyGUID>{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}</grs:CompanyGUID>\n\n<grs:InvoiceImageIdentifier>DisplayNumber</grs:InvoiceImageIdentifier>\n<grs:DefaultImageSource>URL</grs:DefaultImageSource>\n<grs:DefaultURL>https://sp-db01/imaging/{{ImageID}}.bmp</grs:DefaultURL></grs:ImagingSettings>\n\n\n\n\nThe standard fields which are always supplied as:-\n\n\n\n\nSessionID - in the format {uniqueID} # {database server} # {database name} # {user's language}\n\n\nDocumentType - 'I' for Invoice,  'C' for Credit note',  'E' for Expense Claim and 'A' For Acceptance \n\n\nDocumentGUID - GUID to identify the document being displayed\n\n\nImageNumber\n\n\nCompanyGUID - GUID of the company in which the document belongs\n\n\n\n\nIn the above example the remaining fields (below) are from the \nDSDBA.ImagingSettings\n table.\n\n\n\n\nInvoiceImageIdentifier\n\n\nDefaultImageSource\n\n\nDefaultURL\n\n\n\n\n\n\nProcessing Images\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzImaging. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsImagingIface.dll\n\n\n\n\n\n\nAdd a public class called \nProcess\n which implements the \nP2P.grsImageIface.IProcess\n interface.\n\n\n\n\n\n\nWrite an implementation of the following methods.\n\n\n\n\nGetImage\n\n\nGetImageInfo\n\n\nGetListOfUnprocessedImages\n\n\nHasUnprocessedImages\n\n\nProcessImage\n\n\n\n\n\n\n\n\n\n\nHasUnprocessedImages\n\n\nControls if the \"Process An Image\" link is available from Invoicing home page.\n\n\nbool IProcess.HasUnprocessedImages(string DetailsXML)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDetailsXML\n\n\nIn\n\n\nAn xml document containing the details of the document type, database and company\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return True if one or more images are available for linking to invoices.\n\n\n\n\nGetListOfUnprocessedImages\n\n\nReturns an XML table showing the list of invoices available for linking\n\n\nstring IProcess.GetListOfUnprocessedImages(string DetailsXML)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDetailsXML\n\n\nIn\n\n\nAn xml document containing the details of the document type, database and company\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return XML in the following format\n\n\n<?xml version='1.0'?>\n<grs:Images xmlns:grs='http://www.getrealsystems.com/xml/xml-ns'>\n    <grs:Image grs:Identifier='PINV123.xml'>\n        <grs:Fields>\n            <grs:Field grs:Name='Column1' grs:Value='Value in column 1' />\n            <grs:Field grs:Name='Column2' grs:Value='Value in column 2' />\n        </grs:Fields>\n    </grs:Image>\n</grs:Images>\n\n\n\n\nThe above table would generate the following table:\n\n\n\n\n\n\nThere should be one grs:Image element for each scanned image.\n\n\nThe grs:Identifier attribute uniquely identifies the image\n\n\nEach column required in the table should be added as a grs:Field element\n\n\ngrs:Name provides the caption for the column and grs:Value it's contents.\n\n\n\n\n\n\nGetImageInfo\n\n\nReturns basic information (MimeType and NumberOfPages) for an image held against a document.\n\n\nint IProcess.GetImageInfo(string DetailsXML, out string MIMEType)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDetailsXML\n\n\nIn\n\n\nAn xml document containing the details of the document currently being displayed.\n\n\n\n\n\n\nMIMEType\n\n\nOut\n\n\nMime type of the document\n\n\n\n\n\n\n\n\nMIMEType\n\n\nThis should be set to the MIME type of the image.    If image will be display via an URL to another system this must be set to text/url.\n\n\nReturn Value\n\n\nThe function should return the name of pages within the document.  Normally 1\n\n\n\n\nGetImage\n\n\nUsed to return either the bytes which make up the image of the URL for the image if it's in a DMS.\n\n\nbool IProcess.GetImage(string DetailsXML, out string MIMEType, out byte[] Image, out string URL)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDetailsXML\n\n\nIn\n\n\nAn xml document containing the details of the document currently being displayed.\n\n\n\n\n\n\nMIMEType\n\n\nOut\n\n\nThe type of image\n\n\n\n\n\n\nImage\n\n\nOut\n\n\nByte[] containing the image\n\n\n\n\n\n\nURL\n\n\nOut\n\n\nURL to the image\n\n\n\n\n\n\n\n\nMIMEType\n\n\nThis should be set to the MIME type of the image.    If image will be display via an URL to another system this must be set to text/url.\n\n\nImage\n\n\nThe image file as an array of bytes.  This will be steamed to the client's browser\n\n\nURL\n\n\nThe URL of image in a DMS.\n\n\n\n\nNotes\n\n\nEither the Image \nor\n URL argument should be used.\n\n\n\n\n\n\nProcessImage\n\n\nUsed to associate the image with a document.\n\n\nbool IProcess.ProcessImage(string DetailsXML, string DocumentXML, out string UserMessages)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDetailsXML\n\n\nIn\n\n\nAn xml document containing the details of the document currently being displayed.\n\n\n\n\n\n\nDocumentXML\n\n\nIn\n\n\nThe full P2P document which is being linked to the image\n\n\n\n\n\n\nUserMessages\n\n\nOut\n\n\nMessages to feed back to the user\n\n\n\n\n\n\n\n\nDetailsXML\n\n\nThe DocumentGUID will contain the unique identifier for the selected image.\n\n\nDocumentXML\n\n\nThe full internal XML for the document this image is being linked with.  The format varies depending on the type of document.\n\n\n\n\nWarning\n\n\nAs the internal xml format us undocumented and subject to change it is recommended that you extract as little information as possible and program defensively.\n\n\n\n\nUserMessages\n\n\nAllows user message to be returned to the PROACTIS website.  Not normally required.\n\n\n\n\nNotes\n\n\nThis method is responsible for storing the link between the scanned image and the P2P document.  For example the unique ID might be written to the \nImageReference\n column in the \ndsdba.Invoices\n table.\n\n\n\n\n\n\nDetailsXML\n\n\nThe xml in the DetailsXML argument is made up from some context specific details based on the document being display and the settings you have defined in the imaging settings table.\n\n\n<?xml version=\"1.0\"?>\n<grs:ImagingSettings xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:SessionID>789e432f-6515-435c-8748-d88665d57119#dbserver2008r2\\qa#DavidB_94#en-gb</grs:SessionID>\n<grs:DocumentType>C</grs:DocumentType>\n<grs:DocumentGUID></grs:DocumentGUID>\n<grs:ImageNumber>0</grs:ImageNumber>\n<grs:CompanyGUID>{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}</grs:CompanyGUID>\n\n<grs:InvoiceImageIdentifier>DisplayNumber</grs:InvoiceImageIdentifier>\n<grs:DefaultImageSource>URL</grs:DefaultImageSource>\n<grs:DefaultURL>https://sp-db01/imaging/{{ImageID}}.bmp</grs:DefaultURL>\n</grs:ImagingSettings>\n\n\n\n\nThe standard fields which are always supplied as:-\n\n\n\n\nSessionID - in the format {uniqueID} # {database server} # {database name} # {user's language}\n\n\nDocumentType - 'I' for Invoice,  'C' for Credit note',  'E' for Expense Claim and 'A' For Acceptance \n\n\nDocumentGUID - GUID to identify the document being displayed\n\n\nImageNumber\n\n\nCompanyGUID - GUID of the company in which the document belongs\n\n\n\n\nIn the above example the remaining fields (below) are from the \nDSDBA.ImagingSettings\n table.\n\n\n\n\nInvoiceImageIdentifier\n\n\nDefaultImageSource\n\n\nDefaultURL\n\n\n\n\n\n\nSearching for unprocessed images\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzImaging. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsImagingIface.dll\n\n\n\n\n\n\nAdd a public class called \nSearch\n which implements the \ngrsImageIface.ISearch\n interface.\n\n\n\n\n\n\nWrite an implementation of the following methods.\n\n\n\n\nSearchForUnprocessedImages\n\n\n\n\n\n\n\n\n\n\nSearchForUnprocessedImages\n\n\nReturns a list of unprocessed images based on the search criteria entered by the user.\n\n\n\n\nSignature\n\n\nstring ISearch.SearchForUnprocessedImages(string DetailsXML)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDetailsXML\n\n\nIn\n\n\nAn xml document containing the search criteria .\n\n\n\n\n\n\n\n\nDetailsXML\n\n\n<?xml version=\"1.0\"?>\n<grs:ImagingSettings xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n    <grs:SessionID>fd2ae334-dd29-42d3-9706-ea4883b7bedc#dbserver2008r2\\qa#DavidB_94#en-gb</grs:SessionID>\n    <grs:DocumentType>I</grs:DocumentType>\n    <grs:DocumentGUID></grs:DocumentGUID>\n    <grs:ImageNumber>0</grs:ImageNumber>\n    <grs:CompanyGUID>{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}</grs:CompanyGUID>\n    <grs:MaxReturnRows>100</grs:MaxReturnRows>\n    <grs:PrimarySortColumn>DocumentDate</grs:PrimarySortColumn>\n    <grs:PrimarySortAscending>False</grs:PrimarySortAscending>\n    <grs:SupplierReference></grs:SupplierReference>\n    <grs:DateFrom></grs:DateFrom>\n    <grs:DateTo></grs:DateTo>\n    <grs:FromAddress></grs:FromAddress>\n    <grs:ToAddress></grs:ToAddress>\n    <grs:Subject></grs:Subject>\n    <grs:RuleName></grs:RuleName>\n    <grs:DateEmailedFrom></grs:DateEmailedFrom>\n    <grs:DateEmailedTo></grs:DateEmailedTo>\n\n    <grs:DefaultImageSource>URL</grs:DefaultImageSource>\n    <grs:DefaultURL>https://sp-db01/imaging/{{ImageID}}.bmp</grs:DefaultURL>\n</grs:ImagingSettings>\n\n\n\n\nThe following fields can be ignored as they aren't applicable to this function\n\n\n\n\nDocumentGUID\n\n\nImageNumber\n\n\n\n\nIn the above example the following fields come from the \ndsdba.ImagingSettings\n table\n\n\n\n\nInvoiceImageIdentifier\n\n\nDefaultImageSource\n\n\nDefaultURL\n\n\n\n\nReturn Value\n\n\nThe function should return xml table in the following format containing the list of available (unprocessed) images.\n\n\n<SearchResults>\n    <Row GUID='...' \n        SupplierReference='sup' \n        DocumentDate='2016-1-1' \n        DocumentImportRule = ''\n        EmailDate='2016-1-1'\n        FromAddress='david@proactis.com'\n        FromName='David Betteridge'\n        Subject='An Email'\n        ToAddress='david@proactis.com' />\n</SearchResults>\n\n\n\n\n\n\nOne row should be added for each unprocessed image\n\n\nAll the attributes listed above must be supplied\n\n\n\n\n\n\n\n\nUploading Images\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzImaging. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsImagingIface.dll\n\n\n\n\n\n\nAdd a public class called \nUpload\n which implements the __grsImageIface.IUpload interface.\n\n\n\n\n\n\nWrite an implementation of the following methods.\n\n\n\n\nStoreNewImage\n\n\n\n\n\n\n\n\n\n\nStoreNewImage\n\n\nStores an image uploaded by the user on the server\n\n\n\n\nSignature\n\n\nbool IUpload.StoreNewImage(string DetailsXML, byte[] FileContents)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDetailsXML\n\n\nIn\n\n\nAn xml document containing the image metadata.\n\n\n\n\n\n\nFileContents\n\n\nIn\n\n\nContents of the image\n\n\n\n\n\n\n\n\nDetailsXML\n\n\n<?xml version=\"1.0\"?>\n<grs:ImagingSettings xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n    <grs:DocumentGUID>{7451C54A-52F0-4794-87FB-A6093AAD65AF}</grs:DocumentGUID>\n    <grs:ImageNumber>1</grs:ImageNumber>\n\n    <grs:SessionID>bd860b98-c82b-47fa-9522-a4f27f154cd6#dbserver2008r2\\qa#DavidB_94#en-gb</grs:SessionID>\n    <grs:DocumentType>I</grs:DocumentType>\n    <grs:CompanyGUID>{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}</grs:CompanyGUID>\n    <grs:Reference>heading.JPG</grs:Reference>\n    <grs:FileType>JPG</grs:FileType>\n\n    <grs:InvoiceImageIdentifier>DisplayNumber</grs:InvoiceImageIdentifier>\n    <grs:DefaultImageSource>URL</grs:DefaultImageSource>\n    <grs:DefaultURL>https://sp-db01/imaging/{{ImageID}}.bmp</grs:DefaultURL>\n</grs:ImagingSettings>\n\n\n\n\n\n\nThe DocumentGUID is a unique ID generated for this file\n\n\nImageNumber will always be 1\n\n\nReference is the name of the uploaded file\n\n\nDocumentType is I for Invoice and C for Credit Note\n\n\n\n\nIn the above example the following fields come from the \ndsdba.ImagingSettings\n table\n\n\n\n\nInvoiceImageIdentifier\n\n\nDefaultImageSource\n\n\nDefaultURL\n\n\n\n\nReturn Value\n\n\nReturn TRUE for success\n\n\n\n\nExample\n\n\nSee the \nexample application\n for a complete implementation.\n\n\n\n\nDeployment\n\n\nYour dll should be complied (and named xyzImaging.dll) and then copied into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.",
            "title": "Custom Imaging"
        },
        {
            "location": "/p2p/customimaging/#custom-imaging-dlls",
            "text": "",
            "title": "Custom Imaging DLLs"
        },
        {
            "location": "/p2p/customimaging/#overview",
            "text": "The PROACTIS P2P product has been designed so that it can be easily integrated with a number of different Document Management Systems (DMS).  A typical PROACTIS imaging solution requires the following integration points:-   The scanned image needs to be associated with an invoice within PROACTIS.  Users need to be able to see the original scanned image by clicking a link within the PROACTIS web site.   Although there are many different possible methods available (as different DMS and customers have different requirements) a generic imaging DLL has been written which meets the majority of customer\u2019s requirements.  For the cases where neither the built-in PROACTIS imaging solution or the Generic Imaging DLLs meet your requirements a completely custom DLL can be written.",
            "title": "Overview"
        },
        {
            "location": "/p2p/customimaging/#viewing-images",
            "text": "Create a new C# Class Library project called xyzImaging. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsImagingIface.dll    Add a public class called  Imaging  which implements the  grsImageIface.IImaging  interface.    Write an implementation of the following methods.   GetImage  GetImageInfo  HasImage",
            "title": "Viewing Images"
        },
        {
            "location": "/p2p/customimaging/#hasimage",
            "text": "Controls if the View Image link is available when looking at a transaction within P2P  bool IImaging.HasImage(string DocumentDetailsXML)",
            "title": "HasImage"
        },
        {
            "location": "/p2p/customimaging/#arguments",
            "text": "Argument  Direction  Description      DocumentDetailsXML  In  An xml document containing the details of the document currently being displayed.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#return-value",
            "text": "The function should return True if an image is available.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/customimaging/#getimageinfo",
            "text": "Returns basic information (MimeType and NumberOfPages) for an image held against a document.  int IImaging.GetImageInfo(string DocumentDetailsXML, out string MIMEType)",
            "title": "GetImageInfo"
        },
        {
            "location": "/p2p/customimaging/#arguments_1",
            "text": "Argument  Direction  Description      DocumentDetailsXML  In  An xml document containing the details of the document currently being displayed.    MIMEType  Out  Mime type of the document",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#mimetype",
            "text": "This should be set to the MIME type of the image.    If image will be display via an URL to another system this must be set to text/url.",
            "title": "MIMEType"
        },
        {
            "location": "/p2p/customimaging/#return-value_1",
            "text": "The function should return the name of pages within the document.  Normally 1",
            "title": "Return Value"
        },
        {
            "location": "/p2p/customimaging/#getimage",
            "text": "Used to return either the bytes which make up the image of the URL for the image if it's in a DMS.  bool IImaging.GetImage(string DocumentDetailsXML, out string MIMEType, out byte[] Image, out string URL)",
            "title": "GetImage"
        },
        {
            "location": "/p2p/customimaging/#arguments_2",
            "text": "Argument  Direction  Description      DocumentDetailsXML  In  An xml document containing the details of the document currently being displayed.    MIMEType  Out  The type of image    Image  Out  Byte[] containing the image    URL  Out  URL to the image",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#mimetype_1",
            "text": "This should be set to the MIME type of the image.    If image will be display via an URL to another system this must be set to text/url.",
            "title": "MIMEType"
        },
        {
            "location": "/p2p/customimaging/#image",
            "text": "The image file as an array of bytes.  This will be steamed to the client's browser",
            "title": "Image"
        },
        {
            "location": "/p2p/customimaging/#url",
            "text": "The URL of image in a DMS.   Notes  Either the Image  or  URL argument should be used.",
            "title": "URL"
        },
        {
            "location": "/p2p/customimaging/#documentdetailsxml",
            "text": "The xml in the DocumentDetailsXML argument is made up from some context specific details based on the document being display and the settings you have defined in the imaging settings table.  <?xml version='1.0'?><grs:ImagingSettings xmlns:grs='http://www.getrealsystems.com/xml/xml-ns'>\n<grs:SessionID>eb89c444-0270-4f06-b8b6-ec0303b00117#dbserver2008r2\\qa#DavidB_94#en-gb</grs:SessionID>\n<grs:DocumentType>I</grs:DocumentType>\n<grs:DocumentGUID>{D79D1EE8-4B87-414B-8512-92590DFBE2E8}</grs:DocumentGUID>\n<grs:ImageNumber>0</grs:ImageNumber>\n<grs:CompanyGUID>{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}</grs:CompanyGUID>\n\n<grs:InvoiceImageIdentifier>DisplayNumber</grs:InvoiceImageIdentifier>\n<grs:DefaultImageSource>URL</grs:DefaultImageSource>\n<grs:DefaultURL>https://sp-db01/imaging/{{ImageID}}.bmp</grs:DefaultURL></grs:ImagingSettings>  The standard fields which are always supplied as:-   SessionID - in the format {uniqueID} # {database server} # {database name} # {user's language}  DocumentType - 'I' for Invoice,  'C' for Credit note',  'E' for Expense Claim and 'A' For Acceptance   DocumentGUID - GUID to identify the document being displayed  ImageNumber  CompanyGUID - GUID of the company in which the document belongs   In the above example the remaining fields (below) are from the  DSDBA.ImagingSettings  table.   InvoiceImageIdentifier  DefaultImageSource  DefaultURL",
            "title": "DocumentDetailsXML"
        },
        {
            "location": "/p2p/customimaging/#processing-images",
            "text": "Create a new C# Class Library project called xyzImaging. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsImagingIface.dll    Add a public class called  Process  which implements the  P2P.grsImageIface.IProcess  interface.    Write an implementation of the following methods.   GetImage  GetImageInfo  GetListOfUnprocessedImages  HasUnprocessedImages  ProcessImage",
            "title": "Processing Images"
        },
        {
            "location": "/p2p/customimaging/#hasunprocessedimages",
            "text": "Controls if the \"Process An Image\" link is available from Invoicing home page.  bool IProcess.HasUnprocessedImages(string DetailsXML)",
            "title": "HasUnprocessedImages"
        },
        {
            "location": "/p2p/customimaging/#arguments_3",
            "text": "Argument  Direction  Description      DetailsXML  In  An xml document containing the details of the document type, database and company",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#return-value_2",
            "text": "The function should return True if one or more images are available for linking to invoices.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/customimaging/#getlistofunprocessedimages",
            "text": "Returns an XML table showing the list of invoices available for linking  string IProcess.GetListOfUnprocessedImages(string DetailsXML)",
            "title": "GetListOfUnprocessedImages"
        },
        {
            "location": "/p2p/customimaging/#arguments_4",
            "text": "Argument  Direction  Description      DetailsXML  In  An xml document containing the details of the document type, database and company",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#return-value_3",
            "text": "The function should return XML in the following format  <?xml version='1.0'?>\n<grs:Images xmlns:grs='http://www.getrealsystems.com/xml/xml-ns'>\n    <grs:Image grs:Identifier='PINV123.xml'>\n        <grs:Fields>\n            <grs:Field grs:Name='Column1' grs:Value='Value in column 1' />\n            <grs:Field grs:Name='Column2' grs:Value='Value in column 2' />\n        </grs:Fields>\n    </grs:Image>\n</grs:Images>  The above table would generate the following table:    There should be one grs:Image element for each scanned image.  The grs:Identifier attribute uniquely identifies the image  Each column required in the table should be added as a grs:Field element  grs:Name provides the caption for the column and grs:Value it's contents.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/customimaging/#getimageinfo_1",
            "text": "Returns basic information (MimeType and NumberOfPages) for an image held against a document.  int IProcess.GetImageInfo(string DetailsXML, out string MIMEType)",
            "title": "GetImageInfo"
        },
        {
            "location": "/p2p/customimaging/#arguments_5",
            "text": "Argument  Direction  Description      DetailsXML  In  An xml document containing the details of the document currently being displayed.    MIMEType  Out  Mime type of the document",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#mimetype_2",
            "text": "This should be set to the MIME type of the image.    If image will be display via an URL to another system this must be set to text/url.",
            "title": "MIMEType"
        },
        {
            "location": "/p2p/customimaging/#return-value_4",
            "text": "The function should return the name of pages within the document.  Normally 1",
            "title": "Return Value"
        },
        {
            "location": "/p2p/customimaging/#getimage_1",
            "text": "Used to return either the bytes which make up the image of the URL for the image if it's in a DMS.  bool IProcess.GetImage(string DetailsXML, out string MIMEType, out byte[] Image, out string URL)",
            "title": "GetImage"
        },
        {
            "location": "/p2p/customimaging/#arguments_6",
            "text": "Argument  Direction  Description      DetailsXML  In  An xml document containing the details of the document currently being displayed.    MIMEType  Out  The type of image    Image  Out  Byte[] containing the image    URL  Out  URL to the image",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#mimetype_3",
            "text": "This should be set to the MIME type of the image.    If image will be display via an URL to another system this must be set to text/url.",
            "title": "MIMEType"
        },
        {
            "location": "/p2p/customimaging/#image_1",
            "text": "The image file as an array of bytes.  This will be steamed to the client's browser",
            "title": "Image"
        },
        {
            "location": "/p2p/customimaging/#url_1",
            "text": "The URL of image in a DMS.   Notes  Either the Image  or  URL argument should be used.",
            "title": "URL"
        },
        {
            "location": "/p2p/customimaging/#processimage",
            "text": "Used to associate the image with a document.  bool IProcess.ProcessImage(string DetailsXML, string DocumentXML, out string UserMessages)",
            "title": "ProcessImage"
        },
        {
            "location": "/p2p/customimaging/#arguments_7",
            "text": "Argument  Direction  Description      DetailsXML  In  An xml document containing the details of the document currently being displayed.    DocumentXML  In  The full P2P document which is being linked to the image    UserMessages  Out  Messages to feed back to the user",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#detailsxml",
            "text": "The DocumentGUID will contain the unique identifier for the selected image.",
            "title": "DetailsXML"
        },
        {
            "location": "/p2p/customimaging/#documentxml",
            "text": "The full internal XML for the document this image is being linked with.  The format varies depending on the type of document.   Warning  As the internal xml format us undocumented and subject to change it is recommended that you extract as little information as possible and program defensively.",
            "title": "DocumentXML"
        },
        {
            "location": "/p2p/customimaging/#usermessages",
            "text": "Allows user message to be returned to the PROACTIS website.  Not normally required.   Notes  This method is responsible for storing the link between the scanned image and the P2P document.  For example the unique ID might be written to the  ImageReference  column in the  dsdba.Invoices  table.",
            "title": "UserMessages"
        },
        {
            "location": "/p2p/customimaging/#detailsxml_1",
            "text": "The xml in the DetailsXML argument is made up from some context specific details based on the document being display and the settings you have defined in the imaging settings table.  <?xml version=\"1.0\"?>\n<grs:ImagingSettings xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n<grs:SessionID>789e432f-6515-435c-8748-d88665d57119#dbserver2008r2\\qa#DavidB_94#en-gb</grs:SessionID>\n<grs:DocumentType>C</grs:DocumentType>\n<grs:DocumentGUID></grs:DocumentGUID>\n<grs:ImageNumber>0</grs:ImageNumber>\n<grs:CompanyGUID>{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}</grs:CompanyGUID>\n\n<grs:InvoiceImageIdentifier>DisplayNumber</grs:InvoiceImageIdentifier>\n<grs:DefaultImageSource>URL</grs:DefaultImageSource>\n<grs:DefaultURL>https://sp-db01/imaging/{{ImageID}}.bmp</grs:DefaultURL>\n</grs:ImagingSettings>  The standard fields which are always supplied as:-   SessionID - in the format {uniqueID} # {database server} # {database name} # {user's language}  DocumentType - 'I' for Invoice,  'C' for Credit note',  'E' for Expense Claim and 'A' For Acceptance   DocumentGUID - GUID to identify the document being displayed  ImageNumber  CompanyGUID - GUID of the company in which the document belongs   In the above example the remaining fields (below) are from the  DSDBA.ImagingSettings  table.   InvoiceImageIdentifier  DefaultImageSource  DefaultURL",
            "title": "DetailsXML"
        },
        {
            "location": "/p2p/customimaging/#searching-for-unprocessed-images",
            "text": "Create a new C# Class Library project called xyzImaging. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsImagingIface.dll    Add a public class called  Search  which implements the  grsImageIface.ISearch  interface.    Write an implementation of the following methods.   SearchForUnprocessedImages",
            "title": "Searching for unprocessed images"
        },
        {
            "location": "/p2p/customimaging/#searchforunprocessedimages",
            "text": "Returns a list of unprocessed images based on the search criteria entered by the user.",
            "title": "SearchForUnprocessedImages"
        },
        {
            "location": "/p2p/customimaging/#signature",
            "text": "string ISearch.SearchForUnprocessedImages(string DetailsXML)",
            "title": "Signature"
        },
        {
            "location": "/p2p/customimaging/#arguments_8",
            "text": "Argument  Direction  Description      DetailsXML  In  An xml document containing the search criteria .",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#detailsxml_2",
            "text": "<?xml version=\"1.0\"?>\n<grs:ImagingSettings xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n    <grs:SessionID>fd2ae334-dd29-42d3-9706-ea4883b7bedc#dbserver2008r2\\qa#DavidB_94#en-gb</grs:SessionID>\n    <grs:DocumentType>I</grs:DocumentType>\n    <grs:DocumentGUID></grs:DocumentGUID>\n    <grs:ImageNumber>0</grs:ImageNumber>\n    <grs:CompanyGUID>{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}</grs:CompanyGUID>\n    <grs:MaxReturnRows>100</grs:MaxReturnRows>\n    <grs:PrimarySortColumn>DocumentDate</grs:PrimarySortColumn>\n    <grs:PrimarySortAscending>False</grs:PrimarySortAscending>\n    <grs:SupplierReference></grs:SupplierReference>\n    <grs:DateFrom></grs:DateFrom>\n    <grs:DateTo></grs:DateTo>\n    <grs:FromAddress></grs:FromAddress>\n    <grs:ToAddress></grs:ToAddress>\n    <grs:Subject></grs:Subject>\n    <grs:RuleName></grs:RuleName>\n    <grs:DateEmailedFrom></grs:DateEmailedFrom>\n    <grs:DateEmailedTo></grs:DateEmailedTo>\n\n    <grs:DefaultImageSource>URL</grs:DefaultImageSource>\n    <grs:DefaultURL>https://sp-db01/imaging/{{ImageID}}.bmp</grs:DefaultURL>\n</grs:ImagingSettings>  The following fields can be ignored as they aren't applicable to this function   DocumentGUID  ImageNumber   In the above example the following fields come from the  dsdba.ImagingSettings  table   InvoiceImageIdentifier  DefaultImageSource  DefaultURL",
            "title": "DetailsXML"
        },
        {
            "location": "/p2p/customimaging/#return-value_5",
            "text": "The function should return xml table in the following format containing the list of available (unprocessed) images.  <SearchResults>\n    <Row GUID='...' \n        SupplierReference='sup' \n        DocumentDate='2016-1-1' \n        DocumentImportRule = ''\n        EmailDate='2016-1-1'\n        FromAddress='david@proactis.com'\n        FromName='David Betteridge'\n        Subject='An Email'\n        ToAddress='david@proactis.com' />\n</SearchResults>   One row should be added for each unprocessed image  All the attributes listed above must be supplied",
            "title": "Return Value"
        },
        {
            "location": "/p2p/customimaging/#uploading-images",
            "text": "Create a new C# Class Library project called xyzImaging. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsImagingIface.dll    Add a public class called  Upload  which implements the __grsImageIface.IUpload interface.    Write an implementation of the following methods.   StoreNewImage",
            "title": "Uploading Images"
        },
        {
            "location": "/p2p/customimaging/#storenewimage",
            "text": "Stores an image uploaded by the user on the server",
            "title": "StoreNewImage"
        },
        {
            "location": "/p2p/customimaging/#signature_1",
            "text": "bool IUpload.StoreNewImage(string DetailsXML, byte[] FileContents)",
            "title": "Signature"
        },
        {
            "location": "/p2p/customimaging/#arguments_9",
            "text": "Argument  Direction  Description      DetailsXML  In  An xml document containing the image metadata.    FileContents  In  Contents of the image",
            "title": "Arguments"
        },
        {
            "location": "/p2p/customimaging/#detailsxml_3",
            "text": "<?xml version=\"1.0\"?>\n<grs:ImagingSettings xmlns:grs=\"http://www.getrealsystems.com/xml/xml-ns\">\n    <grs:DocumentGUID>{7451C54A-52F0-4794-87FB-A6093AAD65AF}</grs:DocumentGUID>\n    <grs:ImageNumber>1</grs:ImageNumber>\n\n    <grs:SessionID>bd860b98-c82b-47fa-9522-a4f27f154cd6#dbserver2008r2\\qa#DavidB_94#en-gb</grs:SessionID>\n    <grs:DocumentType>I</grs:DocumentType>\n    <grs:CompanyGUID>{A2FEEDC5-978F-11D5-8C5E-0001021ABF9B}</grs:CompanyGUID>\n    <grs:Reference>heading.JPG</grs:Reference>\n    <grs:FileType>JPG</grs:FileType>\n\n    <grs:InvoiceImageIdentifier>DisplayNumber</grs:InvoiceImageIdentifier>\n    <grs:DefaultImageSource>URL</grs:DefaultImageSource>\n    <grs:DefaultURL>https://sp-db01/imaging/{{ImageID}}.bmp</grs:DefaultURL>\n</grs:ImagingSettings>   The DocumentGUID is a unique ID generated for this file  ImageNumber will always be 1  Reference is the name of the uploaded file  DocumentType is I for Invoice and C for Credit Note   In the above example the following fields come from the  dsdba.ImagingSettings  table   InvoiceImageIdentifier  DefaultImageSource  DefaultURL",
            "title": "DetailsXML"
        },
        {
            "location": "/p2p/customimaging/#return-value_6",
            "text": "Return TRUE for success",
            "title": "Return Value"
        },
        {
            "location": "/p2p/customimaging/#example",
            "text": "See the  example application  for a complete implementation.",
            "title": "Example"
        },
        {
            "location": "/p2p/customimaging/#deployment",
            "text": "Your dll should be complied (and named xyzImaging.dll) and then copied into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.",
            "title": "Deployment"
        },
        {
            "location": "/p2p/commitments/",
            "text": "Commitment Posting\n\n\nTo allow the real time posting of commitments into a finance system a custom commitment DLL can be written which to responds to new commitments being placed on the \nproactis3commitmentslink\n message qeueue (MSMQ).\n\n\nThe format of these message queue entries is defined by the \nGrouped Commitments Export\n application hook.  (This is detailed separately.)\n\n\nThe windows service \nPROACTIS P2P Client Commitments Service\n monitors the \nproactis3commitmentslink\n message queue and calls the custom DLL once per message it receives.\n\n\nImplementation\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzCommitmentProcessor. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll\n\n\n\n\n\n\nAdd a class called \nServices\n which implements the \ngrsCustInterfaces.ICommitmentProcessor\n interface.\n\n\n\n\n\n\nWrite an implementation of the \ngrsCustInterfaces.ICommitmentProcessor.ProcessCommitment\n method.\n\n\n\n\n\n\n\n\nProcessCommitment Method\n\n\nSignature\n\n\nvoid ICommitmentProcessor.ProcessCommitment(Guid commitmentGUID, string commitmentXML, string database, string databaseServer)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncommitmentGUID\n\n\nIn\n\n\nGUID for the entry in \ndbo.CommitmentsForPosting\n.\n\n\n\n\n\n\ncommitmentXML\n\n\nIn\n\n\nThe XML generated for the commitment by the Grouped Commitments application hook\n\n\n\n\n\n\ndatabase\n\n\nIn\n\n\nName of the p2p database\n\n\n\n\n\n\ndatabaseServer\n\n\nIn\n\n\nName of the p2p database server\n\n\n\n\n\n\n\n\nError Handling\n\n\nIf your DLL fails to process the commitment entry then it can throw an exception up to the calling service.\n\n\nFor example\n\n\n    throw new Exception(\"Failed to connect to the finance system\");\n\n\n\n\nThis will be recorded in the \nErrorMessage\n column of the \ndbo.CommitmentsForPosting\n table and the message queue entry will be moved from the \nproactis3commitmentslink\n queue into the \nproactis3commitmentslinkFailed\n queue.\n\n\nThe error message may also be viewed from the windows event log viewer on the application server.\n\n\nTransaction Handling\n\n\nBy default your code will run in a database transaction provided by the calling service.  If you wish your database code to run outside of this transaction scope,  then the following code maybe used\n\n\nusing (var tx = new TransactionScope(TransactionScopeOption.Suppress))\n{\n    // ... your database code here...\n}\n\n\n\n\n\n\nExample\n\n\nSee the \nexample applications\n for complete implementations.\n\n\n\n\nDeployment\n\n\nEdit the file \n\"ConfigurationFolder\\PROACTIS.P2P.ClientCommitmentsService.exe.config\"\n and ensure that the value for \nClassName\n is set to blank.\n\n\n<add key=\"ClassName\" value=\"\"/>\n\n\n\n\nYour dll should be complied (and named xyzCommitmentProcessor.dll) and then copied into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.",
            "title": "Commitment Posting"
        },
        {
            "location": "/p2p/commitments/#commitment-posting",
            "text": "To allow the real time posting of commitments into a finance system a custom commitment DLL can be written which to responds to new commitments being placed on the  proactis3commitmentslink  message qeueue (MSMQ).  The format of these message queue entries is defined by the  Grouped Commitments Export  application hook.  (This is detailed separately.)  The windows service  PROACTIS P2P Client Commitments Service  monitors the  proactis3commitmentslink  message queue and calls the custom DLL once per message it receives.",
            "title": "Commitment Posting"
        },
        {
            "location": "/p2p/commitments/#implementation",
            "text": "Create a new C# Class Library project called xyzCommitmentProcessor. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll    Add a class called  Services  which implements the  grsCustInterfaces.ICommitmentProcessor  interface.    Write an implementation of the  grsCustInterfaces.ICommitmentProcessor.ProcessCommitment  method.",
            "title": "Implementation"
        },
        {
            "location": "/p2p/commitments/#processcommitment-method",
            "text": "",
            "title": "ProcessCommitment Method"
        },
        {
            "location": "/p2p/commitments/#signature",
            "text": "void ICommitmentProcessor.ProcessCommitment(Guid commitmentGUID, string commitmentXML, string database, string databaseServer)",
            "title": "Signature"
        },
        {
            "location": "/p2p/commitments/#arguments",
            "text": "Argument  Direction  Description      commitmentGUID  In  GUID for the entry in  dbo.CommitmentsForPosting .    commitmentXML  In  The XML generated for the commitment by the Grouped Commitments application hook    database  In  Name of the p2p database    databaseServer  In  Name of the p2p database server",
            "title": "Arguments"
        },
        {
            "location": "/p2p/commitments/#error-handling",
            "text": "If your DLL fails to process the commitment entry then it can throw an exception up to the calling service.  For example      throw new Exception(\"Failed to connect to the finance system\");  This will be recorded in the  ErrorMessage  column of the  dbo.CommitmentsForPosting  table and the message queue entry will be moved from the  proactis3commitmentslink  queue into the  proactis3commitmentslinkFailed  queue.  The error message may also be viewed from the windows event log viewer on the application server.",
            "title": "Error Handling"
        },
        {
            "location": "/p2p/commitments/#transaction-handling",
            "text": "By default your code will run in a database transaction provided by the calling service.  If you wish your database code to run outside of this transaction scope,  then the following code maybe used  using (var tx = new TransactionScope(TransactionScopeOption.Suppress))\n{\n    // ... your database code here...\n}",
            "title": "Transaction Handling"
        },
        {
            "location": "/p2p/commitments/#example",
            "text": "See the  example applications  for complete implementations.",
            "title": "Example"
        },
        {
            "location": "/p2p/commitments/#deployment",
            "text": "Edit the file  \"ConfigurationFolder\\PROACTIS.P2P.ClientCommitmentsService.exe.config\"  and ensure that the value for  ClassName  is set to blank.  <add key=\"ClassName\" value=\"\"/>  Your dll should be complied (and named xyzCommitmentProcessor.dll) and then copied into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.",
            "title": "Deployment"
        },
        {
            "location": "/p2p/invoicePosting/",
            "text": "Invoice Export\n\n\nTo allow the real time posting of documents into external systems; typically finance systems; a custom export DLL can be written which to responds to new documents being placed in the \ndbo.DocumentsForPosting\n database table.\n\n\nThe format of the document xml which is stored in this table is defined by the various document export application hooks.  (These are detailed separately.)\n\n\n\n\nNote\n\n\nAlthough titled \nInvoice Export\n this process also applied to other document types such as Credit Notes and Expense Claims\n\n\n\n\nImplementation\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzExportProcessor. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll\n\n\n\n\n\n\nAdd a class called \nServices\n which implements the \ngrsCustInterfaces.IExportProcessor\n interface.\n\n\n\n\n\n\nWrite implementations of the following methods:\n\n\n\n\ngrsCustInterfaces.IExportProcessor.Initialise\n.\n\n\ngrsCustInterfaces.IExportProcessor.ProcessDocument\n.\n\n\ngrsCustInterfaces.IExportProcessor.PostingComplete\n.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe methods are called in the order listed above.\n\n\n\n\nThe documents are retrieved from the database\n\n\nInitialise is called just once\n\n\nProcessDocument is then called one for each document\n\n\nPostingComplete is called just once after all calls to ProcessDocument.\n\n\n\n\n\n\n\n\nInitialise Method\n\n\nThis method is called first after the pending documents have been retrieved from the database.  This method is typically used to make connections to external systems (databases) and to specify the transaction handling model to be used.\n\n\nSignature\n\n\nExportProcessorInitialiseResult Initialise(int numberOfDocuments, string databaseTitle, string databaseName, string databaseServer)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumberOfDocuments\n\n\nIn\n\n\nThe number of pending documents in the \ndbo.DocumentsForPosting\n table. Will always be > 0\n\n\n\n\n\n\ndatabaseTitle\n\n\nIn\n\n\nTitle of the p2p database\n\n\n\n\n\n\ndatabaseName\n\n\nIn\n\n\nName of the p2p database\n\n\n\n\n\n\ndatabaseServer\n\n\nIn\n\n\nName of the p2p database server\n\n\n\n\n\n\n\n\nReturns\n\n\nReturns a value from the \nExportProcessorInitialiseResult\n enumeration\n\n\n\n\nOneTransactionPerDocument - used for posting documents individually\n\n\nSingleTransactionForAllDocuments - used for posting all the documents in bulk\n\n\n\n\n\n\nProcessDocument Method\n\n\nThis method is called once for each document to be processed.\n\n\nSignature\n\n\nExportProcessorExportResult ProcessDocument(Guid guid, string documentNumber, string documentXml, Guid documentGuid, string documentType, string description);\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nGuid\n\n\nIn\n\n\nGUID which identifies the unique entry in \ndbo.DocumentsForPosting\n\n\n\n\n\n\ndocumentNumber\n\n\nIn\n\n\nThe Document Number,  for example PINV1234\n\n\n\n\n\n\ndocumentXml\n\n\nIn\n\n\nThe XML as generated by the application hook\n\n\n\n\n\n\ndocumentGuid\n\n\nIn\n\n\nThe GUID of the document which is being exported. (For example GUID from \ndsdba.Invoices\n)\n\n\n\n\n\n\ndocumentType\n\n\nIn\n\n\nThe type of the document which is being exported. (For example INVOICE)\n\n\n\n\n\n\ndescription\n\n\nIn\n\n\nName of the target system.  Always EXTERNAL in practice.\n\n\n\n\n\n\n\n\nReturns\n\n\nReturns a value from the \nExportProcessorExportResult\n enumeration\n\n\n\n\nSuccess - The document was successfully posted and it's status should be updated to Posted and it's commitments released.\n\n\nSkipped - This interface doesn't wish to post this document.\n\n\nSuccessButDoNotMarkAsPosted - The document was successfully posted but it's status should NOT be updated to Posted and it's commitments should NOT be released. \n\n\nSecondarySuccess - This is not the primary document generated by an application hook.\n\n\n\n\n\n\nPostingComplete Method\n\n\nThis method is called last,  after \nProcessDocument\n has been called for each pending document.\n\n\nSignature\n\n\nvoid PostingComplete();\n\n\n\n\nArguments\n\n\nNone\n\n\nReturns\n\n\nVoid\n\n\n\n\nTransaction Handling\n\n\nThere are two transaction handling modes available depending on the type of system you are interfacing with.\n\n\nOneTransactionPerDocument\n\n\nThis is the more traditional model where each document is process in it's own transaction.\n\n\n\n\nThe documents are retrieved from the database\n\n\nInitialise is called and returns a value of \nOneTransactionPerDocument\n\n\nEach call to ProcessDocument is in it's own transaction\n\n\nThe final call to PostingComplete is not in a transaction.\n\n\n\n\nIf an exception is thrown by \nProcessDocument\n then the error message is record in the \ndbo.DocumentsForPosting\n table and process continues with the next document.\n\n\nSingleTransactionForAllDocuments\n\n\nThis means that either all documents will be exported or none of them.  This is typically used when writing to flat files.\n\n\n\n\nThe documents are retrieved from the database\n\n\nInitialise is called and returns a value of \nSingleTransactionForAllDocuments\n\n\nA transaction scope is then created\n\n\nEach call to ProcessDocument is then within this transaction\n\n\nThe final call to PostingComplete is also within this transaction.\n\n\n\n\n\n\n\n\nIf an exception is thrown by either \nProcessDocument\n or \nPostingComplete\n then entire process is rolled back and the error is recorded in the windows event log.\n\n\nNo Transactions\n\n\nBy default your code will run in the transaction provided by the calling service.  If you wish your database code to run outside of this transaction scope,  then the following code maybe used\n\n\nusing (var tx = new TransactionScope(TransactionScopeOption.Suppress))\n{\n    // ... your database code here...\n}\n\n\n\n\n\n\nExample\n\n\nSee the \nexample applications\n for complete implementations.\n\n\n\n\nDeployment\n\n\nEdit the file \n\"ConfigurationFolder\\PROACTIS.P2P.AccountingExportService.exe.config\"\n and ensure that the value for \nVBProgID\n is set to blank.\n\n\n<add key=\"VBProgID\" value=\"\"/>\n\n\n\n\nYour dll should be complied (and named xyzExportProcessor.dll) and then copied into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.\n\n\nAs the \nPROACTIS P2P Accounting Export Service\n starts it will write a message to Windows Event Log listing the databases/plugins which will be used.\n\n\n\n\nDatabase\n\n\nThe pending documents are held in the database table \ndbo.DocumentsForPosting\n.  In order to maintain compatibility with legacy code there is a view of this table called \ndbo.InvoicesForPosting\n.  For all new development the use of the base table is preferred.",
            "title": "Invoice Posting"
        },
        {
            "location": "/p2p/invoicePosting/#invoice-export",
            "text": "To allow the real time posting of documents into external systems; typically finance systems; a custom export DLL can be written which to responds to new documents being placed in the  dbo.DocumentsForPosting  database table.  The format of the document xml which is stored in this table is defined by the various document export application hooks.  (These are detailed separately.)   Note  Although titled  Invoice Export  this process also applied to other document types such as Credit Notes and Expense Claims",
            "title": "Invoice Export"
        },
        {
            "location": "/p2p/invoicePosting/#implementation",
            "text": "Create a new C# Class Library project called xyzExportProcessor. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll    Add a class called  Services  which implements the  grsCustInterfaces.IExportProcessor  interface.    Write implementations of the following methods:   grsCustInterfaces.IExportProcessor.Initialise .  grsCustInterfaces.IExportProcessor.ProcessDocument .  grsCustInterfaces.IExportProcessor.PostingComplete .      Note  The methods are called in the order listed above.   The documents are retrieved from the database  Initialise is called just once  ProcessDocument is then called one for each document  PostingComplete is called just once after all calls to ProcessDocument.",
            "title": "Implementation"
        },
        {
            "location": "/p2p/invoicePosting/#initialise-method",
            "text": "This method is called first after the pending documents have been retrieved from the database.  This method is typically used to make connections to external systems (databases) and to specify the transaction handling model to be used.",
            "title": "Initialise Method"
        },
        {
            "location": "/p2p/invoicePosting/#signature",
            "text": "ExportProcessorInitialiseResult Initialise(int numberOfDocuments, string databaseTitle, string databaseName, string databaseServer)",
            "title": "Signature"
        },
        {
            "location": "/p2p/invoicePosting/#arguments",
            "text": "Argument  Direction  Description      numberOfDocuments  In  The number of pending documents in the  dbo.DocumentsForPosting  table. Will always be > 0    databaseTitle  In  Title of the p2p database    databaseName  In  Name of the p2p database    databaseServer  In  Name of the p2p database server",
            "title": "Arguments"
        },
        {
            "location": "/p2p/invoicePosting/#returns",
            "text": "Returns a value from the  ExportProcessorInitialiseResult  enumeration   OneTransactionPerDocument - used for posting documents individually  SingleTransactionForAllDocuments - used for posting all the documents in bulk",
            "title": "Returns"
        },
        {
            "location": "/p2p/invoicePosting/#processdocument-method",
            "text": "This method is called once for each document to be processed.",
            "title": "ProcessDocument Method"
        },
        {
            "location": "/p2p/invoicePosting/#signature_1",
            "text": "ExportProcessorExportResult ProcessDocument(Guid guid, string documentNumber, string documentXml, Guid documentGuid, string documentType, string description);",
            "title": "Signature"
        },
        {
            "location": "/p2p/invoicePosting/#arguments_1",
            "text": "Argument  Direction  Description      Guid  In  GUID which identifies the unique entry in  dbo.DocumentsForPosting    documentNumber  In  The Document Number,  for example PINV1234    documentXml  In  The XML as generated by the application hook    documentGuid  In  The GUID of the document which is being exported. (For example GUID from  dsdba.Invoices )    documentType  In  The type of the document which is being exported. (For example INVOICE)    description  In  Name of the target system.  Always EXTERNAL in practice.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/invoicePosting/#returns_1",
            "text": "Returns a value from the  ExportProcessorExportResult  enumeration   Success - The document was successfully posted and it's status should be updated to Posted and it's commitments released.  Skipped - This interface doesn't wish to post this document.  SuccessButDoNotMarkAsPosted - The document was successfully posted but it's status should NOT be updated to Posted and it's commitments should NOT be released.   SecondarySuccess - This is not the primary document generated by an application hook.",
            "title": "Returns"
        },
        {
            "location": "/p2p/invoicePosting/#postingcomplete-method",
            "text": "This method is called last,  after  ProcessDocument  has been called for each pending document.",
            "title": "PostingComplete Method"
        },
        {
            "location": "/p2p/invoicePosting/#signature_2",
            "text": "void PostingComplete();",
            "title": "Signature"
        },
        {
            "location": "/p2p/invoicePosting/#arguments_2",
            "text": "None",
            "title": "Arguments"
        },
        {
            "location": "/p2p/invoicePosting/#returns_2",
            "text": "Void",
            "title": "Returns"
        },
        {
            "location": "/p2p/invoicePosting/#transaction-handling",
            "text": "There are two transaction handling modes available depending on the type of system you are interfacing with.",
            "title": "Transaction Handling"
        },
        {
            "location": "/p2p/invoicePosting/#onetransactionperdocument",
            "text": "This is the more traditional model where each document is process in it's own transaction.   The documents are retrieved from the database  Initialise is called and returns a value of  OneTransactionPerDocument  Each call to ProcessDocument is in it's own transaction  The final call to PostingComplete is not in a transaction.   If an exception is thrown by  ProcessDocument  then the error message is record in the  dbo.DocumentsForPosting  table and process continues with the next document.",
            "title": "OneTransactionPerDocument"
        },
        {
            "location": "/p2p/invoicePosting/#singletransactionforalldocuments",
            "text": "This means that either all documents will be exported or none of them.  This is typically used when writing to flat files.   The documents are retrieved from the database  Initialise is called and returns a value of  SingleTransactionForAllDocuments  A transaction scope is then created  Each call to ProcessDocument is then within this transaction  The final call to PostingComplete is also within this transaction.     If an exception is thrown by either  ProcessDocument  or  PostingComplete  then entire process is rolled back and the error is recorded in the windows event log.",
            "title": "SingleTransactionForAllDocuments"
        },
        {
            "location": "/p2p/invoicePosting/#no-transactions",
            "text": "By default your code will run in the transaction provided by the calling service.  If you wish your database code to run outside of this transaction scope,  then the following code maybe used  using (var tx = new TransactionScope(TransactionScopeOption.Suppress))\n{\n    // ... your database code here...\n}",
            "title": "No Transactions"
        },
        {
            "location": "/p2p/invoicePosting/#example",
            "text": "See the  example applications  for complete implementations.",
            "title": "Example"
        },
        {
            "location": "/p2p/invoicePosting/#deployment",
            "text": "Edit the file  \"ConfigurationFolder\\PROACTIS.P2P.AccountingExportService.exe.config\"  and ensure that the value for  VBProgID  is set to blank.  <add key=\"VBProgID\" value=\"\"/>  Your dll should be complied (and named xyzExportProcessor.dll) and then copied into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.  As the  PROACTIS P2P Accounting Export Service  starts it will write a message to Windows Event Log listing the databases/plugins which will be used.",
            "title": "Deployment"
        },
        {
            "location": "/p2p/invoicePosting/#database",
            "text": "The pending documents are held in the database table  dbo.DocumentsForPosting .  In order to maintain compatibility with legacy code there is a view of this table called  dbo.InvoicesForPosting .  For all new development the use of the base table is preferred.",
            "title": "Database"
        },
        {
            "location": "/p2p/acceptanceGateway/",
            "text": "Acceptances Gateway\n\n\nSummary\n\n\nThis section describes the structure of the XML file used for importing Purchase Order Acceptances into PROACTIS P2P.  It is assumed that the reader of the document is familiar both with XML and PROACTIS acceptance documents.\n\n\nThe document also describes the validation rules, which must be passed in order for the document to be imported, and the current limitations of the acceptances gateway.\n\n\nThis document should be used in conjunction with the \nImportAcceptances.xsd\n xml schema\n\n\nProcess Overview\n\n\nAs with the other import gateways,  the user first generates an xml document containing the details of the acceptances(s) to be imported.  This xml must conform to the \nImportAcceptances.xsd\n schema document.\n\n\nThe xml is then validated, first to ensure it conforms to the schema and then to check the supplied data is valid.  For instance does the template exist?\n\n\nThe document is then created within PROACTIS using the existing purchasing engine.  This allows the gateway to use the existing PROACTIS functionality.\n\n\nLimitations of the Gateway\n\n\nAlthough the Acceptance XML gateway mimics the PROACTIS web application wherever possible, it is subject to the following limitations.\n\n\nStock\n\n\nIt is not currently possible to book items into stock.\n\n\nRecoding\n\n\nIt is not possible to recode the nominals on the acceptance.\n\n\nCompanies\n\n\nAs with the other XML gateways, an XML document can only contain documents for a single company.\n\n\nDepartments\n\n\nAs with the other XML gateways, an XML document can only contain documents for a single department.\n\n\nLanguage\n\n\nThe schema, documentation and error messages are all written in English.\n\n\nActions\n\n\nThis XML gateway only supports the creation and submission of acceptances.  It does not allow users to amended, authorise or cancel acceptances.\n\n\nWorked Example\n\n\nThis section of the document walks you through the creation of a simple document.  All the available fields are described in complete detail, within the next section.\n\n\nXML Document\n\n\nThe xml document must start with the following to lines\n\n\n<?xml version=\"1.0\" ?>\n<pro:Import xmlns:pro=\"[http://www.proactis.com/xml/xml-ns](http://www.proactis.com/xml/xml-ns)\">\n\n\n\n\nAnd finish with\n\n\n</pro:Import>\n\n\n\n\nControl Block\n\n\nA control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.\n\n\nAn example control block is shown below.\n\n\n <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"ORDER\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SALES\"\n              Version=\"1.0.0\" />\n\n\n\n\nThe XML gateway supports NT authentication, an example is shown below.\n\n\n <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SALES\"\n                 Version=\"1.0.0\" />\n\n\n\n\nNB: The value of the \nAuthenticationMethod\n field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.\n\n\nAcceptances\n\n\nThe next section contains the details of the acceptance documents to be imported.  The gateway allows multiple acceptances to be included in a single xml document.  At least one acceptance document must be included.\n\n\n<pro:Acceptance Template=\"ACC\" DateReceived=\"2006-01-01\" AcceptedAt=\"MAIN\" SupplierDeliveryNote=\"Delivery11\">\n\n\n\n\n@Template\n\n\nThis attribute is optional if the user only has access to a single template.  However, it is recommended that a value is explicitly supplied where possible.\n\n\n@DateReceived\n\n\nThis attribute is optional and will default to today's date if missing.  Must be in the format yyyy-mm-dd\n\n\n@AcceptedAt\n\n\nThis attribute is optional and will default to the user's default location if missing\n\n\nSpecifies the location at which the goods have been accepted.  The user must have access to the location.\n\n\n@SupplierDeliveryNote\n\n\nThis attribute is optional/required as configured within PROACTIS.  PROACTIS may also encore the reference to be unique for a given supplier.\n\n\nReferences\n\n\nAny mandatory reference fields must be supplied.  References fields are identified by their code.  A reference field can only be supplied if it is defined as editable on the document template.\n\n\n<pro:References>\n  <pro:Reference SelectUsingCode=\"Bar code\" Value=\"345-223-33\"  />\n</pro:References>\n\n\n\n\nComments\n\n\nAny number of comments may be added onto the acceptance document\n\n\n<pro:Comments>\n  <pro:Comment>\"Please pay quickly\"</pro:Comment>\n  <pro:Comment>\"BarCode: 1232\" </pro:Comment>\n</pro:Comments>\n\n\n\n\nOrders\n\n\nThe purchase orders to accept are specified next.\n\n\n<pro:Orders>\n        <pro:OrderSelectUsingTemplate='GENERIC' SelectUsingOrderNo='15'\n                  ControlFullyReceiptOrder='YES' ControlItemCondition='OK'>\n\n\n\n\n\n\n\n\nAt least one purchase order document must be specified.\n\n\n\n\n\n\nEach order can only be specified once.\n\n\n\n\n\n\nAn order can be identified in one of two ways.\n\n\n\n\n.Supply its Template and OrderNo using the SelectUsingTemplate and SelectUsingOrderNo\n\n\n\n\n.Supply its display number using the SelectUsingDisplayNo attribute.\n\n\n\n\n\n\nIf you wish to automatically receipt all items on the order then\n\n\n\n\nSet the ControlFullyReceiptOrder attribute to be YES\n\n\nIf you wish to specify a delivery condition, then set the ControlItemCondition  attribute to be the desired condition. If a condition is not specified, then the default delivery condition will be used.\n\n\nDo not specify any delivery conditions or items for the order.\n\n\n\n\nItems\n\n\nFor each order, you then specify which items you would like to accept.\n\n\n<pro:Items>\n        <pro:ItemSelectUsingCode='0300'>\n\n\n\n\n\n\nAt least one item must be specified\n\n\nEach item can only be specified once\n\n\nAn item can be identified in one of two ways.\n\n\nSupply its PROACTIS Code using the SelectUsingCode\n\n\nSupply its Description using the SelectUsingDiscription attribute.\n\n\nSupply its OrderItemGUID using the SelectUsingOrderItemGUID attribute.\n\n\n\n\nItemReferences\n\n\nAny mandatory item level reference fields must be supplied.  References fields are identified by their code.  A reference field can only be supplied if it is defined as editable on the document template.\n\n\n<pro:ItemReferences>\n  <pro:ItemReference SelectUsingCode=\"Bar code\" Value=\"345-223-33\"  />\n</pro:ItemReferences>\n\n\n\n\nItem Comments\n\n\nAny number of comments may be added onto an acceptance document line.\n\n\n<pro:ItemComments>\n  <pro:ItemComment>\"Please pay quickly\"</pro:Comment>\n  <pro:ItemComment>\"BarCode: 1232\" </pro:Comment>\n</pro:ItemComments>\n\n\n\n\nConditions\n\n\nThe conditions element allows you define what the condition the receipts goods are in.  For example, OK, Damaged.\n\n\n        <attribute name=\"Receipted\"type=\"pro:NonNegativeDecimal\"/>\n                <attribute name=\"Condition\"type=\"pro:Char50Type\"/>\n\n                <attribute name=\"ControlFullyReceiptItem\"type=\"pro:YesNoType\"/>\n\n\n\n\n\n\nAt least one condition element must be supplied.\n\n\nIf the condition attribute is not supplied, then the default delivery condition will be used.\n\n\nThe receipted quantity must be supplied, even nominal information is provided for the condition.\n\n\n\n\nIf the receipted quantity exceeds the outstanding quantity for the item, it will be assumed that the item has been over delivered, and an over delivery will be generated.\n\n\n\n\n\n\nIf you wish to receipt the entire outstanding balance for the item then\n\n\n\n\nDon't supplied any nominal information\n\n\nDon't supplied the receipted attribute\n\n\nSet the ControlFullyReceiptItem attribute to YES.\n\n\n\n\nDon't supply any other delivery conditions for the line.\n\n\n\n\n\n\nIf no nominal information is provided, then the nominals will be receipted on a first-come-first-served basis.\n\n\n\n\n\n\nNominals\n\n\nIf required, the receipted quantity can be allocated at nominal level.\n\n\n<pro:Nominals>\n  <pro:NominalSelectUsingNominalCoding='0300.0990.0610.ACT'  Receipted='1'/>\n</pro:Nominals>\n\n\n\n\n\n\nA nominal can be identified in one of two ways.\n\n\nSupply its Nominal Coding using the SelectUsingNominalCoding attributes.\n\n\nSupply its CommitmentDate in the format yyyy-mm-dd using the SelectUsingCommitmentDate attribute.\n\n\n\n\nAt lease one of the two methods must be used.\n- The receipted quantity must be supplied, and should not exceed the outstanding quantity from the original order.\n\n\n            <UnitOfMeasure>EA</UnitOfMeasure>\n            <UnitValue>28.70</UnitValue>\n            <UNSPSCCode>44121604</UNSPSCCode>\n        </Item>\n    </PunchOutDetail>\n</PurchaseOrder>",
            "title": "Acceptances"
        },
        {
            "location": "/p2p/acceptanceGateway/#acceptances-gateway",
            "text": "",
            "title": "Acceptances Gateway"
        },
        {
            "location": "/p2p/acceptanceGateway/#summary",
            "text": "This section describes the structure of the XML file used for importing Purchase Order Acceptances into PROACTIS P2P.  It is assumed that the reader of the document is familiar both with XML and PROACTIS acceptance documents.  The document also describes the validation rules, which must be passed in order for the document to be imported, and the current limitations of the acceptances gateway.  This document should be used in conjunction with the  ImportAcceptances.xsd  xml schema",
            "title": "Summary"
        },
        {
            "location": "/p2p/acceptanceGateway/#process-overview",
            "text": "As with the other import gateways,  the user first generates an xml document containing the details of the acceptances(s) to be imported.  This xml must conform to the  ImportAcceptances.xsd  schema document.  The xml is then validated, first to ensure it conforms to the schema and then to check the supplied data is valid.  For instance does the template exist?  The document is then created within PROACTIS using the existing purchasing engine.  This allows the gateway to use the existing PROACTIS functionality.",
            "title": "Process Overview"
        },
        {
            "location": "/p2p/acceptanceGateway/#limitations-of-the-gateway",
            "text": "Although the Acceptance XML gateway mimics the PROACTIS web application wherever possible, it is subject to the following limitations.",
            "title": "Limitations of the Gateway"
        },
        {
            "location": "/p2p/acceptanceGateway/#stock",
            "text": "It is not currently possible to book items into stock.",
            "title": "Stock"
        },
        {
            "location": "/p2p/acceptanceGateway/#recoding",
            "text": "It is not possible to recode the nominals on the acceptance.",
            "title": "Recoding"
        },
        {
            "location": "/p2p/acceptanceGateway/#companies",
            "text": "As with the other XML gateways, an XML document can only contain documents for a single company.",
            "title": "Companies"
        },
        {
            "location": "/p2p/acceptanceGateway/#departments",
            "text": "As with the other XML gateways, an XML document can only contain documents for a single department.",
            "title": "Departments"
        },
        {
            "location": "/p2p/acceptanceGateway/#language",
            "text": "The schema, documentation and error messages are all written in English.",
            "title": "Language"
        },
        {
            "location": "/p2p/acceptanceGateway/#actions",
            "text": "This XML gateway only supports the creation and submission of acceptances.  It does not allow users to amended, authorise or cancel acceptances.",
            "title": "Actions"
        },
        {
            "location": "/p2p/acceptanceGateway/#worked-example",
            "text": "This section of the document walks you through the creation of a simple document.  All the available fields are described in complete detail, within the next section.",
            "title": "Worked Example"
        },
        {
            "location": "/p2p/acceptanceGateway/#xml-document",
            "text": "The xml document must start with the following to lines  <?xml version=\"1.0\" ?>\n<pro:Import xmlns:pro=\"[http://www.proactis.com/xml/xml-ns](http://www.proactis.com/xml/xml-ns)\">  And finish with  </pro:Import>",
            "title": "XML Document"
        },
        {
            "location": "/p2p/acceptanceGateway/#control-block",
            "text": "A control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.  An example control block is shown below.   <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"ORDER\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SALES\"\n              Version=\"1.0.0\" />  The XML gateway supports NT authentication, an example is shown below.   <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SALES\"\n                 Version=\"1.0.0\" />  NB: The value of the  AuthenticationMethod  field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.",
            "title": "Control Block"
        },
        {
            "location": "/p2p/acceptanceGateway/#acceptances",
            "text": "The next section contains the details of the acceptance documents to be imported.  The gateway allows multiple acceptances to be included in a single xml document.  At least one acceptance document must be included.  <pro:Acceptance Template=\"ACC\" DateReceived=\"2006-01-01\" AcceptedAt=\"MAIN\" SupplierDeliveryNote=\"Delivery11\">",
            "title": "Acceptances"
        },
        {
            "location": "/p2p/acceptanceGateway/#template",
            "text": "This attribute is optional if the user only has access to a single template.  However, it is recommended that a value is explicitly supplied where possible.",
            "title": "@Template"
        },
        {
            "location": "/p2p/acceptanceGateway/#datereceived",
            "text": "This attribute is optional and will default to today's date if missing.  Must be in the format yyyy-mm-dd",
            "title": "@DateReceived"
        },
        {
            "location": "/p2p/acceptanceGateway/#acceptedat",
            "text": "This attribute is optional and will default to the user's default location if missing  Specifies the location at which the goods have been accepted.  The user must have access to the location.",
            "title": "@AcceptedAt"
        },
        {
            "location": "/p2p/acceptanceGateway/#supplierdeliverynote",
            "text": "This attribute is optional/required as configured within PROACTIS.  PROACTIS may also encore the reference to be unique for a given supplier.",
            "title": "@SupplierDeliveryNote"
        },
        {
            "location": "/p2p/acceptanceGateway/#references",
            "text": "Any mandatory reference fields must be supplied.  References fields are identified by their code.  A reference field can only be supplied if it is defined as editable on the document template.  <pro:References>\n  <pro:Reference SelectUsingCode=\"Bar code\" Value=\"345-223-33\"  />\n</pro:References>",
            "title": "References"
        },
        {
            "location": "/p2p/acceptanceGateway/#comments",
            "text": "Any number of comments may be added onto the acceptance document  <pro:Comments>\n  <pro:Comment>\"Please pay quickly\"</pro:Comment>\n  <pro:Comment>\"BarCode: 1232\" </pro:Comment>\n</pro:Comments>",
            "title": "Comments"
        },
        {
            "location": "/p2p/acceptanceGateway/#orders",
            "text": "The purchase orders to accept are specified next.  <pro:Orders>\n        <pro:OrderSelectUsingTemplate='GENERIC' SelectUsingOrderNo='15'\n                  ControlFullyReceiptOrder='YES' ControlItemCondition='OK'>    At least one purchase order document must be specified.    Each order can only be specified once.    An order can be identified in one of two ways.   .Supply its Template and OrderNo using the SelectUsingTemplate and SelectUsingOrderNo   .Supply its display number using the SelectUsingDisplayNo attribute.    If you wish to automatically receipt all items on the order then   Set the ControlFullyReceiptOrder attribute to be YES  If you wish to specify a delivery condition, then set the ControlItemCondition  attribute to be the desired condition. If a condition is not specified, then the default delivery condition will be used.  Do not specify any delivery conditions or items for the order.",
            "title": "Orders"
        },
        {
            "location": "/p2p/acceptanceGateway/#items",
            "text": "For each order, you then specify which items you would like to accept.  <pro:Items>\n        <pro:ItemSelectUsingCode='0300'>   At least one item must be specified  Each item can only be specified once  An item can be identified in one of two ways.  Supply its PROACTIS Code using the SelectUsingCode  Supply its Description using the SelectUsingDiscription attribute.  Supply its OrderItemGUID using the SelectUsingOrderItemGUID attribute.",
            "title": "Items"
        },
        {
            "location": "/p2p/acceptanceGateway/#itemreferences",
            "text": "Any mandatory item level reference fields must be supplied.  References fields are identified by their code.  A reference field can only be supplied if it is defined as editable on the document template.  <pro:ItemReferences>\n  <pro:ItemReference SelectUsingCode=\"Bar code\" Value=\"345-223-33\"  />\n</pro:ItemReferences>",
            "title": "ItemReferences"
        },
        {
            "location": "/p2p/acceptanceGateway/#item-comments",
            "text": "Any number of comments may be added onto an acceptance document line.  <pro:ItemComments>\n  <pro:ItemComment>\"Please pay quickly\"</pro:Comment>\n  <pro:ItemComment>\"BarCode: 1232\" </pro:Comment>\n</pro:ItemComments>",
            "title": "Item Comments"
        },
        {
            "location": "/p2p/acceptanceGateway/#conditions",
            "text": "The conditions element allows you define what the condition the receipts goods are in.  For example, OK, Damaged.          <attribute name=\"Receipted\"type=\"pro:NonNegativeDecimal\"/>\n                <attribute name=\"Condition\"type=\"pro:Char50Type\"/>\n\n                <attribute name=\"ControlFullyReceiptItem\"type=\"pro:YesNoType\"/>   At least one condition element must be supplied.  If the condition attribute is not supplied, then the default delivery condition will be used.  The receipted quantity must be supplied, even nominal information is provided for the condition.   If the receipted quantity exceeds the outstanding quantity for the item, it will be assumed that the item has been over delivered, and an over delivery will be generated.    If you wish to receipt the entire outstanding balance for the item then   Don't supplied any nominal information  Don't supplied the receipted attribute  Set the ControlFullyReceiptItem attribute to YES.   Don't supply any other delivery conditions for the line.    If no nominal information is provided, then the nominals will be receipted on a first-come-first-served basis.",
            "title": "Conditions"
        },
        {
            "location": "/p2p/acceptanceGateway/#nominals",
            "text": "If required, the receipted quantity can be allocated at nominal level.  <pro:Nominals>\n  <pro:NominalSelectUsingNominalCoding='0300.0990.0610.ACT'  Receipted='1'/>\n</pro:Nominals>   A nominal can be identified in one of two ways.  Supply its Nominal Coding using the SelectUsingNominalCoding attributes.  Supply its CommitmentDate in the format yyyy-mm-dd using the SelectUsingCommitmentDate attribute.   At lease one of the two methods must be used.\n- The receipted quantity must be supplied, and should not exceed the outstanding quantity from the original order.              <UnitOfMeasure>EA</UnitOfMeasure>\n            <UnitValue>28.70</UnitValue>\n            <UNSPSCCode>44121604</UNSPSCCode>\n        </Item>\n    </PunchOutDetail>\n</PurchaseOrder>",
            "title": "Nominals"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/",
            "text": "Cancel Purchase Order Gateway\n\n\nSummary\n\n\nThis document describes how to cancel purchase orders using the PROACTIS web services.\n\n\nIt is assumed that the reader of the document is familiar both with XML and PROACTIS ordering.\n\n\nThe document also describes the validation rules, which must be passed in order for the order to be cancelled and any current limitations of the gateway.\n\n\nThis document should be used in conjunction with the \nAuthenticateUser.xsd\n xml schema\n\n\n\n\nProcess Overview\n\n\nThe following information is passed to the web service call\n\n\n\n\nAn xml control block, which authenticates the user onto a PROACTIS database.\n\n\nThe purchase order to cancel\n\n\nThe reason why the order is being cancelled\n\n\nAny additional comments.\n\n\n\n\nAs with the front end, not all orders are in a state where they can be cancelled.  For example, a fully invoiced order can not be cancelled.\n\n\n\n\nWorked Example\n\n\nThis section of the document walks you through the cancellation of a purchase order.\n\n\nAuthenticateUser XML Document\n\n\nThe xml document must start with the following to lines\n\n\n<?xml version=\u201d1.0\u201d ?>  \n  <pro:AuthenticateUser xmlns:pro=\u201dhttp://www.proactis.com/xml/xml-ns\u201d>\n\n\n\n\nAnd finish with\n\n\n</pro: AuthenticateUser >\n\n\n\n\nControl Block\n\n\nA control block must then be included so that the gateway knows which database and company to log into.  This has the same structure as the control block for the other XML gateways.\n\n\nAn example control block is shown below.\n\n\n <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />\n\n\n\n\nThe XML gateway supports NT authentication, an example is shown below.\n\n\n <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />\n\n\n\n\nNB: The value of the \nAuthenticationMethod\n field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.\n\n\nWeb Services\n\n\nThere are two different web services available depending on how the purchase order will be identified.\n\n\nCancelOrderByGUID\n\n\nIf you know the order's internal GUID; then the \nCancelOrderByGUID\n method should be used.\nThis method takes the following arguments:\n\n\n\n\nControlXML\n\n\nOrderGUID\n\n\nCancellationReason\n\n\nComments\n\n\n\n\nCancelOrder\n\n\nIf you only know the order's document number; then the \nCancelOrder\n method should be used.\nThis method takes the following arguments:\n\n\n\n\nControlXML\n\n\nTemplateLabel\n\n\nOrderNumber\n\n\nDisplayNumber\n\n\nCancellationReason\n\n\nComments\n\n\n\n\n\n\nNote\n\n\nThe order can be identified by either of the following arguments:\n\n\n\n\n\n\nTemplateLabel and numeric OrderNumber\n\n\n\n\n\n\nThe DisplayNumber\n\n\n\n\n\n\nIf the DisplayNumber is supplied, then the TemplateLabel and OrderNumber are ignored.\n\n\n\n\nCancellation Reason\n\n\nThe reason for cancellation the order must be supplied.  Reasons are defined in the \nList\n snap-in within the PROACTIS management console.\n\n\nComments\n\n\nFinally, any additional comments can be supplied.\n\n\nErrors\n\n\nIf the order does not exist,  or is not in a state where it can be cancelled then the gateway will throw the following fault:\n\nThe order is not available for cancellation\n\n\nExample Code\n\n\nSee the following example applications:\n\n\n\n\n\n\nCancel Order\n\n\n\n\n\n\nCancel Order by GUID",
            "title": "Cancel Purchase Order"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#cancel-purchase-order-gateway",
            "text": "",
            "title": "Cancel Purchase Order Gateway"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#summary",
            "text": "This document describes how to cancel purchase orders using the PROACTIS web services.  It is assumed that the reader of the document is familiar both with XML and PROACTIS ordering.  The document also describes the validation rules, which must be passed in order for the order to be cancelled and any current limitations of the gateway.  This document should be used in conjunction with the  AuthenticateUser.xsd  xml schema",
            "title": "Summary"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#process-overview",
            "text": "The following information is passed to the web service call   An xml control block, which authenticates the user onto a PROACTIS database.  The purchase order to cancel  The reason why the order is being cancelled  Any additional comments.   As with the front end, not all orders are in a state where they can be cancelled.  For example, a fully invoiced order can not be cancelled.",
            "title": "Process Overview"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#worked-example",
            "text": "This section of the document walks you through the cancellation of a purchase order.",
            "title": "Worked Example"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#authenticateuser-xml-document",
            "text": "The xml document must start with the following to lines  <?xml version=\u201d1.0\u201d ?>  \n  <pro:AuthenticateUser xmlns:pro=\u201dhttp://www.proactis.com/xml/xml-ns\u201d>  And finish with  </pro: AuthenticateUser >",
            "title": "AuthenticateUser XML Document"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#control-block",
            "text": "A control block must then be included so that the gateway knows which database and company to log into.  This has the same structure as the control block for the other XML gateways.  An example control block is shown below.   <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />  The XML gateway supports NT authentication, an example is shown below.   <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />  NB: The value of the  AuthenticationMethod  field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.",
            "title": "Control Block"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#web-services",
            "text": "There are two different web services available depending on how the purchase order will be identified.",
            "title": "Web Services"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#cancelorderbyguid",
            "text": "If you know the order's internal GUID; then the  CancelOrderByGUID  method should be used.\nThis method takes the following arguments:   ControlXML  OrderGUID  CancellationReason  Comments",
            "title": "CancelOrderByGUID"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#cancelorder",
            "text": "If you only know the order's document number; then the  CancelOrder  method should be used.\nThis method takes the following arguments:   ControlXML  TemplateLabel  OrderNumber  DisplayNumber  CancellationReason  Comments    Note  The order can be identified by either of the following arguments:    TemplateLabel and numeric OrderNumber    The DisplayNumber    If the DisplayNumber is supplied, then the TemplateLabel and OrderNumber are ignored.",
            "title": "CancelOrder"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#cancellation-reason",
            "text": "The reason for cancellation the order must be supplied.  Reasons are defined in the  List  snap-in within the PROACTIS management console.",
            "title": "Cancellation Reason"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#comments",
            "text": "Finally, any additional comments can be supplied.",
            "title": "Comments"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#errors",
            "text": "If the order does not exist,  or is not in a state where it can be cancelled then the gateway will throw the following fault: The order is not available for cancellation",
            "title": "Errors"
        },
        {
            "location": "/p2p/cancelPurhaseOrderGateway/#example-code",
            "text": "See the following example applications:    Cancel Order    Cancel Order by GUID",
            "title": "Example Code"
        },
        {
            "location": "/p2p/expensesGateway/",
            "text": "Expenses Gateway\n\n\nSummary\n\n\nThis document describes the structure of the XML file used for importing Expense Claims into PROACTIS.  It is assumed that the reader of the document is familiar both with XML and PROACTIS expense claims.\n\n\nThe document also describes the validation rules, which must be passed in order for the claim to be imported, and the current limitations of the expense claim gateway.\n\n\nThis document should be used in conjunction with the \nImportExpenseClaims.xsd\n xml schema.\n\n\nProcess Overview\n\n\nThe process of importing expense claims is very similar to the existing master-data (suppliers/items/nominals) and purchase invoice and order xml gateways.\n\n\nFirst the user generates an xml document containing the details of the expense claim(s) to be imported.  This xml must conform to the \nImportExpenseClaims.xsd\n schema document.\n\n\nThe xml is then validated, first to ensure it conforms to the schema and then to check the supplied data is valid.  For instance does the template exist?\n\n\nThe expense claim is then created within PROACTIS using the existing expenses engine.  This allows the gateway to use the existing PROACTIS functionality.\n\n\nLimitations of the Gateway\n\n\nAlthough the Expense Claim XML gateway mimics the PROACTIS web application wherever possible, it is subject to the following limitations.\n\n\nCompanies\n\n\nAs with the other XML gateways, an XML document can only contain documents for a single company.\n\n\nDepartments\n\n\nAs with the other XML gateways, an XML document can only contain documents for a single department.\n\n\nLanguage\n\n\nThe schema, documentation and error messages are all written in English.\n\n\nActions\n\n\nThis XML gateway only supports the creation and submission of expense claims.  It does not allow users to amend, authorise or cancel expense claims.\n\n\nWorked Example\n\n\nThis section of the document walks you through the creation of a simple document.  All the available fields are described in complete detail, within the next section.\n\n\nXML Document\n\n\nThe xml document must start with the following to lines\n\n\n<?xml version=\"1.0\" ?>\n<pro:Import xmlns:pro=\"[http://www.proactis.com/xml/xml-ns](http://www.proactis.com/xml/xml-ns)\">\n\n\n\n\nAnd finish with\n\n\n</pro:Import>\n\n\n\n\nControl Block\n\n\nA control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.\n\n\nAn example control block is shown below.\n\n\n <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />\n\n\n\n\nThe XML gateway supports NT authentication, an example is shown below.\n\n\n <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />\n\n\n\n\nNB: The value of the \nAuthenticationMethod\n field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.\n\n\nExpense Claims\n\n\nThe next section contains the details of the expense claims to be imported.  The gateway allows multiple claims to be included in a single xml document.  At least one expense claim must be included.\n\n\n<pro:ExpenseClaim Template = \"EXP\"\n                  Title = \"Pen and Paper\" \n                  ClaimDate=\"2017-08-18\"\n                  ClaimFor=\"Anderson\"\n                  SaveMethod=\"SUBMIT\" />  \n\n\n\n\n@Template\n\n\nThis attribute is optional if the user only has access to a single template.  However, it is recommended that a value is explicitly supplied where possible.\n\n\n@ClaimDate\n\n\nThis attribute is optional and will default to today's date if missing.  Must be in the format yyyy-mm-dd\n\n\nComments\n\n\nAny number of comments may be added onto the claim.\n\n\n<pro:Comments>\n  <pro:Comment>\"Please pay quickly\"</pro:Comment>\n  <pro:Comment>\"BarCode: 1232\" </pro:Comment>\n</pro:Comments>\n\n\n\n\nItems\n\n\nThe claim must contain one or more item lines.\n\n\n<pro:Items>\n  <pro:Item PROACTISCode='LTP001'\n            Price='1002.35'\n            Quantity='1'\n            Description='Laptop'\n            Receipt='YES'\n            TaxReceipt='YES'\n            TaxCode='C1' />\n<pro:Items>\n\n\n\n\nNominals\n\n\nEach item on the claim must contain one or more nominals\n\n\n<pro:Nominals>\n  <pro:Nominal AccountingElement1='113'\n               NominalMask='Advertising'\n               Ratio='1'/>\n</pro:Nominals>\n\n\n\n\nError Handling\n\n\nBy default the import routine will return the XML amended to include status and error information.\n\n\nWhen a piece of data has been processed, then an extra attribute called status will be added to the node, this will contain either OK or FAILED.  \n\n\nNote: Nodes without this attribute have not been processed.\n\n\nThe supplied XML is first validated against the \nImportExpenseClaims.XSD\n schema.  If the xml fails validation then the details are of the failure are appended to the supplied xml in the form of an errors block\n\n\nAn example errors block is shown below\n\n\n<pro:Errors>\n  <pro:Error Number='-1072898030' \n             Message='XML is not valid according to the schema. Element content is incomplete according to the DTD/Schema. Expecting: {http://www.proactis.com/xml/xml-ns}ExpenseClaim'/>\n</pro:Errors>\n\n\n\n\nErrors/Error\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nInternal Error Number - this may change between releases\n\n\n\n\n\n\nMessage\n\n\nThe error message (in English)\n\n\n\n\n\n\nSource\n\n\nOptional attribute describing where the error occurred.\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\n\n\nThe error block may occur anywhere within the document.  For example, if a line is invalid, the errors block will be appended to that line.\n\n\n\n\n\n\nIt is possible for an errors block to contain more than one error.\n\n\n\n\n\n\nErrorHandlingModes\n\n\nThe reporting of errors can be configured by setting the \nErrorHandlingMode\n attribute within the control block.  The table below describes the available modes\n\n\n\n\n\n\n\n\nMode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nEMBED\n\n\nThe processed XML is returned, but we the error message stored in additional \npro:Errors/pro:Error\n nodes. This is the default mode if the attribute is not supplied.\n\n\n\n\n\n\nTHROWERRORS\n\n\nThe errors are thrown as SOAP exceptions back to the calling code, the message is an xml document describing the errors\n\n\n\n\n\n\nTHROWXML\n\n\nThe errors are thrown as SOAP exceptions back to the calling code; the message is the processed xml document, which contains all the errors.\n\n\n\n\n\n\nTHROWTEXT\n\n\nThe errors are thrown as OAP exceptions back to the calling code, the message is an human readable text describing the errors.\n\n\n\n\n\n\n\n\nSuccessful Response\n\n\nIf a claim has been successfully imported, then two new attributes will be added the ExpenseClaim node.\n1. The first attribute is Status, and will have a value of OK\n2. The second attribute is DocumentNumber, and this will contain the claims internal number.\n\n\nNote\n\n\n\n\nIf the XML contains multiple expense claims, then as long as the control block is valid, it is possible for some expense claims to be imported and other claims to be rejected.\n\n\n\n\nExample\n\n\n<pro:ExpenseClaim  Template='EXP' Status='OK' DocumentNumber='exp 52487'>\n\n\n\n\n\n\nControl Block Element\n\n\nThe attributes supported by the control block element within the xml are listed below:\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDatabaseName\n\n\nThis is the title of the database as shown to the user on the logon screen.\n\n\n\n\n\n\nUserName\n\n\nThe LoginID of the,PROACTIS user. This user must have,permission to create expense claims.\n\n\n\n\n\n\nPassword\n\n\nPassword for above user.\n\n\n\n\n\n\nEncodedPassword\n\n\nEncoded version of the password.  (No longer supported)\n\n\n\n\n\n\nCompany\n\n\nThe user must have access to the company.  If missing, the user\u2019s default company will be used.\n\n\n\n\n\n\nDepartment\n\n\nThe user must have access to the department.  If missing, the user\u2019s default department will be used.\n\n\n\n\n\n\nVersion\n\n\nMust be 1.0.0\n\n\n\n\n\n\nWriteErrorsToDatabase\n\n\nNot currently used.\n\n\n\n\n\n\nAuthenticationMethod\n\n\nPROACTIS or WINDOWS.  For WINDOWS authentication, the username and password must not be supplied.\n\n\n\n\n\n\nErrorHandlingMode\n\n\nDescribes how error messages will be handled.  See the error handling section for details.\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\nThe control block must be provided\n\n\n\n\n\n\nExpenseClaim Element\n\n\nThe attributes supported by the Import/ExpenseClaim element within the xml are listed below:\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTemplate\n\n\nThe expense claims template\u2019s code used to create the claim.  The user must have permission to use this template.\n\n\n\n\n\n\nTitle\n\n\nThe title of the expense claim.\n\n\n\n\n\n\nClaimDate\n\n\nThe date of the claim.  If missing the date will default to today.  All dates are in the format yyyy-mm-dd\n\n\n\n\n\n\nClaimFor\n\n\nThe LoginID of the user we are entering the claim for. The user must have permission to enter claims for this user. If missing the claim is entered for the user as specified in the control block.\n\n\n\n\n\n\nSaveMethod\n\n\nHow will the Expense claim be saved to the database.  If missing, it will default to submit. Possible settings are \n  SAVE.  Allows the user to manually edit the claim \n SUBMIT. Submits the claim for authorisation. This option is not available if the \u2018Must submit claim for completion\u2019 user property is set. \n CODING. Submits the claim for coding.  A user must be defined for this user for this option to be available.\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\nAt least one claim must be provided\n\n\n\n\n\n\nComment Element\n\n\nThe attributes supported by the Import/ExpenseClaim/Comments/Comment and Import/ExpenseClaim/Items/Item/Comments/Comment elements within the xml are listed below:\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nELEMENT  TEXT\n\n\nThe text of the comment\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\nA claim can have any number of comments.\n\n\n\n\n\n\nReference Element\n\n\nThe attributes supported by the Import/ExpenseClaim/References/Reference and Import/ExpenseClaim/Items/Item/References/Reference elements within the xml are listed below:\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCode\n\n\nThe reference's code\n\n\n\n\n\n\nCaption\n\n\nThe reference\u2019s caption\n\n\n\n\n\n\nPosition\n\n\nThe references position\n\n\n\n\n\n\nValue\n\n\nThe value of the reference\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\nAny mandatory reference fields must be supplied\n\n\nA reference can be identified by its Code, Caption or Position\n\n\nThe Code should be used if possible.\n\n\n\n\n\n\nItem Element\n\n\nThe attributes supported by the Import/ExpenseClaim/Items/Item element within the xml are listed below:\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPROACTISCode\n\n\nThe item must be available for use from the template.\n\n\n\n\n\n\nPrice\n\n\nThe item must allow the user to change the price, and the item\u2019s \u2018enter net value\u2019 setting must be turned off.  If missing, the price from the item master will be used.\n\n\n\n\n\n\nQuantity\n\n\nThe item\u2019s \u2018Enter Net Value\u2019 setting must be turned off.  If missing,  a quantity of 1 will be assumed.\n\n\n\n\n\n\nNetValue\n\n\nThe item\u2019s \u2018Enter Net Value\u2019 setting must be turned on.\n\n\n\n\n\n\nClaimDate\n\n\nMust be in the format yyyy-mm-dd\n\n\n\n\n\n\nDescription\n\n\nThe item must allow the user to change the description. If missing, the description from the item master will be used.\n\n\n\n\n\n\nReceipt\n\n\nDoes the user have a receipt?\n\n\n\n\n\n\nTaxReceipt\n\n\nIs the receipt a tax receipt?  (Receipt must be set to YES)\n\n\n\n\n\n\nTaxCode\n\n\nAllows a different tax code (Band1) to be used for the line. If missing uses the tax rules defined against the template.\n\n\n\n\n\n\nTaxOverride\n\n\nAllows the line tax to be manually set.\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\nThe claim must contain at least one item.\n\n\n\n\n\n\nNominal Element\n\n\nThe attributes supported by the Import/ExpenseClaim/Items/Item/Nominals/Nominal element within the xml are listed below:\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRatio\n\n\nRatio of this nominal to the other nominals on the line.  If missing, the ratio will be set to 1.\n\n\n\n\n\n\nAccountingElement1-8\n\n\nThe nominal must pass the standard PROACTIS rules for nominal validation.\n\n\n\n\n\n\nNominalMask\n\n\nApplies the coding from a nominal mask attached to the item.\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\nThe item must contain at least one nominal\n\n\nAny accounting elements attached to the item/user/department/template or company will be preset by default, in exactly the same way as normal expense claims are created.",
            "title": "Expenses"
        },
        {
            "location": "/p2p/expensesGateway/#expenses-gateway",
            "text": "",
            "title": "Expenses Gateway"
        },
        {
            "location": "/p2p/expensesGateway/#summary",
            "text": "This document describes the structure of the XML file used for importing Expense Claims into PROACTIS.  It is assumed that the reader of the document is familiar both with XML and PROACTIS expense claims.  The document also describes the validation rules, which must be passed in order for the claim to be imported, and the current limitations of the expense claim gateway.  This document should be used in conjunction with the  ImportExpenseClaims.xsd  xml schema.",
            "title": "Summary"
        },
        {
            "location": "/p2p/expensesGateway/#process-overview",
            "text": "The process of importing expense claims is very similar to the existing master-data (suppliers/items/nominals) and purchase invoice and order xml gateways.  First the user generates an xml document containing the details of the expense claim(s) to be imported.  This xml must conform to the  ImportExpenseClaims.xsd  schema document.  The xml is then validated, first to ensure it conforms to the schema and then to check the supplied data is valid.  For instance does the template exist?  The expense claim is then created within PROACTIS using the existing expenses engine.  This allows the gateway to use the existing PROACTIS functionality.",
            "title": "Process Overview"
        },
        {
            "location": "/p2p/expensesGateway/#limitations-of-the-gateway",
            "text": "Although the Expense Claim XML gateway mimics the PROACTIS web application wherever possible, it is subject to the following limitations.",
            "title": "Limitations of the Gateway"
        },
        {
            "location": "/p2p/expensesGateway/#companies",
            "text": "As with the other XML gateways, an XML document can only contain documents for a single company.",
            "title": "Companies"
        },
        {
            "location": "/p2p/expensesGateway/#departments",
            "text": "As with the other XML gateways, an XML document can only contain documents for a single department.",
            "title": "Departments"
        },
        {
            "location": "/p2p/expensesGateway/#language",
            "text": "The schema, documentation and error messages are all written in English.",
            "title": "Language"
        },
        {
            "location": "/p2p/expensesGateway/#actions",
            "text": "This XML gateway only supports the creation and submission of expense claims.  It does not allow users to amend, authorise or cancel expense claims.",
            "title": "Actions"
        },
        {
            "location": "/p2p/expensesGateway/#worked-example",
            "text": "This section of the document walks you through the creation of a simple document.  All the available fields are described in complete detail, within the next section.",
            "title": "Worked Example"
        },
        {
            "location": "/p2p/expensesGateway/#xml-document",
            "text": "The xml document must start with the following to lines  <?xml version=\"1.0\" ?>\n<pro:Import xmlns:pro=\"[http://www.proactis.com/xml/xml-ns](http://www.proactis.com/xml/xml-ns)\">  And finish with  </pro:Import>",
            "title": "XML Document"
        },
        {
            "location": "/p2p/expensesGateway/#control-block",
            "text": "A control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.  An example control block is shown below.   <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />  The XML gateway supports NT authentication, an example is shown below.   <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />  NB: The value of the  AuthenticationMethod  field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.",
            "title": "Control Block"
        },
        {
            "location": "/p2p/expensesGateway/#expense-claims",
            "text": "The next section contains the details of the expense claims to be imported.  The gateway allows multiple claims to be included in a single xml document.  At least one expense claim must be included.  <pro:ExpenseClaim Template = \"EXP\"\n                  Title = \"Pen and Paper\" \n                  ClaimDate=\"2017-08-18\"\n                  ClaimFor=\"Anderson\"\n                  SaveMethod=\"SUBMIT\" />",
            "title": "Expense Claims"
        },
        {
            "location": "/p2p/expensesGateway/#template",
            "text": "This attribute is optional if the user only has access to a single template.  However, it is recommended that a value is explicitly supplied where possible.",
            "title": "@Template"
        },
        {
            "location": "/p2p/expensesGateway/#claimdate",
            "text": "This attribute is optional and will default to today's date if missing.  Must be in the format yyyy-mm-dd",
            "title": "@ClaimDate"
        },
        {
            "location": "/p2p/expensesGateway/#comments",
            "text": "Any number of comments may be added onto the claim.  <pro:Comments>\n  <pro:Comment>\"Please pay quickly\"</pro:Comment>\n  <pro:Comment>\"BarCode: 1232\" </pro:Comment>\n</pro:Comments>",
            "title": "Comments"
        },
        {
            "location": "/p2p/expensesGateway/#items",
            "text": "The claim must contain one or more item lines.  <pro:Items>\n  <pro:Item PROACTISCode='LTP001'\n            Price='1002.35'\n            Quantity='1'\n            Description='Laptop'\n            Receipt='YES'\n            TaxReceipt='YES'\n            TaxCode='C1' />\n<pro:Items>",
            "title": "Items"
        },
        {
            "location": "/p2p/expensesGateway/#nominals",
            "text": "Each item on the claim must contain one or more nominals  <pro:Nominals>\n  <pro:Nominal AccountingElement1='113'\n               NominalMask='Advertising'\n               Ratio='1'/>\n</pro:Nominals>",
            "title": "Nominals"
        },
        {
            "location": "/p2p/expensesGateway/#error-handling",
            "text": "By default the import routine will return the XML amended to include status and error information.  When a piece of data has been processed, then an extra attribute called status will be added to the node, this will contain either OK or FAILED.    Note: Nodes without this attribute have not been processed.  The supplied XML is first validated against the  ImportExpenseClaims.XSD  schema.  If the xml fails validation then the details are of the failure are appended to the supplied xml in the form of an errors block  An example errors block is shown below  <pro:Errors>\n  <pro:Error Number='-1072898030' \n             Message='XML is not valid according to the schema. Element content is incomplete according to the DTD/Schema. Expecting: {http://www.proactis.com/xml/xml-ns}ExpenseClaim'/>\n</pro:Errors>",
            "title": "Error Handling"
        },
        {
            "location": "/p2p/expensesGateway/#errorserror",
            "text": "Attribute Name  Description      Number  Internal Error Number - this may change between releases    Message  The error message (in English)    Source  Optional attribute describing where the error occurred.",
            "title": "Errors/Error"
        },
        {
            "location": "/p2p/expensesGateway/#notes",
            "text": "The error block may occur anywhere within the document.  For example, if a line is invalid, the errors block will be appended to that line.    It is possible for an errors block to contain more than one error.",
            "title": "Notes"
        },
        {
            "location": "/p2p/expensesGateway/#errorhandlingmodes",
            "text": "The reporting of errors can be configured by setting the  ErrorHandlingMode  attribute within the control block.  The table below describes the available modes     Mode  Description      EMBED  The processed XML is returned, but we the error message stored in additional  pro:Errors/pro:Error  nodes. This is the default mode if the attribute is not supplied.    THROWERRORS  The errors are thrown as SOAP exceptions back to the calling code, the message is an xml document describing the errors    THROWXML  The errors are thrown as SOAP exceptions back to the calling code; the message is the processed xml document, which contains all the errors.    THROWTEXT  The errors are thrown as OAP exceptions back to the calling code, the message is an human readable text describing the errors.",
            "title": "ErrorHandlingModes"
        },
        {
            "location": "/p2p/expensesGateway/#successful-response",
            "text": "If a claim has been successfully imported, then two new attributes will be added the ExpenseClaim node.\n1. The first attribute is Status, and will have a value of OK\n2. The second attribute is DocumentNumber, and this will contain the claims internal number.",
            "title": "Successful Response"
        },
        {
            "location": "/p2p/expensesGateway/#note",
            "text": "If the XML contains multiple expense claims, then as long as the control block is valid, it is possible for some expense claims to be imported and other claims to be rejected.   Example  <pro:ExpenseClaim  Template='EXP' Status='OK' DocumentNumber='exp 52487'>",
            "title": "Note"
        },
        {
            "location": "/p2p/expensesGateway/#control-block-element",
            "text": "The attributes supported by the control block element within the xml are listed below:     Attribute Name  Description      DatabaseName  This is the title of the database as shown to the user on the logon screen.    UserName  The LoginID of the,PROACTIS user. This user must have,permission to create expense claims.    Password  Password for above user.    EncodedPassword  Encoded version of the password.  (No longer supported)    Company  The user must have access to the company.  If missing, the user\u2019s default company will be used.    Department  The user must have access to the department.  If missing, the user\u2019s default department will be used.    Version  Must be 1.0.0    WriteErrorsToDatabase  Not currently used.    AuthenticationMethod  PROACTIS or WINDOWS.  For WINDOWS authentication, the username and password must not be supplied.    ErrorHandlingMode  Describes how error messages will be handled.  See the error handling section for details.",
            "title": "Control Block Element"
        },
        {
            "location": "/p2p/expensesGateway/#notes_1",
            "text": "The control block must be provided",
            "title": "Notes"
        },
        {
            "location": "/p2p/expensesGateway/#expenseclaim-element",
            "text": "The attributes supported by the Import/ExpenseClaim element within the xml are listed below:     Attribute Name  Description      Template  The expense claims template\u2019s code used to create the claim.  The user must have permission to use this template.    Title  The title of the expense claim.    ClaimDate  The date of the claim.  If missing the date will default to today.  All dates are in the format yyyy-mm-dd    ClaimFor  The LoginID of the user we are entering the claim for. The user must have permission to enter claims for this user. If missing the claim is entered for the user as specified in the control block.    SaveMethod  How will the Expense claim be saved to the database.  If missing, it will default to submit. Possible settings are    SAVE.  Allows the user to manually edit the claim   SUBMIT. Submits the claim for authorisation. This option is not available if the \u2018Must submit claim for completion\u2019 user property is set.   CODING. Submits the claim for coding.  A user must be defined for this user for this option to be available.",
            "title": "ExpenseClaim Element"
        },
        {
            "location": "/p2p/expensesGateway/#notes_2",
            "text": "At least one claim must be provided",
            "title": "Notes"
        },
        {
            "location": "/p2p/expensesGateway/#comment-element",
            "text": "The attributes supported by the Import/ExpenseClaim/Comments/Comment and Import/ExpenseClaim/Items/Item/Comments/Comment elements within the xml are listed below:     Attribute Name  Description      ELEMENT  TEXT  The text of the comment",
            "title": "Comment Element"
        },
        {
            "location": "/p2p/expensesGateway/#notes_3",
            "text": "A claim can have any number of comments.",
            "title": "Notes"
        },
        {
            "location": "/p2p/expensesGateway/#reference-element",
            "text": "The attributes supported by the Import/ExpenseClaim/References/Reference and Import/ExpenseClaim/Items/Item/References/Reference elements within the xml are listed below:     Attribute Name  Description      Code  The reference's code    Caption  The reference\u2019s caption    Position  The references position    Value  The value of the reference",
            "title": "Reference Element"
        },
        {
            "location": "/p2p/expensesGateway/#notes_4",
            "text": "Any mandatory reference fields must be supplied  A reference can be identified by its Code, Caption or Position  The Code should be used if possible.",
            "title": "Notes"
        },
        {
            "location": "/p2p/expensesGateway/#item-element",
            "text": "The attributes supported by the Import/ExpenseClaim/Items/Item element within the xml are listed below:     Attribute Name  Description      PROACTISCode  The item must be available for use from the template.    Price  The item must allow the user to change the price, and the item\u2019s \u2018enter net value\u2019 setting must be turned off.  If missing, the price from the item master will be used.    Quantity  The item\u2019s \u2018Enter Net Value\u2019 setting must be turned off.  If missing,  a quantity of 1 will be assumed.    NetValue  The item\u2019s \u2018Enter Net Value\u2019 setting must be turned on.    ClaimDate  Must be in the format yyyy-mm-dd    Description  The item must allow the user to change the description. If missing, the description from the item master will be used.    Receipt  Does the user have a receipt?    TaxReceipt  Is the receipt a tax receipt?  (Receipt must be set to YES)    TaxCode  Allows a different tax code (Band1) to be used for the line. If missing uses the tax rules defined against the template.    TaxOverride  Allows the line tax to be manually set.",
            "title": "Item Element"
        },
        {
            "location": "/p2p/expensesGateway/#notes_5",
            "text": "The claim must contain at least one item.",
            "title": "Notes"
        },
        {
            "location": "/p2p/expensesGateway/#nominal-element",
            "text": "The attributes supported by the Import/ExpenseClaim/Items/Item/Nominals/Nominal element within the xml are listed below:     Attribute Name  Description      Ratio  Ratio of this nominal to the other nominals on the line.  If missing, the ratio will be set to 1.    AccountingElement1-8  The nominal must pass the standard PROACTIS rules for nominal validation.    NominalMask  Applies the coding from a nominal mask attached to the item.",
            "title": "Nominal Element"
        },
        {
            "location": "/p2p/expensesGateway/#notes_6",
            "text": "The item must contain at least one nominal  Any accounting elements attached to the item/user/department/template or company will be preset by default, in exactly the same way as normal expense claims are created.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/",
            "text": "Purchase Credit Note Gateway\n\n\nSummary\n\n\nThis document describes the structure of the XML file used for importing Purchase Credit Notes into PROACTIS.  It is assumed that the reader of the document is familiar both with XML and PROACTIS invoicing.\n\n\nThe document also describes the validation rules, which must be passed in order for the credit note to be imported, and the current limitations of the credit note gateway.\n\n\nThis document should be used in conjunction with the \nImportPurchaseCreditNotes.xsd\n xml schema\n\n\nLimitations of the Gateway\n\n\nThe initial release of the credit note gateway is subjected to the following limitations.\n\n\n It is not possible to set the supplier\u2019s branch on the credit note.  The default invoicing branch will be selected.\n\n The quantity on the credit note cannot exceed the quantity expected from the credit note unless the complete nominal details are specified in the import file.\n* If the quantity expected exceeds the quantity on the credit note, then the quantity will be allocated to the line nominals in a first-come-first-served basis.\n\n\n\n\nFor example:\n\n\nIf the parent credit note has a single line, with a quantity of 6 split equally across two nominals, and a credit note is imported containing a quantity of 4.\n\n The first nominal will be allocated a quantity of 3 \n\n The second nominal will be allocated the remaining quantity of 1\n\n\n\n\nWorked Example\n\n\nThis section of the document walks you through the creation of a simple credit note. \n\n\nXML Document\n\n\nThe xml document must start with the following to lines\n\n\n<?xml version=\"1.0\" ?>\n<pro:Import xmlns:pro=\"[http://www.proactis.com/xml/xml-ns](http://www.proactis.com/xml/xml-ns)\">\n\n\n\n\nAnd finish with\n\n\n</pro:Import>\n\n\n\n\nControl Block\n\n\nA control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.\n\n\nAn example control block is shown below.\n\n\n <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />\n\n\n\n\nThe XML gateway supports NT authentication, an example is shown below.\n\n\n <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />\n\n\n\n\nNB: The value of the \nAuthenticationMethod\n field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.\n\n\nCredit Note\n\n\nThe next section contains the details of the Credit Notes to be imported.  The gateway allows multiple documents to be included in a single xml document.  At least one credit note must be included.\n\n\n          <pro:CreditNote CreditNoteDate=\"2005-01-27\"              \n                          SupplierCreditNoteNumber=\"PR-234\" \n                          Template=\"CRED\" \n                          Tray=\"Standard\" \n                          GrossValue=\"100\">\n\n\n\n\n\nNotes\n\n\n\n\nThe template must be a credit note template, which the user has access to.\n\n\nThe tray must an invoicing tray, which the user has access to.\n\n\nIf the tray is missing, then the user\u2019s default tray is used.\n\n\nThe supplier credit note number must unique for this supplier\n\n\nThe credit note date should be in the format yyyy-mm-dd\n\n\n\n\nCredit Note Items\n\n\nThen the parent documents (credit notes and/or credit notes) and items against which the credit note will be matched are listed.\n\n\n <pro:ParentDocuments>                       \n  <pro:ParentDocument DocumentNumber=\"PORD10034\">\n    <pro:Item Position=\"1\" Value=\"1\"/>\n    <pro:Item Position=\"2\" Price=\"1\" Quantity=\"1\">\n      <pro:Nominals>\n        <pro:Nominal Code=\"ABC.XYZ\" Quantity=\"1\"/>\n      </pro:Nominals>\n    </pro:Item> \n  </pro:ParentDocument>\n</pro:ParentDocuments>\n\n\n\n\nNotes\n\n\n\n\nThe items refer to the item lines on the parent documents, not the nominal period lines.  Quantities will be allocated to the nominals on a first-come-first-severed basis if the details are not specified in the import document.\n\n\nDepending on the type of item, either the Price plus Quantity should be provided or the Value.\n\n\nThe position is used to specify the item on the purchase credit note or credit note.\n\n\nIf no parent documents are specified then the credit note can only be registered.  In this case, the supplier must set.\n\n\n\n\nTax\n\n\nAs well as the parent documents, the credit note must also include the tax details.\n\n\n<pro:TaxDetails>\n  <pro:Tax Band='VAT' BandNumber='1' Code='STD' GrossValue='1.18' TaxValue='0.18'/>\n </pro:TaxDetails>\n\n\n\n\nNotes\n\n\n\n\nIf the TaxValue is missing, then it will be automatically calculated.\n\n\nThe Band can be identified by either its name (Band) or number (BandNumber). If neither is specified then the first band is assumed.\n\n\n\n\nSupplier\n\n\nIf the supplier is a one-off supplier, then their address details must also be set.\n\n\n<pro:SupplierAddress  Name='Accounts' \n                      Line1='12 The close' \n                      Line2='East Kettlewell' \n                      Line3='' \n                      Line4='' \n                      Town='YORK' \n                      County='North Yorkshire' \n                      Country='UK'/>\n\n\n\n\nNotes\n\n\n\n\nThe address is ignored if it is not a one-off supplier\n\n\n\n\nComments\n\n\nIt is possible to add one or more comments to an credit note\n\n\n<pro:Comments>\n  <pro:Comment>Please pay quickly</pro:Comment>\n</pro:Comments>\n\n\n\n\nNotes\n\n\n\n\nIt is not currently possible to view comments from within the PROACTIS website.\n\n\n\n\nReferences\n\n\nIt is also possible to set the reference fields on the credit\n\n\n<pro:References>\n          <pro:Reference Caption='Bar code' \n                         Value='345-223-33'\n          <pro:Reference Position='2' \n                         Value='BACS'\n          <pro:Reference Code='Colour' \n                         Value='Red'\n</pro:References>\n\n\n\n\nNotes\n\n\n\n\nAny mandatory reference fields without default values must be set.\n\n\nEither the code, caption or the position can be specified\n\n\n\n\nThe credit then finishes with a closing tag:\n\n\n</pro:CreditNote>\n\n\n\n\nFinally the XML must be closed as follows:\n\n\n</pro:Import>\n\n\n\n\n\n\nError Handling\n\n\nBy default the import routine will return the XML amended to include status and error information.\n\n\nWhen a piece of data has been processed, then an extra attribute called status will be added to the node, this will contain the value OK, FAILED or REGISTERED.  OK means the credit note was fully imported successfully.  FAILED means the credit note could not be imported.  REGISTERED means the initial values of the credit note have been successfully imported but a problem occurred when trying to set specific item details requiring the credit note to be matched manually.\n\n\nNote: Nodes without this attribute have not been processed.\n\n\nhe supplied XML is first validated against the \nImportPurchaseCreditNotes.xsd\n schema.  If the credit note fails validation then the details are of the failure are appended to the supplied xml in the form of an errors block\n\n\nAn example errors block is shown below\n\n\n<pro:Errors>\n  <pro:Error Number='-1072898030' \n             Message='XML is not valid according to the schema. Element content is incomplete according to the DTD/Schema. Expecting: {http://www.proactis.com/xml/xml-ns}ParentDocument'/>\n</pro:Errors>\n\n\n\n\nErrors/Error\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nInternal Error Number - this may change between releases\n\n\n\n\n\n\nMessage\n\n\nThe error message (in English)\n\n\n\n\n\n\nSource\n\n\nOptional attribute describing where the error occurred.\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\n\n\nThe error block may occur anywhere within the document.  For example, if a line is invalid, the errors block will be appended to that line.\n\n\n\n\n\n\nIt is possible for an errors block to contain more than one error.\n\n\n\n\n\n\nErrorHandlingModes\n\n\nThe reporting of errors can be configured by setting the \nErrorHandlingMode\n attribute within the control block.  The table below describes the available modes\n\n\n\n\n\n\n\n\nMode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nEMBED\n\n\nThe processed XML is returned, but we the error message stored in additional \npro:Errors/pro:Error\n nodes. This is the default mode if the attribute is not supplied.\n\n\n\n\n\n\nTHROWERRORS\n\n\nThe errors are thrown as SOAP exceptions back to the calling code, the message is an xml document describing the errors\n\n\n\n\n\n\nTHROWXML\n\n\nThe errors are thrown as SOAP exceptions back to the calling code; the message is the processed xml document, which contains all the errors.\n\n\n\n\n\n\nTHROWTEXT\n\n\nThe errors are thrown as OAP exceptions back to the calling code, the message is an human readable text describing the errors.\n\n\n\n\n\n\n\n\nSuccessful Response\n\n\nIf a document has been successfully imported, then two new attributes will be added the document's node.\n1. The first attribute is Status, and will have a value of OK\n2. The second attribute is DocumentNumber, and this will contain the Credit Notes generated number.\n\n\nNote\n\n\n\n\nIf the XML contains multiple documents, then as long as the control block is valid, it is possible for some documents to be imported and other to be rejected.\n\n\n\n\n\n\nExample XML\n\n\nThe example below shows a basic single credit note being imported.  The credit note will be matched against the purchase invoice PINV10034. \n\n\n<?xml version=\"1.0\"?>\n<pro:Import xmlns:pro=\"http://www.proactis.com/xml/xml-ns\">\n          <pro:Control   Version=\"1.0.0\" \n                         DatabaseName=\"DEMO\"\n                         UserName=\"sysadmin\"\n                         Password=\"mypassword\"/>\n          <pro:CreditNote CreditNoteDate=\"2005-01-27\"              \n                          SupplierCreditNoteNumber=\"CN-234\" \n                          Template=\"CRED\" \n                          GrossValue=\"1\">\n                          <pro:ParentDocument>\n                            <pro:ParentDocument DocumentNumber=\"PINV10034\">\n                                    <pro:Item         Position=\"1\" \n                                                         Price=\"1\" \n                                                        Quantity=\"1\"/>\n                            </pro:ParentDocument>\n                          </pro:ParentDocuments>\n\n                          <pro:TaxDetails>\n                                    <pro:Tax Band=\"VAT\" \n                                             Code=\"Z\" \n                                             GrossValue=\"1\"/>\n                          </pro:TaxDetails>\n          </pro:CreditNote>\n</pro:Import>\n\n\n\n\n\n\nTroubleshooting\n\n\nError\n\nYou must have at least one tax code.  If there is no tax, then use a zero-rated or exempt code. \n\n\nSolution\n\nCheck the name of the tax band has been specified correctly.\n\n\nError\n\nThe XML returned by the gateway is blank. \n\n\nSolution\n\nAn error has occurred which could not be handled by the gateway.  Please check the Windows Event Log for additional details.\n\n\nError\n\nElement content is invalid according to the DTD/Schema.\n\n\nSolution\n\nThe supplied credit note XML is not in the required format.   Check that the structure of the XML matches the xsd schema.",
            "title": "Purchase Credit Notes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#purchase-credit-note-gateway",
            "text": "",
            "title": "Purchase Credit Note Gateway"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#summary",
            "text": "This document describes the structure of the XML file used for importing Purchase Credit Notes into PROACTIS.  It is assumed that the reader of the document is familiar both with XML and PROACTIS invoicing.  The document also describes the validation rules, which must be passed in order for the credit note to be imported, and the current limitations of the credit note gateway.  This document should be used in conjunction with the  ImportPurchaseCreditNotes.xsd  xml schema",
            "title": "Summary"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#limitations-of-the-gateway",
            "text": "The initial release of the credit note gateway is subjected to the following limitations.   It is not possible to set the supplier\u2019s branch on the credit note.  The default invoicing branch will be selected.  The quantity on the credit note cannot exceed the quantity expected from the credit note unless the complete nominal details are specified in the import file.\n* If the quantity expected exceeds the quantity on the credit note, then the quantity will be allocated to the line nominals in a first-come-first-served basis.",
            "title": "Limitations of the Gateway"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#worked-example",
            "text": "This section of the document walks you through the creation of a simple credit note.",
            "title": "Worked Example"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#xml-document",
            "text": "The xml document must start with the following to lines  <?xml version=\"1.0\" ?>\n<pro:Import xmlns:pro=\"[http://www.proactis.com/xml/xml-ns](http://www.proactis.com/xml/xml-ns)\">  And finish with  </pro:Import>",
            "title": "XML Document"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#control-block",
            "text": "A control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.  An example control block is shown below.   <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />  The XML gateway supports NT authentication, an example is shown below.   <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />  NB: The value of the  AuthenticationMethod  field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.",
            "title": "Control Block"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#credit-note",
            "text": "The next section contains the details of the Credit Notes to be imported.  The gateway allows multiple documents to be included in a single xml document.  At least one credit note must be included.            <pro:CreditNote CreditNoteDate=\"2005-01-27\"              \n                          SupplierCreditNoteNumber=\"PR-234\" \n                          Template=\"CRED\" \n                          Tray=\"Standard\" \n                          GrossValue=\"100\">",
            "title": "Credit Note"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#notes",
            "text": "The template must be a credit note template, which the user has access to.  The tray must an invoicing tray, which the user has access to.  If the tray is missing, then the user\u2019s default tray is used.  The supplier credit note number must unique for this supplier  The credit note date should be in the format yyyy-mm-dd",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#credit-note-items",
            "text": "Then the parent documents (credit notes and/or credit notes) and items against which the credit note will be matched are listed.   <pro:ParentDocuments>                       \n  <pro:ParentDocument DocumentNumber=\"PORD10034\">\n    <pro:Item Position=\"1\" Value=\"1\"/>\n    <pro:Item Position=\"2\" Price=\"1\" Quantity=\"1\">\n      <pro:Nominals>\n        <pro:Nominal Code=\"ABC.XYZ\" Quantity=\"1\"/>\n      </pro:Nominals>\n    </pro:Item> \n  </pro:ParentDocument>\n</pro:ParentDocuments>",
            "title": "Credit Note Items"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#notes_1",
            "text": "The items refer to the item lines on the parent documents, not the nominal period lines.  Quantities will be allocated to the nominals on a first-come-first-severed basis if the details are not specified in the import document.  Depending on the type of item, either the Price plus Quantity should be provided or the Value.  The position is used to specify the item on the purchase credit note or credit note.  If no parent documents are specified then the credit note can only be registered.  In this case, the supplier must set.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#tax",
            "text": "As well as the parent documents, the credit note must also include the tax details.  <pro:TaxDetails>\n  <pro:Tax Band='VAT' BandNumber='1' Code='STD' GrossValue='1.18' TaxValue='0.18'/>\n </pro:TaxDetails>",
            "title": "Tax"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#notes_2",
            "text": "If the TaxValue is missing, then it will be automatically calculated.  The Band can be identified by either its name (Band) or number (BandNumber). If neither is specified then the first band is assumed.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#supplier",
            "text": "If the supplier is a one-off supplier, then their address details must also be set.  <pro:SupplierAddress  Name='Accounts' \n                      Line1='12 The close' \n                      Line2='East Kettlewell' \n                      Line3='' \n                      Line4='' \n                      Town='YORK' \n                      County='North Yorkshire' \n                      Country='UK'/>",
            "title": "Supplier"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#notes_3",
            "text": "The address is ignored if it is not a one-off supplier",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#comments",
            "text": "It is possible to add one or more comments to an credit note  <pro:Comments>\n  <pro:Comment>Please pay quickly</pro:Comment>\n</pro:Comments>",
            "title": "Comments"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#notes_4",
            "text": "It is not currently possible to view comments from within the PROACTIS website.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#references",
            "text": "It is also possible to set the reference fields on the credit  <pro:References>\n          <pro:Reference Caption='Bar code' \n                         Value='345-223-33'\n          <pro:Reference Position='2' \n                         Value='BACS'\n          <pro:Reference Code='Colour' \n                         Value='Red'\n</pro:References>",
            "title": "References"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#notes_5",
            "text": "Any mandatory reference fields without default values must be set.  Either the code, caption or the position can be specified   The credit then finishes with a closing tag:  </pro:CreditNote>  Finally the XML must be closed as follows:  </pro:Import>",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#error-handling",
            "text": "By default the import routine will return the XML amended to include status and error information.  When a piece of data has been processed, then an extra attribute called status will be added to the node, this will contain the value OK, FAILED or REGISTERED.  OK means the credit note was fully imported successfully.  FAILED means the credit note could not be imported.  REGISTERED means the initial values of the credit note have been successfully imported but a problem occurred when trying to set specific item details requiring the credit note to be matched manually.  Note: Nodes without this attribute have not been processed.  he supplied XML is first validated against the  ImportPurchaseCreditNotes.xsd  schema.  If the credit note fails validation then the details are of the failure are appended to the supplied xml in the form of an errors block  An example errors block is shown below  <pro:Errors>\n  <pro:Error Number='-1072898030' \n             Message='XML is not valid according to the schema. Element content is incomplete according to the DTD/Schema. Expecting: {http://www.proactis.com/xml/xml-ns}ParentDocument'/>\n</pro:Errors>",
            "title": "Error Handling"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#errorserror",
            "text": "Attribute Name  Description      Number  Internal Error Number - this may change between releases    Message  The error message (in English)    Source  Optional attribute describing where the error occurred.",
            "title": "Errors/Error"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#notes_6",
            "text": "The error block may occur anywhere within the document.  For example, if a line is invalid, the errors block will be appended to that line.    It is possible for an errors block to contain more than one error.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#errorhandlingmodes",
            "text": "The reporting of errors can be configured by setting the  ErrorHandlingMode  attribute within the control block.  The table below describes the available modes     Mode  Description      EMBED  The processed XML is returned, but we the error message stored in additional  pro:Errors/pro:Error  nodes. This is the default mode if the attribute is not supplied.    THROWERRORS  The errors are thrown as SOAP exceptions back to the calling code, the message is an xml document describing the errors    THROWXML  The errors are thrown as SOAP exceptions back to the calling code; the message is the processed xml document, which contains all the errors.    THROWTEXT  The errors are thrown as OAP exceptions back to the calling code, the message is an human readable text describing the errors.",
            "title": "ErrorHandlingModes"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#successful-response",
            "text": "If a document has been successfully imported, then two new attributes will be added the document's node.\n1. The first attribute is Status, and will have a value of OK\n2. The second attribute is DocumentNumber, and this will contain the Credit Notes generated number.",
            "title": "Successful Response"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#note",
            "text": "If the XML contains multiple documents, then as long as the control block is valid, it is possible for some documents to be imported and other to be rejected.",
            "title": "Note"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#example-xml",
            "text": "The example below shows a basic single credit note being imported.  The credit note will be matched against the purchase invoice PINV10034.   <?xml version=\"1.0\"?>\n<pro:Import xmlns:pro=\"http://www.proactis.com/xml/xml-ns\">\n          <pro:Control   Version=\"1.0.0\" \n                         DatabaseName=\"DEMO\"\n                         UserName=\"sysadmin\"\n                         Password=\"mypassword\"/>\n          <pro:CreditNote CreditNoteDate=\"2005-01-27\"              \n                          SupplierCreditNoteNumber=\"CN-234\" \n                          Template=\"CRED\" \n                          GrossValue=\"1\">\n                          <pro:ParentDocument>\n                            <pro:ParentDocument DocumentNumber=\"PINV10034\">\n                                    <pro:Item         Position=\"1\" \n                                                         Price=\"1\" \n                                                        Quantity=\"1\"/>\n                            </pro:ParentDocument>\n                          </pro:ParentDocuments>\n\n                          <pro:TaxDetails>\n                                    <pro:Tax Band=\"VAT\" \n                                             Code=\"Z\" \n                                             GrossValue=\"1\"/>\n                          </pro:TaxDetails>\n          </pro:CreditNote>\n</pro:Import>",
            "title": "Example XML"
        },
        {
            "location": "/p2p/purchaseCreditNoteGateway/#troubleshooting",
            "text": "Error \nYou must have at least one tax code.  If there is no tax, then use a zero-rated or exempt code.   Solution \nCheck the name of the tax band has been specified correctly.  Error \nThe XML returned by the gateway is blank.   Solution \nAn error has occurred which could not be handled by the gateway.  Please check the Windows Event Log for additional details.  Error \nElement content is invalid according to the DTD/Schema.  Solution \nThe supplied credit note XML is not in the required format.   Check that the structure of the XML matches the xsd schema.",
            "title": "Troubleshooting"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/",
            "text": "Purchase Invoice Gateway\n\n\nSummary\n\n\nThis document describes the structure of the XML file used for importing Purchase Invoices into PROACTIS.  It is assumed that the reader of the document is familiar both with XML and PROACTIS invoicing.\n\n\nThe document also describes the validation rules, which must be passed in order for the invoice to be imported, and the current limitations of the invoice matching gateway.\n\n\nThis document should be used in conjunction with the \nImportPurchaseInvoices.xsd\n xml schema\n\n\nLimitations of the Gateway\n\n\nThe current release of the invoice gateway is subjected to the following invoice matching limitations.  \n\n\n\n\nIt is not possible to set the supplier\u2019s branch on the invoice.  The default invoicing branch will be selected.\n\n\nThe imported invoice cannot contain items which are not on the original orders.  Unexpected items are NOT supported.\n\n\nThe quantity on the invoice cannot exceed the quantity expected from the order unless complete nominal information is included in the import file.\n\n\nThe Invoice Gateway only supports the import of external invoices.  To import internal invoices, use the Internal Invoice Gateway.\n\n\nIf the quantity on an order exceeds the quantity on the invoice, then the quantity will be allocated to the line nominals in a first-come-first-served basis.\n\n\nWithholding tax is not supported\n\n\nAs with the other XML gateways, an XML document can only contain documents for a single company.\n\n\nAs with the other XML gateways, an XML document can only contain documents for a single department.\n\n\nThe schema, documentation and error messages are all written in English.\n\n\n\n\n\n\nOrder Based Invoices\n\n\nThis section of the document walks you through the creation of a simple order based invoice. \n\n\nXML Document\n\n\nThe xml document must start with the following to lines\n\n\n<?xml version=\"1.0\" ?>\n<pro:Import xmlns:pro=\"http://www.proactis.com/xml/xml-ns\">\n\n\n\n\nAnd finish with\n\n\n</pro:Import>\n\n\n\n\nControl Block\n\n\nA control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.\n\n\nAn example control block is shown below.\n\n\n <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />\n\n\n\n\nThe XML gateway supports NT authentication, an example is shown below.\n\n\n <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />\n\n\n\n\nNB: The value of the \nAuthenticationMethod\n field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.\n\n\nInvoice\n\n\nThe next section contains the details of the invoices to be imported.  The gateway allows multiple documents to be included in a single xml document.  At least one invoice must be included.\n\n\n<pro:Invoice  InvoiceDate='2003-08-27'              \n              SupplierInvoiceNumber='PR-234' \n              Template='PINV' \n              Tray='Standard' \n              GrossValue='1'\n              Supplier='510632'\n              ImageReference='10'/>\n\n\n\n\nNotes\n\n\n\n\nThe template must be an invoicing template, which the user has access to.\n\n\nIf the template is not provided, then the gateway attempts to automatically select one.  This is only possible if the user only has access to a single template.  In order to pick a template, the gateway must first determine if the invoice is a stand-alone or order based.\n\n\nThe gateway assumes the invoice is a standalone invoice if either\n\n\nOne or more non-order items are supplied\n\n\nThe authorisation pool is specified\n\n\n\n\nOtherwise, the invoice is treated as an order based invoice.\n\n\n\n\nThe tray must an invoicing tray, which the user has access to.\n\n\nIf the tray is missing, then the user\u2019s default tray is used.\n\n\nThe supplier invoice number must unique for this supplier\n\n\nThe invoice date should be in the format yyyy-mm-dd\n\n\nThe ImageReference value also supports Settlement Discount, so if you have settlement discount switched on; use this field to enter the percentage discount \u2013 this must be a number only if settlement discount is active.\n\n\nPost-match authorisation is supported by the invoice XML gateway \u2013 simply activate this property on the supplier and set the supplier on the invoice\u2026 post-match authorisation will be adopted.\n\n\nThe Supplier attribute must be set if the invoice has no related purchase orders, or the supplier is a one-off supplier.\n\n\nThe authorisation pool must be supplied if the template is used for standalone invoices.  (The pool can\u2019t be supplied if the template isn\u2019t used for standalone invoices).\n\n\n\n\nInvoice Items\n\n\nThen the orders and items against which the invoice will be matched are listed.\n\n\n<pro:ParentOrders>                   \n  <pro:ParentOrder    OrderNumber='PORD10034'>\n    <pro:Item    Position='1'   Value='1'/>\n    <pro:Item    Position='2'   Price='1'  Quantity='1'>\n              <pro:Nominals>\n                      <pro:Nominal   Code='ABC.XYZ'   Quantity='1' CommitmentDate='2005-12-18' />\n              </pro:Nominals>\n    </pro:Item> \n</pro:ParentOrder>\n</pro:ParentOrders>\n\n\n\n\nNotes\n\n\n\n\nThe items refer to the item lines on the orders, not the nominal period lines.  Quantities will be allocated to the nominals on a first-come-first-severed basis if the details are not specified in the import document.\n\n\nDepending on the type of item, either the Price plus Quantity should be provided or the Value.\n\n\nThe position is used to specify the item on the purchase order or an order amendment. For example, if the order has three lines, and has an amendment for an additional line, then a position of 4 would refer to the new line on the order amendment.\n\n\nIf no parent orders are specified then the invoice can only be registered.  In this case, the supplier must set.\n\n\nIn additional to the nominal coding, a commitment date can also be specified to help identify the order nominal to invoice.\n\n\n\n\nTax\n\n\nAs well as the purchase orders, the invoice must also include the tax details.\n\n\n<pro:TaxDetails>\n  <pro:Tax Band='VAT' BandNumber='1' Code='STD' GrossValue='1.18' TaxValue='0.18'/>\n </pro:TaxDetails>\n\n\n\n\nNotes\n\n\n\n\nIf the TaxValue is missing, then it will be automatically calculated.\n\n\nThe Band can be identified by either its name (Band) or number (BandNumber). If neither is specified then the first band is assumed.\n\n\n\n\nSupplier\n\n\nIf the supplier is a one-off supplier, then their address details must also be set.\n\n\n<pro:SupplierAddress  Name='Accounts' \n                      Line1='12 The close' \n                      Line2='East Kettlewell' \n                      Line3='' \n                      Line4='' \n                      Town='YORK' \n                      County='North Yorkshire' \n                      Country='UK'/>\n\n\n\n\nNotes\n\n\n\n\nThe address is ignored if it is not a one-off supplier\n\n\n\n\nComments\n\n\nIt is possible to add one or more comments to an invoice\n\n\n<pro:Comments>\n  <pro:Comment>Please pay quickly</pro:Comment>\n</pro:Comments>\n\n\n\n\nNotes\n\n\n\n\nIt is not currently possible to view comments from within the PROACTIS website.\n\n\n\n\nReferences\n\n\nIt is also possible to set the reference fields on the invoice\n\n\n<pro:References>\n          <pro:Reference Caption='Bar code' \n                         Value='345-223-33'\n          <pro:Reference Position='2' \n                         Value='BACS'\n          <pro:Reference Code='Colour' \n                         Value='Red'\n</pro:References>\n\n\n\n\nNotes\n\n\n\n\nAny mandatory reference fields without default values must be set.\n\n\nEither the code, caption or the position can be specified\n\n\n\n\nThe invoice then finishes with a closing tag:\n\n\n</pro:Invoice>\n\n\n\n\nFinally the XML must be closed as follows:\n\n\n</pro:Import>\n\n\n\n\n\n\nStandalone Invoices\n\n\nThis section of the document walks you through the creation of a simple standalone invoice. This is a type of invoices which is not matched to parent purchase orders.\n\n\nThe gateway assumes the invoice is a standalone invoice if \n\n One or more non-order items are supplied\n\n A standalone purchase invoice is specified.\n* The authorisation pool is specified\n\n\nControl Block\n\n\nA control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.\n\n\nAn example control block is shown below.\n\n\n <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />\n\n\n\n\nThe XML gateway supports NT authentication, an example is shown below.\n\n\n <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />\n\n\n\n\nNB: The value of the \nAuthenticationMethod\n field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.\n\n\nInvoice\n\n\nThe next section contains the details of the invoices to be imported.  The gateway allows multiple documents to be included in a single xml document.  At least one invoice must be included.\n\n\n<pro:Invoice InvoiceDate=\"2003-08-27\"              \n            SupplierInvoiceNumber=\"PR-234\" \n            Template=\"PINV\" \n            Tray=\"Standard\" \n            GrossValue=\"1\"\n            AuthorisationPool=\"PISA\"\n            Supplier=\"510632\"\nImageReference=\"10\"/>\n\n\n\n\nNotes\n\n\n\n\nThe template must be a standalone invoicing template, which the user has access to.\n\n\nIf the template is not provided, then the gateway attempts to automatically select one.  This is only possible if the user only has access to a single template. \n\n\nThe tray must an invoicing tray, which the user has access to.\n\n\nIf the tray is missing, then the user\u2019s default tray is used.\n\n\nThe supplier invoice number must unique for this supplier\n\n\nThe invoice date should be in the format yyyy-mm-dd\n\n\nThe ImageReference value also supports Settlement Discount, so if you have settlement discount switched on; use this field to enter the percentage discount \u2013 this must be a number only if settlement discount is active.\n\n\nPost-match authorisation is supported by the invoice XML gateway \u2013 simply activate this property on the supplier and set the supplier on the invoice\u2026 post-match authorisation will be adopted.\n\n\nThe Supplier attribute must be supplied for standalone invoices.\n\n\nThe authorisation pool must be supplied if the template is used for standalone invoices and the company level setting is configured to use pools for authorisation.  (This is no longer recommended)\n\n\n\n\nStandalone Tax Details\n\n\nThe next section contains the summary Tax information.\n\n\n <pro:TaxDetails>\n                  <pro:Tax Band=\"UKVAT\" \n                           BandNumber=\"1\"\n                           Code=\"ST\"\n                           GrossValue=\"11.75\"/>\n          </pro:TaxDetails> \n\n\n\n\nNotes\n\n\n\n\nThe Band can be identified by either its name (Band) or number (BandNumber). If neither is specified then the first band is assumed.\n\n\n\n\nStandalone Line Detail\n\n\nThe line details can now be specified.  \n\n\n            <pro:NonOrderItems>\n                  <pro:NonOrderItem SelectUsingPROACTISCode='TEST' \n                                    SelectUsingDescription='A test item' \n                                    SelectUsingSupplierItemCode='TEST001'\n                                    Price='1' \n                                    Quantity='10'\n                                    Description='my  test item'\n                                    NetValue=''\n                                    UnitOfMeasure='each'\n                                  ShortCutEntry='ABC'>\n\n\n\n\nNotes\n\n\n\n\n\n\nItems are identified using a combination of the following attributes.  At least one attribute must be supplied, and the item must be uniquely identified.\n\n\n\n\nSelectUsingPROACTISCode\n\n\nSelectUsingDescription\n\n\nSelectUsingSupplierItemCode\n\n\n\n\n\n\n\n\nFor goods items the Price and Quantity can be specified.\n\n\n\n\nFor service items (data-entry-by-value) the net value can be specified.\n\n\nThe description and unit of measure can be replaced on all items regardless of the item master settings.\n\n\nThe short cut entry can be used to default the coding on all nominal lines.  The short cut list must be specified on the invoice template.\n\n\n\n\nStandalone Line Nominals\n\n\nA line can optionally have its nominal coding specified.\n\n\n                <pro:NonOrderItemNominals>\n                        <pro:NonOrderItemNominal AccountingElement1='1111'                                                                 \n                                                 AccountingElement2='AAAA' \n                                                 NominalMask='DEFAULT' \n                                                 ShortCutEntry='My entry' \n                                                 Quantity='10'>\n\n\n\n\nNotes\n\n\n\n\nIf no nominals are specified, then a single nominal line will automatically be created. It\u2019s coding will be provided by PROACTIS.\n\n\nThe NominalMask must refer to a nominal mask attached to the item master.\n\n\nThe quantities must sum to the quantities set against the parent item.\n\n\n\n\n\n\nError Handling\n\n\nBy default the import routine will return the XML amended to include status and error information.\n\n\nWhen a piece of data has been processed, then an extra attribute called status will be added to the node, this will contain the value OK, FAILED or REGISTERED.  OK means the invoice was fully imported successfully.  FAILED means the invoice could not be imported.  REGISTERED means the initial values of the invoice have been successfully imported but a problem occurred when trying to set specific item details requiring the invoice to be matched manually.\n\n\nNote: Nodes without this attribute have not been processed.\n\n\nhe supplied XML is first validated against the \nImportPurchaseInvoices.xsd\n schema.  If the invoice fails validation then the details are of the failure are appended to the supplied xml in the form of an errors block\n\n\nAn example errors block is shown below\n\n\n<pro:Errors>\n  <pro:Error Number='-1072898030' \n             Message='XML is not valid according to the schema. Element content is incomplete according to the DTD/Schema. Expecting: {http://www.proactis.com/xml/xml-ns}Invoice'/>\n</pro:Errors>\n\n\n\n\nErrors/Error\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nInternal Error Number - this may change between releases\n\n\n\n\n\n\nMessage\n\n\nThe error message (in English)\n\n\n\n\n\n\nSource\n\n\nOptional attribute describing where the error occurred.\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\n\n\nThe error block may occur anywhere within the document.  For example, if a line is invalid, the errors block will be appended to that line.\n\n\n\n\n\n\nIt is possible for an errors block to contain more than one error.\n\n\n\n\n\n\nErrorHandlingModes\n\n\nThe reporting of errors can be configured by setting the \nErrorHandlingMode\n attribute within the control block.  The table below describes the available modes\n\n\n\n\n\n\n\n\nMode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nEMBED\n\n\nThe processed XML is returned, but we the error message stored in additional \npro:Errors/pro:Error\n nodes. This is the default mode if the attribute is not supplied.\n\n\n\n\n\n\nTHROWERRORS\n\n\nThe errors are thrown as SOAP exceptions back to the calling code, the message is an xml document describing the errors\n\n\n\n\n\n\nTHROWXML\n\n\nThe errors are thrown as SOAP exceptions back to the calling code; the message is the processed xml document, which contains all the errors.\n\n\n\n\n\n\nTHROWTEXT\n\n\nThe errors are thrown as OAP exceptions back to the calling code, the message is an human readable text describing the errors.\n\n\n\n\n\n\n\n\nSuccessful Response\n\n\nIf a document has been successfully imported, then two new attributes will be added the document's node.\n\n\n\n\nThe first attribute is Status, and will have a value of OK\n\n\nThe second attribute is DocumentNumber, and this will contain the invoices generated number.\n\n\n\n\nNote\n\n\n\n\nIf the XML contains multiple documents, then as long as the control block is valid, it is possible for some documents to be imported and other to be rejected.\n\n\n\n\nExample Code\n\n\nSee the following example applications:\n\n\n\n\nCreate Standalone Invoice",
            "title": "Purchase Invoices"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#purchase-invoice-gateway",
            "text": "",
            "title": "Purchase Invoice Gateway"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#summary",
            "text": "This document describes the structure of the XML file used for importing Purchase Invoices into PROACTIS.  It is assumed that the reader of the document is familiar both with XML and PROACTIS invoicing.  The document also describes the validation rules, which must be passed in order for the invoice to be imported, and the current limitations of the invoice matching gateway.  This document should be used in conjunction with the  ImportPurchaseInvoices.xsd  xml schema",
            "title": "Summary"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#limitations-of-the-gateway",
            "text": "The current release of the invoice gateway is subjected to the following invoice matching limitations.     It is not possible to set the supplier\u2019s branch on the invoice.  The default invoicing branch will be selected.  The imported invoice cannot contain items which are not on the original orders.  Unexpected items are NOT supported.  The quantity on the invoice cannot exceed the quantity expected from the order unless complete nominal information is included in the import file.  The Invoice Gateway only supports the import of external invoices.  To import internal invoices, use the Internal Invoice Gateway.  If the quantity on an order exceeds the quantity on the invoice, then the quantity will be allocated to the line nominals in a first-come-first-served basis.  Withholding tax is not supported  As with the other XML gateways, an XML document can only contain documents for a single company.  As with the other XML gateways, an XML document can only contain documents for a single department.  The schema, documentation and error messages are all written in English.",
            "title": "Limitations of the Gateway"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#order-based-invoices",
            "text": "This section of the document walks you through the creation of a simple order based invoice.",
            "title": "Order Based Invoices"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#xml-document",
            "text": "The xml document must start with the following to lines  <?xml version=\"1.0\" ?>\n<pro:Import xmlns:pro=\"http://www.proactis.com/xml/xml-ns\">  And finish with  </pro:Import>",
            "title": "XML Document"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#control-block",
            "text": "A control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.  An example control block is shown below.   <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />  The XML gateway supports NT authentication, an example is shown below.   <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />  NB: The value of the  AuthenticationMethod  field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.",
            "title": "Control Block"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#invoice",
            "text": "The next section contains the details of the invoices to be imported.  The gateway allows multiple documents to be included in a single xml document.  At least one invoice must be included.  <pro:Invoice  InvoiceDate='2003-08-27'              \n              SupplierInvoiceNumber='PR-234' \n              Template='PINV' \n              Tray='Standard' \n              GrossValue='1'\n              Supplier='510632'\n              ImageReference='10'/>",
            "title": "Invoice"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes",
            "text": "The template must be an invoicing template, which the user has access to.  If the template is not provided, then the gateway attempts to automatically select one.  This is only possible if the user only has access to a single template.  In order to pick a template, the gateway must first determine if the invoice is a stand-alone or order based.  The gateway assumes the invoice is a standalone invoice if either  One or more non-order items are supplied  The authorisation pool is specified   Otherwise, the invoice is treated as an order based invoice.   The tray must an invoicing tray, which the user has access to.  If the tray is missing, then the user\u2019s default tray is used.  The supplier invoice number must unique for this supplier  The invoice date should be in the format yyyy-mm-dd  The ImageReference value also supports Settlement Discount, so if you have settlement discount switched on; use this field to enter the percentage discount \u2013 this must be a number only if settlement discount is active.  Post-match authorisation is supported by the invoice XML gateway \u2013 simply activate this property on the supplier and set the supplier on the invoice\u2026 post-match authorisation will be adopted.  The Supplier attribute must be set if the invoice has no related purchase orders, or the supplier is a one-off supplier.  The authorisation pool must be supplied if the template is used for standalone invoices.  (The pool can\u2019t be supplied if the template isn\u2019t used for standalone invoices).",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#invoice-items",
            "text": "Then the orders and items against which the invoice will be matched are listed.  <pro:ParentOrders>                   \n  <pro:ParentOrder    OrderNumber='PORD10034'>\n    <pro:Item    Position='1'   Value='1'/>\n    <pro:Item    Position='2'   Price='1'  Quantity='1'>\n              <pro:Nominals>\n                      <pro:Nominal   Code='ABC.XYZ'   Quantity='1' CommitmentDate='2005-12-18' />\n              </pro:Nominals>\n    </pro:Item> \n</pro:ParentOrder>\n</pro:ParentOrders>",
            "title": "Invoice Items"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_1",
            "text": "The items refer to the item lines on the orders, not the nominal period lines.  Quantities will be allocated to the nominals on a first-come-first-severed basis if the details are not specified in the import document.  Depending on the type of item, either the Price plus Quantity should be provided or the Value.  The position is used to specify the item on the purchase order or an order amendment. For example, if the order has three lines, and has an amendment for an additional line, then a position of 4 would refer to the new line on the order amendment.  If no parent orders are specified then the invoice can only be registered.  In this case, the supplier must set.  In additional to the nominal coding, a commitment date can also be specified to help identify the order nominal to invoice.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#tax",
            "text": "As well as the purchase orders, the invoice must also include the tax details.  <pro:TaxDetails>\n  <pro:Tax Band='VAT' BandNumber='1' Code='STD' GrossValue='1.18' TaxValue='0.18'/>\n </pro:TaxDetails>",
            "title": "Tax"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_2",
            "text": "If the TaxValue is missing, then it will be automatically calculated.  The Band can be identified by either its name (Band) or number (BandNumber). If neither is specified then the first band is assumed.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#supplier",
            "text": "If the supplier is a one-off supplier, then their address details must also be set.  <pro:SupplierAddress  Name='Accounts' \n                      Line1='12 The close' \n                      Line2='East Kettlewell' \n                      Line3='' \n                      Line4='' \n                      Town='YORK' \n                      County='North Yorkshire' \n                      Country='UK'/>",
            "title": "Supplier"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_3",
            "text": "The address is ignored if it is not a one-off supplier",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#comments",
            "text": "It is possible to add one or more comments to an invoice  <pro:Comments>\n  <pro:Comment>Please pay quickly</pro:Comment>\n</pro:Comments>",
            "title": "Comments"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_4",
            "text": "It is not currently possible to view comments from within the PROACTIS website.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#references",
            "text": "It is also possible to set the reference fields on the invoice  <pro:References>\n          <pro:Reference Caption='Bar code' \n                         Value='345-223-33'\n          <pro:Reference Position='2' \n                         Value='BACS'\n          <pro:Reference Code='Colour' \n                         Value='Red'\n</pro:References>",
            "title": "References"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_5",
            "text": "Any mandatory reference fields without default values must be set.  Either the code, caption or the position can be specified   The invoice then finishes with a closing tag:  </pro:Invoice>  Finally the XML must be closed as follows:  </pro:Import>",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#standalone-invoices",
            "text": "This section of the document walks you through the creation of a simple standalone invoice. This is a type of invoices which is not matched to parent purchase orders.  The gateway assumes the invoice is a standalone invoice if   One or more non-order items are supplied  A standalone purchase invoice is specified.\n* The authorisation pool is specified",
            "title": "Standalone Invoices"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#control-block_1",
            "text": "A control block must then be included so that the gateway knows which database and company to import the documents into.  This has the same structure as the control block for the other XML gateways.  An example control block is shown below.   <pro:Control DatabaseName=\"PROACTIS\"\n              UserName=\"DAVIDBETTERIDGE\"\n              Password=\"mysecret\"\n              Company=\"MAIN\"\n              Department=\"SOLUTIONS\"\n              Version=\"1.0.0\" />  The XML gateway supports NT authentication, an example is shown below.   <pro:Control    DatabaseName=\"PROACTIS\\_LIVE\"\n                 AuthenticationMethod=\"WINDOWS\"\n                 Company=\"MAIN\"\n                 Department=\"SOLUTIONS\"\n                 Version=\"1.0.0\" />  NB: The value of the  AuthenticationMethod  field can be WINDOWS or PROACTIS (which must be expressed in Upper Case).  If this field is missing, the gateway will default to PROACTIS and work as before.",
            "title": "Control Block"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#invoice_1",
            "text": "The next section contains the details of the invoices to be imported.  The gateway allows multiple documents to be included in a single xml document.  At least one invoice must be included.  <pro:Invoice InvoiceDate=\"2003-08-27\"              \n            SupplierInvoiceNumber=\"PR-234\" \n            Template=\"PINV\" \n            Tray=\"Standard\" \n            GrossValue=\"1\"\n            AuthorisationPool=\"PISA\"\n            Supplier=\"510632\"\nImageReference=\"10\"/>",
            "title": "Invoice"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_6",
            "text": "The template must be a standalone invoicing template, which the user has access to.  If the template is not provided, then the gateway attempts to automatically select one.  This is only possible if the user only has access to a single template.   The tray must an invoicing tray, which the user has access to.  If the tray is missing, then the user\u2019s default tray is used.  The supplier invoice number must unique for this supplier  The invoice date should be in the format yyyy-mm-dd  The ImageReference value also supports Settlement Discount, so if you have settlement discount switched on; use this field to enter the percentage discount \u2013 this must be a number only if settlement discount is active.  Post-match authorisation is supported by the invoice XML gateway \u2013 simply activate this property on the supplier and set the supplier on the invoice\u2026 post-match authorisation will be adopted.  The Supplier attribute must be supplied for standalone invoices.  The authorisation pool must be supplied if the template is used for standalone invoices and the company level setting is configured to use pools for authorisation.  (This is no longer recommended)",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#standalone-tax-details",
            "text": "The next section contains the summary Tax information.   <pro:TaxDetails>\n                  <pro:Tax Band=\"UKVAT\" \n                           BandNumber=\"1\"\n                           Code=\"ST\"\n                           GrossValue=\"11.75\"/>\n          </pro:TaxDetails>",
            "title": "Standalone Tax Details"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_7",
            "text": "The Band can be identified by either its name (Band) or number (BandNumber). If neither is specified then the first band is assumed.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#standalone-line-detail",
            "text": "The line details can now be specified.                <pro:NonOrderItems>\n                  <pro:NonOrderItem SelectUsingPROACTISCode='TEST' \n                                    SelectUsingDescription='A test item' \n                                    SelectUsingSupplierItemCode='TEST001'\n                                    Price='1' \n                                    Quantity='10'\n                                    Description='my  test item'\n                                    NetValue=''\n                                    UnitOfMeasure='each'\n                                  ShortCutEntry='ABC'>",
            "title": "Standalone Line Detail"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_8",
            "text": "Items are identified using a combination of the following attributes.  At least one attribute must be supplied, and the item must be uniquely identified.   SelectUsingPROACTISCode  SelectUsingDescription  SelectUsingSupplierItemCode     For goods items the Price and Quantity can be specified.   For service items (data-entry-by-value) the net value can be specified.  The description and unit of measure can be replaced on all items regardless of the item master settings.  The short cut entry can be used to default the coding on all nominal lines.  The short cut list must be specified on the invoice template.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#standalone-line-nominals",
            "text": "A line can optionally have its nominal coding specified.                  <pro:NonOrderItemNominals>\n                        <pro:NonOrderItemNominal AccountingElement1='1111'                                                                 \n                                                 AccountingElement2='AAAA' \n                                                 NominalMask='DEFAULT' \n                                                 ShortCutEntry='My entry' \n                                                 Quantity='10'>",
            "title": "Standalone Line Nominals"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_9",
            "text": "If no nominals are specified, then a single nominal line will automatically be created. It\u2019s coding will be provided by PROACTIS.  The NominalMask must refer to a nominal mask attached to the item master.  The quantities must sum to the quantities set against the parent item.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#error-handling",
            "text": "By default the import routine will return the XML amended to include status and error information.  When a piece of data has been processed, then an extra attribute called status will be added to the node, this will contain the value OK, FAILED or REGISTERED.  OK means the invoice was fully imported successfully.  FAILED means the invoice could not be imported.  REGISTERED means the initial values of the invoice have been successfully imported but a problem occurred when trying to set specific item details requiring the invoice to be matched manually.  Note: Nodes without this attribute have not been processed.  he supplied XML is first validated against the  ImportPurchaseInvoices.xsd  schema.  If the invoice fails validation then the details are of the failure are appended to the supplied xml in the form of an errors block  An example errors block is shown below  <pro:Errors>\n  <pro:Error Number='-1072898030' \n             Message='XML is not valid according to the schema. Element content is incomplete according to the DTD/Schema. Expecting: {http://www.proactis.com/xml/xml-ns}Invoice'/>\n</pro:Errors>",
            "title": "Error Handling"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#errorserror",
            "text": "Attribute Name  Description      Number  Internal Error Number - this may change between releases    Message  The error message (in English)    Source  Optional attribute describing where the error occurred.",
            "title": "Errors/Error"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#notes_10",
            "text": "The error block may occur anywhere within the document.  For example, if a line is invalid, the errors block will be appended to that line.    It is possible for an errors block to contain more than one error.",
            "title": "Notes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#errorhandlingmodes",
            "text": "The reporting of errors can be configured by setting the  ErrorHandlingMode  attribute within the control block.  The table below describes the available modes     Mode  Description      EMBED  The processed XML is returned, but we the error message stored in additional  pro:Errors/pro:Error  nodes. This is the default mode if the attribute is not supplied.    THROWERRORS  The errors are thrown as SOAP exceptions back to the calling code, the message is an xml document describing the errors    THROWXML  The errors are thrown as SOAP exceptions back to the calling code; the message is the processed xml document, which contains all the errors.    THROWTEXT  The errors are thrown as OAP exceptions back to the calling code, the message is an human readable text describing the errors.",
            "title": "ErrorHandlingModes"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#successful-response",
            "text": "If a document has been successfully imported, then two new attributes will be added the document's node.   The first attribute is Status, and will have a value of OK  The second attribute is DocumentNumber, and this will contain the invoices generated number.",
            "title": "Successful Response"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#note",
            "text": "If the XML contains multiple documents, then as long as the control block is valid, it is possible for some documents to be imported and other to be rejected.",
            "title": "Note"
        },
        {
            "location": "/p2p/purchaseInvoiceGateway/#example-code",
            "text": "See the following example applications:   Create Standalone Invoice",
            "title": "Example Code"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this great product.",
            "title": "Spend Analytics"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this great product.",
            "title": "APF"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this great product.",
            "title": "S2C"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this great product.",
            "title": "DueNorth"
        },
        {
            "location": "/placeholder/",
            "text": "Please contact your account manager for information on integrating with this great product.",
            "title": "System4"
        }
    ]
}