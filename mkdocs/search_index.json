{
    "docs": [
        {
            "location": "/welcome/",
            "text": "Welcome\n\n\nThis site provides technical documentation for the PROACTIS suite of applications.\n\n\nIntellectual Property\n\n\nThis document contains information related to certain products and services which is proprietary to PROACTIS Group Limited. Notably, all Intellectual property related to the deployment of the PROACTIS Suite of applications is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "PROACTIS"
        },
        {
            "location": "/welcome/#welcome",
            "text": "This site provides technical documentation for the PROACTIS suite of applications.",
            "title": "Welcome"
        },
        {
            "location": "/welcome/#intellectual-property",
            "text": "This document contains information related to certain products and services which is proprietary to PROACTIS Group Limited. Notably, all Intellectual property related to the deployment of the PROACTIS Suite of applications is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "Intellectual Property"
        },
        {
            "location": "/p2p/Placeholder/",
            "text": "Placeholder text",
            "title": "Overview"
        },
        {
            "location": "/p2p/sso/",
            "text": "P2P Single-Sign-On (SSO)\n\n\nBy default PROACTIS expects the users to enter their username and password in order to login into PROACTIS P2P.   This document lists the possible ways in which PROACTIS P2P can be configured to allow users to authenticate using Single-Sign-On.\n\n\n!!! Note\n\n\nIf you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).\n\n\n\n!!! Note\n\n\nIf you wish your users to use a combination of PROACTIS and SSO logins then add the following setting to the __ApplicationConfiguration.xml__ file.\n```xml\n<Setting Name=\"AllowPROACTISLogins\">True</Setting>\n```\n\n\n\n\n\nWindows Authentication\n\n\nIf your PROACTIS P2P server is on the same domain as your users then the system can be configured so that they are automatically signed on without the need for them to re-enter their username and password.\n\n\n\n\nEnsure that Windows Authentication is enabled in IIS for your PROACTIS website\n\n\n\n\nIt must first be installed as part of the \nWeb Server\n role. \n\n\n\n\nAnd then enabled in the authentication section of your website\n\n\n\n\n!!! Note\n    If some of your users aren't on your domain,  then leave anonymous authentication enabled for them.\n\n\n\n\nAdd the following setting to the \nApplicationConfiguration.xml\n file.\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">WINDOWS</Setting>\n\n\n\n\n\n\nSet the \nNTLogon\n flag to True against the users,  and ensure that their usernames are in the format DOMAIN\\Username.  \nFor example PROACTIS\\DavidBetteridge\n\n\n\n\n\n\nSAML2\n\n\nPROACTIS P2P has built in support for SSO using the industry standard \nSAML2\n protocol.\n\n\n\n\nFirst generate (or obtain) a local certificate and provide the public part of this to your identity provider.\n\n\n\n\nmakecert -r -pe -n \"CN=your_cert_name\" -sky exchange -sv mycert.pvk mycert.cer\n\nEnter yourPassword for the subject key (3 times!)\n\npvk2pfx.exe -pvk mycert.pvk -spc mycert.cer  -pi yourPassword -pfx mycert.pfx -po yourPassword\n\n\n\n\n\n\nWith in your website's customer folder create a file called \nsaml.config\n.   This should be based on the following template.\n\n\n\n\n<?xml version=\"1.0\"?>\n<SAMLConfiguration xmlns=\"urn:componentspace:SAML:2.0:configuration\">\n\u00a0\u00a0 <ServiceProvider Name=\"service-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AssertionConsumerServiceUrl=\"~/SystemLogon/AssertionConsumerService\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificateFile=\"path-to-local-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificatePassword=\"local-certificate-password\"/>\n\u00a0\n\u00a0\n\u00a0\u00a0 <!-- ADFS -->\n\u00a0\u00a0 <PartnerIdentityProviders>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <PartnerIdentityProvider Name=\"partner-identity-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description=\"PROACTIS AD\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SignAuthnRequest=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantSAMLResponseSigned=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WantAssertionSigned=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantAssertionEncrypted=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PartnerCertificateFile=\"path-to-partner-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ClockSkew=\"00:03:00\"\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SingleSignOnServiceUrl=\"single-sign-on-service-url\"/>\n\u00a0\u00a0 </PartnerIdentityProviders>\n\u00a0\n</SAMLConfiguration>\n\n\n\n\n\n\nAdd the following settings to your application.configuration file\n\n\n\n\n<Setting Name=\"SSOAttributeName\">NameID</Setting>\n\n\n\n\nThe name of the attribute containing the user identifier in the attributes list returned from the ADFS server.\nIf not specified then no attribute lookup is made and user identification is based on the \u201cusername\u201d returned from the ADFS server.\n\u00a0\n\n\n<Setting Name=\"SSOAttributeNameMask\"></Setting>\n\n\n\n\nAn optional mask to be applied to the above user identifier value.\n\u00a0\n\n\n<Setting Name=\"SSOMatchP2PUserOnEmailAddress\">False</Setting>\n\n\n\n\nBy default, P2P searches the database Users table to find a user whose \u201cLoginID\u201d matches the identifier value returned from the ADFS server.\nThis optional setting will cause the lookup to be made on \u201cEmailAddress\u201d rather than \u201cLoginID\u201d\n\u00a0\n\n\n<Setting Name=\"SSODatabaseTitle\"></Setting>\n\n\n\n\nAn optional setting that only applies when a user who is already logged into a 3rd party system, initiates a logon to P2P via SSO. In this scenario, the user is not \npresented with a logon page. If the user has access to multiple databases, then this setting specifies the database title (in the database xml file) to log into.\nIf this setting is not present, P2P will select the default database in the databases xml file (or the first database if no default).\nObviously if only one database is available, then this setting is unnecessary.\n\n\n\n\nExternal\n\n\nBy default PROACTIS P2P validates the username and password entered by the user against the record in the \ndsdba.Users\n table.   It is however possible to customise PROACTIS so that users are validated against an external userstore such as LDAP.\n\n\nThe following steps should be followed in order to create an external validation DLL.\n\n\n\n\n\n\nCreate a new C# class library with a class called \nServices\n which implements the \nILogin\n interface.  This interface can be found in \nPROACTIS.P2P.grsCustInterfaces.DLL\n\n\n\n\n\n\nDecide if your login process will be called asynchronously or not and implement the UseAsynchronousImplementation as required.\n\n\n\n\n\n\n    public bool UseAsynchronousImplementation => false;\n\n\n\n\n\n\n\n\nImplement the \nLogin\n (or \nLoginAsync\n) method with your custom validation code.  This method should return True for a successful login and False for a failure.  (For security reasons it is not possible to return messages informing the user why the login failed.  For example \nthe username does not exist\n)\n\n\n\n\n\n\nCompile your code,  and ensure that the resulting DLL is named xyzLogin.DLL.   (xyz can be anything)\n\n\n\n\n\n\nCopy the DLL into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.\n\n\n\n\n\n\nAdd the following setting into your \napplicationconfiguration.xml\n file.\n\n\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">EXTERNAL</Setting>\n\n\n\n\nSee the \nPROACTIS.ExampleApplications.ExternalLogin\n example application for a complete sample implementation.\n\n\n!!! Notes\n    - In order to login using the external DLL,  the user must have their NTLogon property set to True\n    - Failed login attempts aren't recorded\n\n\n\n\nBespoke\n\n\nIt is also possible to provide your users with a completely custom login process,  including replacing the login screen and adding the ability to automatically create users the first time they connect.",
            "title": "Single Sign On (SSO)"
        },
        {
            "location": "/p2p/sso/#p2p-single-sign-on-sso",
            "text": "By default PROACTIS expects the users to enter their username and password in order to login into PROACTIS P2P.   This document lists the possible ways in which PROACTIS P2P can be configured to allow users to authenticate using Single-Sign-On.  !!! Note  If you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).  !!! Note  If you wish your users to use a combination of PROACTIS and SSO logins then add the following setting to the __ApplicationConfiguration.xml__ file.\n```xml\n<Setting Name=\"AllowPROACTISLogins\">True</Setting>\n```",
            "title": "P2P Single-Sign-On (SSO)"
        },
        {
            "location": "/p2p/sso/#windows-authentication",
            "text": "If your PROACTIS P2P server is on the same domain as your users then the system can be configured so that they are automatically signed on without the need for them to re-enter their username and password.   Ensure that Windows Authentication is enabled in IIS for your PROACTIS website   It must first be installed as part of the  Web Server  role.    And then enabled in the authentication section of your website   !!! Note\n    If some of your users aren't on your domain,  then leave anonymous authentication enabled for them.   Add the following setting to the  ApplicationConfiguration.xml  file.   <Setting Name=\"AuthenticationMethod\">WINDOWS</Setting>   Set the  NTLogon  flag to True against the users,  and ensure that their usernames are in the format DOMAIN\\Username.   For example PROACTIS\\DavidBetteridge",
            "title": "Windows Authentication"
        },
        {
            "location": "/p2p/sso/#saml2",
            "text": "PROACTIS P2P has built in support for SSO using the industry standard  SAML2  protocol.   First generate (or obtain) a local certificate and provide the public part of this to your identity provider.   makecert -r -pe -n \"CN=your_cert_name\" -sky exchange -sv mycert.pvk mycert.cer\n\nEnter yourPassword for the subject key (3 times!)\n\npvk2pfx.exe -pvk mycert.pvk -spc mycert.cer  -pi yourPassword -pfx mycert.pfx -po yourPassword   With in your website's customer folder create a file called  saml.config .   This should be based on the following template.   <?xml version=\"1.0\"?>\n<SAMLConfiguration xmlns=\"urn:componentspace:SAML:2.0:configuration\">\n\u00a0\u00a0 <ServiceProvider Name=\"service-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AssertionConsumerServiceUrl=\"~/SystemLogon/AssertionConsumerService\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificateFile=\"path-to-local-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificatePassword=\"local-certificate-password\"/>\n\u00a0\n\u00a0\n\u00a0\u00a0 <!-- ADFS -->\n\u00a0\u00a0 <PartnerIdentityProviders>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <PartnerIdentityProvider Name=\"partner-identity-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description=\"PROACTIS AD\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SignAuthnRequest=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantSAMLResponseSigned=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WantAssertionSigned=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantAssertionEncrypted=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PartnerCertificateFile=\"path-to-partner-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ClockSkew=\"00:03:00\"\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SingleSignOnServiceUrl=\"single-sign-on-service-url\"/>\n\u00a0\u00a0 </PartnerIdentityProviders>\n\u00a0\n</SAMLConfiguration>   Add the following settings to your application.configuration file   <Setting Name=\"SSOAttributeName\">NameID</Setting>  The name of the attribute containing the user identifier in the attributes list returned from the ADFS server.\nIf not specified then no attribute lookup is made and user identification is based on the \u201cusername\u201d returned from the ADFS server.\n\u00a0  <Setting Name=\"SSOAttributeNameMask\"></Setting>  An optional mask to be applied to the above user identifier value.\n\u00a0  <Setting Name=\"SSOMatchP2PUserOnEmailAddress\">False</Setting>  By default, P2P searches the database Users table to find a user whose \u201cLoginID\u201d matches the identifier value returned from the ADFS server.\nThis optional setting will cause the lookup to be made on \u201cEmailAddress\u201d rather than \u201cLoginID\u201d\n\u00a0  <Setting Name=\"SSODatabaseTitle\"></Setting>  An optional setting that only applies when a user who is already logged into a 3rd party system, initiates a logon to P2P via SSO. In this scenario, the user is not \npresented with a logon page. If the user has access to multiple databases, then this setting specifies the database title (in the database xml file) to log into.\nIf this setting is not present, P2P will select the default database in the databases xml file (or the first database if no default).\nObviously if only one database is available, then this setting is unnecessary.",
            "title": "SAML2"
        },
        {
            "location": "/p2p/sso/#external",
            "text": "By default PROACTIS P2P validates the username and password entered by the user against the record in the  dsdba.Users  table.   It is however possible to customise PROACTIS so that users are validated against an external userstore such as LDAP.  The following steps should be followed in order to create an external validation DLL.    Create a new C# class library with a class called  Services  which implements the  ILogin  interface.  This interface can be found in  PROACTIS.P2P.grsCustInterfaces.DLL    Decide if your login process will be called asynchronously or not and implement the UseAsynchronousImplementation as required.        public bool UseAsynchronousImplementation => false;    Implement the  Login  (or  LoginAsync ) method with your custom validation code.  This method should return True for a successful login and False for a failure.  (For security reasons it is not possible to return messages informing the user why the login failed.  For example  the username does not exist )    Compile your code,  and ensure that the resulting DLL is named xyzLogin.DLL.   (xyz can be anything)    Copy the DLL into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.    Add the following setting into your  applicationconfiguration.xml  file.    <Setting Name=\"AuthenticationMethod\">EXTERNAL</Setting>  See the  PROACTIS.ExampleApplications.ExternalLogin  example application for a complete sample implementation.  !!! Notes\n    - In order to login using the external DLL,  the user must have their NTLogon property set to True\n    - Failed login attempts aren't recorded",
            "title": "External"
        },
        {
            "location": "/p2p/sso/#bespoke",
            "text": "It is also possible to provide your users with a completely custom login process,  including replacing the login screen and adding the ability to automatically create users the first time they connect.",
            "title": "Bespoke"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Punchout"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Invoice Posting"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Budget Checking"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Nominal Validation"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Imaging Integration"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Invoices"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Spend Analytics"
        },
        {
            "location": "/apf/overview/",
            "text": "Overview\n\n\nThe Accelerated Payments Facility (APF) is a self-contained \u201cmicro service\u201d which sits between a number of systems as shown in the diagram below.\n\n\n\nGlossary\n\n\n\n\nAPF \u2013 Accelerated Payments Facility.   This is the central piece of software provided by PROACTIS\n\n\nP2P \u2013 Purchase-To-Pay system.  This can be either PROACTIS own P2P system or an alternative system provided by a 3rd party such as Coda.\n\n\nKDM \u2013 Key Decision Maker.  The responsible party for the supplier\n\n\nAML \u2013 Anti-money laundering checks.\n\n\nApplication. The request created by the supplier to have their invoices paid as soon as possible.  Each application contains one or more invoices.\n\n\nPayment \u2013 Internally within the APF module invoices are referred to as Payments\n\n\ns2c \u2013Source-To-Contract.  The supplier portal provided by PROACTIS.  Also known as Supplier Network.\n\n\n\n\nReadership\n\n\nThis document is aimed at developers who have been tasked with integrating their own supplier Portal system with APF.\nIt would be advisable to be familiar with the general APF process before reading this document.\n\n\nIntellectual Property\n\n\nThis document contains information related to certain products and services which is proprietary to PROACTIS Group Limited and must not be disclosed, in whole or in part, to any third party.  Notably, all Intellectual property related to the deployment of the Accelerated Payment Facility is to the benefit of and remains the property of PROACTIS Group Limited.\n\n\nImportant Notes\n\n\nIt should be noted that the PROACTIS APF product is still under active development and changes may be made as a result of testing (either internally or externally).",
            "title": "overview"
        },
        {
            "location": "/apf/overview/#overview",
            "text": "The Accelerated Payments Facility (APF) is a self-contained \u201cmicro service\u201d which sits between a number of systems as shown in the diagram below.",
            "title": "Overview"
        },
        {
            "location": "/apf/overview/#glossary",
            "text": "APF \u2013 Accelerated Payments Facility.   This is the central piece of software provided by PROACTIS  P2P \u2013 Purchase-To-Pay system.  This can be either PROACTIS own P2P system or an alternative system provided by a 3rd party such as Coda.  KDM \u2013 Key Decision Maker.  The responsible party for the supplier  AML \u2013 Anti-money laundering checks.  Application. The request created by the supplier to have their invoices paid as soon as possible.  Each application contains one or more invoices.  Payment \u2013 Internally within the APF module invoices are referred to as Payments  s2c \u2013Source-To-Contract.  The supplier portal provided by PROACTIS.  Also known as Supplier Network.",
            "title": "Glossary"
        },
        {
            "location": "/apf/overview/#readership",
            "text": "This document is aimed at developers who have been tasked with integrating their own supplier Portal system with APF.\nIt would be advisable to be familiar with the general APF process before reading this document.",
            "title": "Readership"
        },
        {
            "location": "/apf/overview/#intellectual-property",
            "text": "This document contains information related to certain products and services which is proprietary to PROACTIS Group Limited and must not be disclosed, in whole or in part, to any third party.  Notably, all Intellectual property related to the deployment of the Accelerated Payment Facility is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "Intellectual Property"
        },
        {
            "location": "/apf/overview/#important-notes",
            "text": "It should be noted that the PROACTIS APF product is still under active development and changes may be made as a result of testing (either internally or externally).",
            "title": "Important Notes"
        },
        {
            "location": "/apf/overview/",
            "text": "Overview\n\n\nThe Accelerated Payments Facility (APF) is a self-contained \u201cmicro service\u201d which sits between a number of systems as shown in the diagram below.\n\n\n\nGlossary\n\n\n\n\nAPF \u2013 Accelerated Payments Facility.   This is the central piece of software provided by PROACTIS\n\n\nP2P \u2013 Purchase-To-Pay system.  This can be either PROACTIS own P2P system or an alternative system provided by a 3rd party such as Coda.\n\n\nKDM \u2013 Key Decision Maker.  The responsible party for the supplier\n\n\nAML \u2013 Anti-money laundering checks.\n\n\nApplication. The request created by the supplier to have their invoices paid as soon as possible.  Each application contains one or more invoices.\n\n\nPayment \u2013 Internally within the APF module invoices are referred to as Payments\n\n\ns2c \u2013Source-To-Contract.  The supplier portal provided by PROACTIS.  Also known as Supplier Network.\n\n\n\n\nReadership\n\n\nThis document is aimed at developers who have been tasked with integrating their own supplier Portal system with APF.\nIt would be advisable to be familiar with the general APF process before reading this document.\n\n\nIntellectual Property\n\n\nThis document contains information related to certain products and services which is proprietary to PROACTIS Group Limited and must not be disclosed, in whole or in part, to any third party.  Notably, all Intellectual property related to the deployment of the Accelerated Payment Facility is to the benefit of and remains the property of PROACTIS Group Limited.\n\n\nImportant Notes\n\n\nIt should be noted that the PROACTIS APF product is still under active development and changes may be made as a result of testing (either internally or externally).",
            "title": "p2p to apf"
        },
        {
            "location": "/apf/overview/#overview",
            "text": "The Accelerated Payments Facility (APF) is a self-contained \u201cmicro service\u201d which sits between a number of systems as shown in the diagram below.",
            "title": "Overview"
        },
        {
            "location": "/apf/overview/#glossary",
            "text": "APF \u2013 Accelerated Payments Facility.   This is the central piece of software provided by PROACTIS  P2P \u2013 Purchase-To-Pay system.  This can be either PROACTIS own P2P system or an alternative system provided by a 3rd party such as Coda.  KDM \u2013 Key Decision Maker.  The responsible party for the supplier  AML \u2013 Anti-money laundering checks.  Application. The request created by the supplier to have their invoices paid as soon as possible.  Each application contains one or more invoices.  Payment \u2013 Internally within the APF module invoices are referred to as Payments  s2c \u2013Source-To-Contract.  The supplier portal provided by PROACTIS.  Also known as Supplier Network.",
            "title": "Glossary"
        },
        {
            "location": "/apf/overview/#readership",
            "text": "This document is aimed at developers who have been tasked with integrating their own supplier Portal system with APF.\nIt would be advisable to be familiar with the general APF process before reading this document.",
            "title": "Readership"
        },
        {
            "location": "/apf/overview/#intellectual-property",
            "text": "This document contains information related to certain products and services which is proprietary to PROACTIS Group Limited and must not be disclosed, in whole or in part, to any third party.  Notably, all Intellectual property related to the deployment of the Accelerated Payment Facility is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "Intellectual Property"
        },
        {
            "location": "/apf/overview/#important-notes",
            "text": "It should be noted that the PROACTIS APF product is still under active development and changes may be made as a result of testing (either internally or externally).",
            "title": "Important Notes"
        },
        {
            "location": "/apf/financesystem_to_paymentserver/",
            "text": "APF Finance System to Payments Server\n\n\nThis document can be used along with the sample C# program:\n    \nPROACTIS.AcceleratedPayments.Web.ExampleBuyerAPIClient\n\n\nThis document is only concerned with the integrations between the Finance System and the Payments Server.\nCurrently there is only one integration between these two systems which is the flow of supplier details from the finance system to the payment server.\n\u2003\n\n\nAuthentication\n\n\nAll API calls require the username and password be supplied in a base64 encoded format in the Authorisation header of the request.\nIn C# the code for doing this would look like the following:\n\n\ncredentials = Convert.ToBase64String(Encoding.UTF8.GetBytes(USER + \":\" + PASSWORD));\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Basic \" + credentials);\n\n\n\n\nFor example\n\n\nIf the details are incorrect then the site will respond with a 401 error\n\n\nFrom \nhttps://en.wikipedia.org/wiki/Basic_access_authentication\n\nWhen the user agent wants to send the server authentication credentials it may use the Authorization field.\nThe Authorization field is constructed as follows: \n\n\n1 The username and password are combined with a single colon.\n\n2 The resulting string is encoded into an octet sequence. \n\n3 The resulting string is encoded using a variant of Base64. \n\n4 The authorization method and a space i.e. \"Basic \" is then put before the encoded string.\n\nFor example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the b\n\n\nase64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. \nThen the Authorization header will appear as:\nAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l",
            "title": "Finance System to Payments Server"
        },
        {
            "location": "/apf/financesystem_to_paymentserver/#apf-finance-system-to-payments-server",
            "text": "This document can be used along with the sample C# program:\n     PROACTIS.AcceleratedPayments.Web.ExampleBuyerAPIClient  This document is only concerned with the integrations between the Finance System and the Payments Server.\nCurrently there is only one integration between these two systems which is the flow of supplier details from the finance system to the payment server.",
            "title": "APF Finance System to Payments Server"
        },
        {
            "location": "/apf/financesystem_to_paymentserver/#authentication",
            "text": "All API calls require the username and password be supplied in a base64 encoded format in the Authorisation header of the request.\nIn C# the code for doing this would look like the following:  credentials = Convert.ToBase64String(Encoding.UTF8.GetBytes(USER + \":\" + PASSWORD));\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Basic \" + credentials);  For example  If the details are incorrect then the site will respond with a 401 error  From  https://en.wikipedia.org/wiki/Basic_access_authentication \nWhen the user agent wants to send the server authentication credentials it may use the Authorization field.\nThe Authorization field is constructed as follows:   1 The username and password are combined with a single colon. \n2 The resulting string is encoded into an octet sequence.  \n3 The resulting string is encoded using a variant of Base64.  \n4 The authorization method and a space i.e. \"Basic \" is then put before the encoded string. \nFor example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the b  ase64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. \nThen the Authorization header will appear as:\nAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l",
            "title": "Authentication"
        },
        {
            "location": "/s2c/placeholder/",
            "text": "Placeholder text",
            "title": "S2C"
        },
        {
            "location": "/dueNorth/Placeholder/",
            "text": "Placeholder text",
            "title": "DueNorth"
        }
    ]
}