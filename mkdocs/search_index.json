{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\nThis site provides technical documentation for the PROACTIS suite of applications.\n\n\nIntellectual Property\n\n\nThis document contains information related to certain products and services which is proprietary to PROACTIS Group Limited. Notably, all Intellectual property related to the deployment of the PROACTIS Suite of applications is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "PROACTIS"
        },
        {
            "location": "/#welcome",
            "text": "This site provides technical documentation for the PROACTIS suite of applications.",
            "title": "Welcome"
        },
        {
            "location": "/#intellectual-property",
            "text": "This document contains information related to certain products and services which is proprietary to PROACTIS Group Limited. Notably, all Intellectual property related to the deployment of the PROACTIS Suite of applications is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "Intellectual Property"
        },
        {
            "location": "/p2p/Placeholder/",
            "text": "Placeholder text",
            "title": "Overview"
        },
        {
            "location": "/p2p/sso/",
            "text": "P2P Single-Sign-On (SSO)\n\n\nBy default PROACTIS expects the users to enter their username and password in order to login into PROACTIS P2P.   This document lists the possible ways in which PROACTIS P2P can be configured to allow users to authenticate using Single-Sign-On.\n\n\n\n\nNote\n\n\nIf you wish your users to use a combination of PROACTIS and SSO logins then add the following setting to the \nApplicationConfiguration.xml\n file.\n\n\n\n\n<Setting Name=\"AllowPROACTISLogins\">True</Setting>\n\n\n\n\n\n\nWindows Authentication\n\n\nIf your PROACTIS P2P server is on the same domain as your users then the system can be configured so that they are automatically signed on without the need for them to re-enter their username and password.\n\n\n\n\nEnsure that Windows Authentication is enabled in IIS for your PROACTIS website\n\n\n\n\nIt must first be installed as part of the \nWeb Server\n role. \n\n\n\n\nAnd then enabled in the authentication section of your website\n\n\n\n\n\n\nNote\n\n\nIf some of your users aren't on your domain,  then leave anonymous authentication enabled for them.\n\n\n\n\n\n\nAdd the following setting to the \nApplicationConfiguration.xml\n file.\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">WINDOWS</Setting>\n\n\n\n\n\n\nSet the \nNTLogon\n flag to True against the users,  and ensure that their usernames are in the format DOMAIN\\Username.  \nFor example PROACTIS\\DavidBetteridge\n\n\n\n\n\n\nSAML2\n\n\nPROACTIS P2P has built in support for SSO using the industry standard \nSAML2\n protocol.\n\n\n\n\nFirst generate (or obtain) a local certificate and provide the public part of this to your identity provider.\n\n\n\n\nmakecert -r -pe -n \"CN=your_cert_name\" -sky exchange -sv mycert.pvk mycert.cer\n\nEnter yourPassword for the subject key (3 times!)\n\npvk2pfx.exe -pvk mycert.pvk -spc mycert.cer  -pi yourPassword -pfx mycert.pfx -po yourPassword\n\n\n\n\n\n\nWith in your website's customer folder create a file called \nsaml.config\n.   This should be based on the following template.\n\n\n\n\n<?xml version=\"1.0\"?>\n<SAMLConfiguration xmlns=\"urn:componentspace:SAML:2.0:configuration\">\n\u00a0\u00a0 <ServiceProvider Name=\"service-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AssertionConsumerServiceUrl=\"~/SystemLogon/AssertionConsumerService\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificateFile=\"path-to-local-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificatePassword=\"local-certificate-password\"/>\n\u00a0\n\u00a0\n\u00a0\u00a0 <!-- ADFS -->\n\u00a0\u00a0 <PartnerIdentityProviders>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <PartnerIdentityProvider Name=\"partner-identity-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description=\"PROACTIS AD\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SignAuthnRequest=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantSAMLResponseSigned=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WantAssertionSigned=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantAssertionEncrypted=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PartnerCertificateFile=\"path-to-partner-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ClockSkew=\"00:03:00\"\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SingleSignOnServiceUrl=\"single-sign-on-service-url\"/>\n\u00a0\u00a0 </PartnerIdentityProviders>\n\u00a0\n</SAMLConfiguration>\n\n\n\n\n\n\nAdd the following settings to your application.configuration file\n\n\n\n\n<Setting Name=\"SSOAttributeName\">NameID</Setting>\n\n\n\n\nThe name of the attribute containing the user identifier in the attributes list returned from the ADFS server.\nIf not specified then no attribute lookup is made and user identification is based on the \u201cusername\u201d returned from the ADFS server.\n\u00a0\n\n\n<Setting Name=\"SSOAttributeNameMask\"></Setting>\n\n\n\n\nAn optional mask to be applied to the above user identifier value.\n\u00a0\n\n\n<Setting Name=\"SSOMatchP2PUserOnEmailAddress\">False</Setting>\n\n\n\n\nBy default, P2P searches the database Users table to find a user whose \u201cLoginID\u201d matches the identifier value returned from the ADFS server.\nThis optional setting will cause the lookup to be made on \u201cEmailAddress\u201d rather than \u201cLoginID\u201d\n\u00a0\n\n\n<Setting Name=\"SSODatabaseTitle\"></Setting>\n\n\n\n\nAn optional setting that only applies when a user who is already logged into a 3rd party system, initiates a logon to P2P via SSO. In this scenario, the user is not \npresented with a logon page. If the user has access to multiple databases, then this setting specifies the database title (in the database xml file) to log into.\nIf this setting is not present, P2P will select the default database in the databases xml file (or the first database if no default).\nObviously if only one database is available, then this setting is unnecessary.\n\n\n\n\nExternal\n\n\nBy default PROACTIS P2P validates the username and password entered by the user against the record in the \ndsdba.Users\n table.   It is however possible to customise PROACTIS so that users are validated against an external userstore such as LDAP.\n\n\nThe following steps should be followed in order to create an external validation DLL.\n\n\n\n\n\n\nCreate a new C# class library with a class called \nServices\n which implements the \nILogin\n interface.  This interface can be found in \nPROACTIS.P2P.grsCustInterfaces.DLL\n\n\n\n\n\n\nDecide if your login process will be called asynchronously or not and implement the UseAsynchronousImplementation as required.\n\n\n\n\n\n\n    public bool UseAsynchronousImplementation => false;\n\n\n\n\n\n\n\n\nImplement the \nLogin\n (or \nLoginAsync\n) method with your custom validation code.  This method should return True for a successful login and False for a failure.  (For security reasons it is not possible to return messages informing the user why the login failed.  For example \nthe username does not exist\n)\n\n\n\n\n\n\nCompile your code,  and ensure that the resulting DLL is named xyzLogin.DLL.   (xyz can be anything)\n\n\n\n\n\n\nCopy the DLL into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.\n\n\n\n\n\n\nAdd the following setting into your \napplicationconfiguration.xml\n file.\n\n\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">EXTERNAL</Setting>\n\n\n\n\nSee the \nPROACTIS.ExampleApplications.ExternalLogin\n example application for a complete sample implementation.\n\n\n\n\nNote\n\n\n\n\nIn order to login using the external DLL,  the user must have their NTLogon property set to True\n\n\nFailed login attempts aren't recorded\n\n\n\n\n\n\n\n\nBespoke\n\n\nIt is also possible to provide your users with a completely custom login process,  including replacing the login screen and adding the ability to automatically create users the first time they connect.\n\n\nThe process is to :\n\n\n\n\n\n\nCreate a custom page in your website's customer folder called \nCustomLogin\n\n\n\n\n\n\nWithin that page collect any required details from the user and validate their credentials.\n\n\n\n\n\n\nIf the user entered valid details then log them on by:\n\n\n\n\nFirst generating a unique token for them\n\n\nThen writing the token to the \nDSDBA.CustomLoginTokens\n table.\n\n\nFinally redirecting the user's browser to CustomLoginAsync within the main site.\n\n\n\n\n\n\n\n\nTo enable your new page to be used,  the following settings should be added to the \nApplicationConfiguration\n file.\n\n\n\n\n\n\n<Setting Name=\"AuthenticationMethod\">CUSTOM</Setting>\n<Setting Name=\"CustomLoginURL\">https://server/custom/CustomLogin.aspx</Setting>\n\n\n\n\nWhere \nserver\n is the address of your core P2P website.\n\n\nSee these \nexample pages\n for a complete sample.\n\n\n\n\nNote\n\n\nUpon exit from P2P, the browser will be redirected back to the custom login page with the following in the querystring \naction=logout\n. If the custom logon page uses automated logins then it must take notice of this parameter to not automatically log the user back in again\n\n\n\n\nReturn Messages\n\n\nMessages are return to the custom login page using the following query string format\n\nInfoMessages=XXX&AlertMessages=YYY&ErrorMessages=ZZZ\n\n\nWhere XXX, YYY and ZZZ are base64 encoded UNICODE strings. Each encoded string contains the messages concatenate with a \u201c|\u201d separator. (see sample app)\nThese entries will only be in the querystring if there are messages to return.",
            "title": "Single Sign On (SSO)"
        },
        {
            "location": "/p2p/sso/#p2p-single-sign-on-sso",
            "text": "By default PROACTIS expects the users to enter their username and password in order to login into PROACTIS P2P.   This document lists the possible ways in which PROACTIS P2P can be configured to allow users to authenticate using Single-Sign-On.   Note  If you wish your users to use a combination of PROACTIS and SSO logins then add the following setting to the  ApplicationConfiguration.xml  file.   <Setting Name=\"AllowPROACTISLogins\">True</Setting>",
            "title": "P2P Single-Sign-On (SSO)"
        },
        {
            "location": "/p2p/sso/#windows-authentication",
            "text": "If your PROACTIS P2P server is on the same domain as your users then the system can be configured so that they are automatically signed on without the need for them to re-enter their username and password.   Ensure that Windows Authentication is enabled in IIS for your PROACTIS website   It must first be installed as part of the  Web Server  role.    And then enabled in the authentication section of your website    Note  If some of your users aren't on your domain,  then leave anonymous authentication enabled for them.    Add the following setting to the  ApplicationConfiguration.xml  file.   <Setting Name=\"AuthenticationMethod\">WINDOWS</Setting>   Set the  NTLogon  flag to True against the users,  and ensure that their usernames are in the format DOMAIN\\Username.   For example PROACTIS\\DavidBetteridge",
            "title": "Windows Authentication"
        },
        {
            "location": "/p2p/sso/#saml2",
            "text": "PROACTIS P2P has built in support for SSO using the industry standard  SAML2  protocol.   First generate (or obtain) a local certificate and provide the public part of this to your identity provider.   makecert -r -pe -n \"CN=your_cert_name\" -sky exchange -sv mycert.pvk mycert.cer\n\nEnter yourPassword for the subject key (3 times!)\n\npvk2pfx.exe -pvk mycert.pvk -spc mycert.cer  -pi yourPassword -pfx mycert.pfx -po yourPassword   With in your website's customer folder create a file called  saml.config .   This should be based on the following template.   <?xml version=\"1.0\"?>\n<SAMLConfiguration xmlns=\"urn:componentspace:SAML:2.0:configuration\">\n\u00a0\u00a0 <ServiceProvider Name=\"service-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AssertionConsumerServiceUrl=\"~/SystemLogon/AssertionConsumerService\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificateFile=\"path-to-local-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LocalCertificatePassword=\"local-certificate-password\"/>\n\u00a0\n\u00a0\n\u00a0\u00a0 <!-- ADFS -->\n\u00a0\u00a0 <PartnerIdentityProviders>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <PartnerIdentityProvider Name=\"partner-identity-provider-name\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description=\"PROACTIS AD\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SignAuthnRequest=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantSAMLResponseSigned=\"false\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WantAssertionSigned=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 WantAssertionEncrypted=\"true\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PartnerCertificateFile=\"path-to-partner-certificate-file\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ClockSkew=\"00:03:00\"\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SingleSignOnServiceUrl=\"single-sign-on-service-url\"/>\n\u00a0\u00a0 </PartnerIdentityProviders>\n\u00a0\n</SAMLConfiguration>   Add the following settings to your application.configuration file   <Setting Name=\"SSOAttributeName\">NameID</Setting>  The name of the attribute containing the user identifier in the attributes list returned from the ADFS server.\nIf not specified then no attribute lookup is made and user identification is based on the \u201cusername\u201d returned from the ADFS server.\n\u00a0  <Setting Name=\"SSOAttributeNameMask\"></Setting>  An optional mask to be applied to the above user identifier value.\n\u00a0  <Setting Name=\"SSOMatchP2PUserOnEmailAddress\">False</Setting>  By default, P2P searches the database Users table to find a user whose \u201cLoginID\u201d matches the identifier value returned from the ADFS server.\nThis optional setting will cause the lookup to be made on \u201cEmailAddress\u201d rather than \u201cLoginID\u201d\n\u00a0  <Setting Name=\"SSODatabaseTitle\"></Setting>  An optional setting that only applies when a user who is already logged into a 3rd party system, initiates a logon to P2P via SSO. In this scenario, the user is not \npresented with a logon page. If the user has access to multiple databases, then this setting specifies the database title (in the database xml file) to log into.\nIf this setting is not present, P2P will select the default database in the databases xml file (or the first database if no default).\nObviously if only one database is available, then this setting is unnecessary.",
            "title": "SAML2"
        },
        {
            "location": "/p2p/sso/#external",
            "text": "By default PROACTIS P2P validates the username and password entered by the user against the record in the  dsdba.Users  table.   It is however possible to customise PROACTIS so that users are validated against an external userstore such as LDAP.  The following steps should be followed in order to create an external validation DLL.    Create a new C# class library with a class called  Services  which implements the  ILogin  interface.  This interface can be found in  PROACTIS.P2P.grsCustInterfaces.DLL    Decide if your login process will be called asynchronously or not and implement the UseAsynchronousImplementation as required.        public bool UseAsynchronousImplementation => false;    Implement the  Login  (or  LoginAsync ) method with your custom validation code.  This method should return True for a successful login and False for a failure.  (For security reasons it is not possible to return messages informing the user why the login failed.  For example  the username does not exist )    Compile your code,  and ensure that the resulting DLL is named xyzLogin.DLL.   (xyz can be anything)    Copy the DLL into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.    Add the following setting into your  applicationconfiguration.xml  file.    <Setting Name=\"AuthenticationMethod\">EXTERNAL</Setting>  See the  PROACTIS.ExampleApplications.ExternalLogin  example application for a complete sample implementation.   Note   In order to login using the external DLL,  the user must have their NTLogon property set to True  Failed login attempts aren't recorded",
            "title": "External"
        },
        {
            "location": "/p2p/sso/#bespoke",
            "text": "It is also possible to provide your users with a completely custom login process,  including replacing the login screen and adding the ability to automatically create users the first time they connect.  The process is to :    Create a custom page in your website's customer folder called  CustomLogin    Within that page collect any required details from the user and validate their credentials.    If the user entered valid details then log them on by:   First generating a unique token for them  Then writing the token to the  DSDBA.CustomLoginTokens  table.  Finally redirecting the user's browser to CustomLoginAsync within the main site.     To enable your new page to be used,  the following settings should be added to the  ApplicationConfiguration  file.    <Setting Name=\"AuthenticationMethod\">CUSTOM</Setting>\n<Setting Name=\"CustomLoginURL\">https://server/custom/CustomLogin.aspx</Setting>  Where  server  is the address of your core P2P website.  See these  example pages  for a complete sample.   Note  Upon exit from P2P, the browser will be redirected back to the custom login page with the following in the querystring  action=logout . If the custom logon page uses automated logins then it must take notice of this parameter to not automatically log the user back in again",
            "title": "Bespoke"
        },
        {
            "location": "/p2p/sso/#return-messages",
            "text": "Messages are return to the custom login page using the following query string format InfoMessages=XXX&AlertMessages=YYY&ErrorMessages=ZZZ  Where XXX, YYY and ZZZ are base64 encoded UNICODE strings. Each encoded string contains the messages concatenate with a \u201c|\u201d separator. (see sample app)\nThese entries will only be in the querystring if there are messages to return.",
            "title": "Return Messages"
        },
        {
            "location": "/p2p/punchout/",
            "text": "Punch-out and Marketplaces in PROACTIS\n\n\nOverview\n\n\nPunch-out allows a user to jump from the PROACTIS P2P website into a supplier\u2019s shopping site.  Where they can browse a catalogue and add items to a shopping basket as per a normal e-commerce site.  Once they have finished browsing they click checkout and the items are then returned to PROACTIS as new lines on their current purchase order (or requisition).\nFor the purposes of this document, the term punch-out does not include the ability to electronically export purchase orders to suppliers in cXML format.\n\n\n\n\nNote\n\n\nThis document details how to configure connections to supplier punch-out sites and marketplaces in the latest release of PROACTIS P2P `17.\nUnlike the previous versions it is now possible to configure the connections directly within the product.  Previously the setup action was carried out by a technical consultant which required the coding of bespoke webpages and sometimes DLLs for installation on the P2P server.\n\n\n\n\n\n\nPunch-thro.\n\n\nThere are three different methods of configuring punch-out within the PROACTIS P2P product.   This first is referred to as punch-thro.  This is where the buyer connects to the suppliers punch-out site via the PROACTIS S2C portal. \n\n\nAs the details of the suppliers site are configured in the PROACTIS S2C Portal the only P2P settings required are as shown below\n\n\n\n\nConfigure the connection to your PROACTIS S2C portal.  (\nApplication\n -> \nPROACTIS Connectivity\n)\n\n\n\n\n\n\n\n\nEnable the punchout via portal setting against the supplier.\n\n\n\n\n\n\n\n\ncXML punch-out\n\n\nThe majority of punch-outs follow the \ncXML\n standard.  This can be configured directly within the P2P product by completing the following fields against a supplier.\n\n\n\n\n\n\nNote\n\n\n\n\nThe values for these 5 fields should be agreed with the supplier however DUNs numbers are often used for the three identities.\n\n\nThe fields can also be edited using the new WebPMC.\n\n\n\n\n\n\n\n\nOCI punch-out\n\n\nLess commonly used in the UK, but PROACTIS also supports the \nOpen Catalog Interface\n (OCI) punch-out standard.  Again this can be configured directly within the product by completing the following three fields.\n\n\n\n\n\n\nNote\n\n\nThe supplier will normally provide you with their URL and your sender identity and secret.\n\n\n\n\n\n\nPunch-out customisations\n\n\nIt is possible to customise punch-out at various points within the process:\n\n\ncXML Handshake\n\n\nThe format of the cXML sent in the initial connection to the supplier\u2019s site is generated from an XML using an XSLT transformation.  By default PROACTIS uses an XSLT embedded within the product however it is possible to use your own xslt by creating a file within the plugins folder called \nPunchoutConnection_{supplierCode}.xslt\n.  Where \n{supplierCode}\n is the code of your supplier.\n\n\nThe fields which are available to the XSLT are listed below.\n\n\n\n\nContext\n\n\nSessionID\n\n\nSupplierCode\n\n\nDepartmentCode\n\n\nCompanyCode\n\n\nTemplateLabel\n\n\nLogonName\n\n\nActualName\n\n\nFirstName\n\n\nSurname\n\n\nEmail\n\n\nReturnURL\n\n\nURL\n\n\nBuyerCookie\n\n\nPayloadID\n\n\nTimestamp\n\n\nPunchoutFromIdentity\n\n\nPunchoutToIdentity\n\n\nPunchoutSenderIdentity\n\n\nPunchoutSenderSharedSecret\n\n\nDeliveryAddressGUID\n\n\nDeliveryAddressName\n\n\nDeliveryAddressLine1\n\n\nDeliveryAddressLine2\n\n\nDeliveryAddressLine3\n\n\nDeliveryAddressLine4\n\n\nDeliveryCountry\n\n\nDeliveryCounty\n\n\nDeliveryPostcode\n\n\nDeliveryPostTown\n\n\n\n\nAn example XSLT document is available \nhere\n.\n\n\ncXML & OCI Returned Basket\n\n\nWhen the basket is returned from the supplier by default it is transformed into the correct P2P format by using an XSLT embedded within the product.  This can be replaced by your own transform by creating a file in the plugins folder called \nReturnedPunchoutBasket_{supplierCode}.xslt\n Where \n{supplierCode}\n is the code of your supplier.\nThe XSLT must generate XML in the following format:\n\n\n<PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>\n\n\n\n\nAn example XSLT document is available \nhere\n.\n\n\nCustom Return Page\n\n\nBy default the supplier posts their basket back to either \nPunchoutReturned.aspx\n (for cxml) or \nPunchoutReturnedOCI.aspx\n (for oci).  It is however possible for you to provide your own page for processing the returned basket.  This is configured by completing the following field against the supplier record.\n\n\n\n\nThis page should be placed in the Customer folder within the website.\n\n\nThe default \nPunchoutReturned.aspx\n page looks for the basket xml in the following form fields:\n\n\n\n\nXML\n\n\ncxml-urlencode\n\n\ncxml-urlencoded\n\n\ncXML-base64\n\n\noracleCart\n\n\nthe first form field\n\n\n\n\nThe default \nPunchoutReturnedOCI.aspx\n page looks for the basket xml in the form fields as follows:\n\n\n\n\nThe items are returned in arrays of fields.  Indexed from 1 onwards\n\n\nFirst it checks there is a field called NEW_ITEM+DESCRIPTION[1].  If there isn\u2019t then it assumes that no basket items were returned.\n\n\nIt then loops through all fields which are named in the format NEW_xxxxx[n] where xxxxx is the name of a property and n is the item number.\n\n\nEach of these form fields are then added into the xml.  The result xml will have the following format:\n\n\n\n\n<PurchaseOrder>\n    <line number=1 item+description=\u2019red pen\u2019 etc etc />\n</PurchaseOrder>\n\n\n\n\nMarket Place\n\n\nPROACTIS P2P allows users to connect to a \u201cmarket place\u201d where they can then browse catalogues of one or more suppliers.  When they have finished browsing and click check-out then their returned basket is used to create one or more draft purchase orders (or requisitions) within PROACTIS.\nUnlike previous versions of PROACTIS it is now possible to configure marketplace connections directly within the product.\n\n\nConfiguration\n\n\nUsing the \u201cSystem Control\u201d application choose the Marketplaces option from the Supplier Maintenance menu.  Add a New market place and complete both the Details and Punch-out sections.\n\n\nThe following marketplace types (standards) are currently supported:\n\n\n\n\nCXML\n\n\nPROACTIS EGS\n\n\nProcserve\n\n\nScience warehouse\n\n\n\n\nThe Supplier Code Mapped From field specifies how the supplier code in the returned basket is mapped back to the suppliers within PROACTIS.\n\n\nCustomisation\n\n\nThe xml used for the initial connection is generated using an xslt embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called \nMarketPlaceConnection_{marketPlaceName}.xslt\n.  Where \n{marketPlaceName}\n is the name of the configured marketplace.\nThe fields passed into the xml are listed below:\n\n\n\n\nDepartmentCode\n\n\nCompanyCode\n\n\nLogonName\n\n\nEmail\n\n\nReturnURL\n\n\nURL\n\n\nBuyerCookie\n\n\nPayloadID\n\n\nTimestamp\n\n\nPunchoutFromIdentity\n\n\nPunchoutToIdentity\n\n\nPunchoutSenderIdentity\n\n\nPunchoutSenderSharedSecret\n\n\n\n\nWhen the basket is returned from the market place by default it is transformed into the correct format by using an XSLT embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called \nMarketPlaceResult_{marketPlaceName}.xslt\n.  Where \n{marketPlaceName}\n is the name of the configured marketplace.\nThe xslt needs to generate xml in the following format\n\n\n<PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>\n\n\n\n\nEGS Marketplaces\n\n\nThe EGS settings within the PROACTIS Connectivity snapin, do not refer to marketplace punch-out.  This are used to configure different functionality not covered by this document.\n\n\nProxy Server\n\n\nConnections to both supplier punch-out, and marketplaces honour the proxy server settings held in the \ndsdba.ProxySettings\n table.\nThis can be configured using the System Control application.",
            "title": "Punchout"
        },
        {
            "location": "/p2p/punchout/#punch-out-and-marketplaces-in-proactis",
            "text": "",
            "title": "Punch-out and Marketplaces in PROACTIS"
        },
        {
            "location": "/p2p/punchout/#overview",
            "text": "Punch-out allows a user to jump from the PROACTIS P2P website into a supplier\u2019s shopping site.  Where they can browse a catalogue and add items to a shopping basket as per a normal e-commerce site.  Once they have finished browsing they click checkout and the items are then returned to PROACTIS as new lines on their current purchase order (or requisition).\nFor the purposes of this document, the term punch-out does not include the ability to electronically export purchase orders to suppliers in cXML format.   Note  This document details how to configure connections to supplier punch-out sites and marketplaces in the latest release of PROACTIS P2P `17.\nUnlike the previous versions it is now possible to configure the connections directly within the product.  Previously the setup action was carried out by a technical consultant which required the coding of bespoke webpages and sometimes DLLs for installation on the P2P server.",
            "title": "Overview"
        },
        {
            "location": "/p2p/punchout/#punch-thro",
            "text": "There are three different methods of configuring punch-out within the PROACTIS P2P product.   This first is referred to as punch-thro.  This is where the buyer connects to the suppliers punch-out site via the PROACTIS S2C portal.   As the details of the suppliers site are configured in the PROACTIS S2C Portal the only P2P settings required are as shown below   Configure the connection to your PROACTIS S2C portal.  ( Application  ->  PROACTIS Connectivity )     Enable the punchout via portal setting against the supplier.",
            "title": "Punch-thro."
        },
        {
            "location": "/p2p/punchout/#cxml-punch-out",
            "text": "The majority of punch-outs follow the  cXML  standard.  This can be configured directly within the P2P product by completing the following fields against a supplier.    Note   The values for these 5 fields should be agreed with the supplier however DUNs numbers are often used for the three identities.  The fields can also be edited using the new WebPMC.",
            "title": "cXML punch-out"
        },
        {
            "location": "/p2p/punchout/#oci-punch-out",
            "text": "Less commonly used in the UK, but PROACTIS also supports the  Open Catalog Interface  (OCI) punch-out standard.  Again this can be configured directly within the product by completing the following three fields.    Note  The supplier will normally provide you with their URL and your sender identity and secret.",
            "title": "OCI punch-out"
        },
        {
            "location": "/p2p/punchout/#punch-out-customisations",
            "text": "It is possible to customise punch-out at various points within the process:",
            "title": "Punch-out customisations"
        },
        {
            "location": "/p2p/punchout/#cxml-handshake",
            "text": "The format of the cXML sent in the initial connection to the supplier\u2019s site is generated from an XML using an XSLT transformation.  By default PROACTIS uses an XSLT embedded within the product however it is possible to use your own xslt by creating a file within the plugins folder called  PunchoutConnection_{supplierCode}.xslt .  Where  {supplierCode}  is the code of your supplier.  The fields which are available to the XSLT are listed below.   Context  SessionID  SupplierCode  DepartmentCode  CompanyCode  TemplateLabel  LogonName  ActualName  FirstName  Surname  Email  ReturnURL  URL  BuyerCookie  PayloadID  Timestamp  PunchoutFromIdentity  PunchoutToIdentity  PunchoutSenderIdentity  PunchoutSenderSharedSecret  DeliveryAddressGUID  DeliveryAddressName  DeliveryAddressLine1  DeliveryAddressLine2  DeliveryAddressLine3  DeliveryAddressLine4  DeliveryCountry  DeliveryCounty  DeliveryPostcode  DeliveryPostTown   An example XSLT document is available  here .",
            "title": "cXML Handshake"
        },
        {
            "location": "/p2p/punchout/#cxml-oci-returned-basket",
            "text": "When the basket is returned from the supplier by default it is transformed into the correct P2P format by using an XSLT embedded within the product.  This can be replaced by your own transform by creating a file in the plugins folder called  ReturnedPunchoutBasket_{supplierCode}.xslt  Where  {supplierCode}  is the code of your supplier.\nThe XSLT must generate XML in the following format:  <PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>  An example XSLT document is available  here .",
            "title": "cXML &amp; OCI Returned Basket"
        },
        {
            "location": "/p2p/punchout/#custom-return-page",
            "text": "By default the supplier posts their basket back to either  PunchoutReturned.aspx  (for cxml) or  PunchoutReturnedOCI.aspx  (for oci).  It is however possible for you to provide your own page for processing the returned basket.  This is configured by completing the following field against the supplier record.   This page should be placed in the Customer folder within the website.  The default  PunchoutReturned.aspx  page looks for the basket xml in the following form fields:   XML  cxml-urlencode  cxml-urlencoded  cXML-base64  oracleCart  the first form field   The default  PunchoutReturnedOCI.aspx  page looks for the basket xml in the form fields as follows:   The items are returned in arrays of fields.  Indexed from 1 onwards  First it checks there is a field called NEW_ITEM+DESCRIPTION[1].  If there isn\u2019t then it assumes that no basket items were returned.  It then loops through all fields which are named in the format NEW_xxxxx[n] where xxxxx is the name of a property and n is the item number.  Each of these form fields are then added into the xml.  The result xml will have the following format:   <PurchaseOrder>\n    <line number=1 item+description=\u2019red pen\u2019 etc etc />\n</PurchaseOrder>",
            "title": "Custom Return Page"
        },
        {
            "location": "/p2p/punchout/#market-place",
            "text": "PROACTIS P2P allows users to connect to a \u201cmarket place\u201d where they can then browse catalogues of one or more suppliers.  When they have finished browsing and click check-out then their returned basket is used to create one or more draft purchase orders (or requisitions) within PROACTIS.\nUnlike previous versions of PROACTIS it is now possible to configure marketplace connections directly within the product.",
            "title": "Market Place"
        },
        {
            "location": "/p2p/punchout/#configuration",
            "text": "Using the \u201cSystem Control\u201d application choose the Marketplaces option from the Supplier Maintenance menu.  Add a New market place and complete both the Details and Punch-out sections.  The following marketplace types (standards) are currently supported:   CXML  PROACTIS EGS  Procserve  Science warehouse   The Supplier Code Mapped From field specifies how the supplier code in the returned basket is mapped back to the suppliers within PROACTIS.",
            "title": "Configuration"
        },
        {
            "location": "/p2p/punchout/#customisation",
            "text": "The xml used for the initial connection is generated using an xslt embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called  MarketPlaceConnection_{marketPlaceName}.xslt .  Where  {marketPlaceName}  is the name of the configured marketplace.\nThe fields passed into the xml are listed below:   DepartmentCode  CompanyCode  LogonName  Email  ReturnURL  URL  BuyerCookie  PayloadID  Timestamp  PunchoutFromIdentity  PunchoutToIdentity  PunchoutSenderIdentity  PunchoutSenderSharedSecret   When the basket is returned from the market place by default it is transformed into the correct format by using an XSLT embedded within the product.  It is possible to provide your own xslt by creating a file in the plugins folder called  MarketPlaceResult_{marketPlaceName}.xslt .  Where  {marketPlaceName}  is the name of the configured marketplace.\nThe xslt needs to generate xml in the following format  <PurchaseOrder>\n  <PurchaseOrderHeader>\n    <SessionID></SessionID>\n    <Currency></Currency>\n    <TotalValue></TotalValue>\n  </PurchaseOrderHeader>\n  <PunchOutDetail>\n    <Item>\n      <Product></Product>\n      <Quantity></Quantity>\n      <Description></Description>\n      <UnitOfMeasure></UnitOfMeasure>\n      <UnitValue></UnitValue>\n      <Currency></Currency>\n      <UNSPSCCode></UNSPSCCode>\n      <Supplier></Supplier>\n      <References>\n        <Reference name=\"\"></Reference>\n      </References>\n    </Item>\n  </PunchOutDetail>\n</PurchaseOrder>",
            "title": "Customisation"
        },
        {
            "location": "/p2p/punchout/#egs-marketplaces",
            "text": "The EGS settings within the PROACTIS Connectivity snapin, do not refer to marketplace punch-out.  This are used to configure different functionality not covered by this document.",
            "title": "EGS Marketplaces"
        },
        {
            "location": "/p2p/punchout/#proxy-server",
            "text": "Connections to both supplier punch-out, and marketplaces honour the proxy server settings held in the  dsdba.ProxySettings  table.\nThis can be configured using the System Control application.",
            "title": "Proxy Server"
        },
        {
            "location": "/p2p/nominalvalidation/",
            "text": "Nominal Validation\n\n\nOverview\n\n\nThe core PROACTIS P2P product includes the functionality for complex nominal rules to be defined using the concept of nominal groups.\n\n\nIn some situations there might be a requirement to also validate the nominal coding entered against a purchase order line against an external source,  such as a finance system.\n\n\nIn a lot of cases this can be configured using the \nGeneric Nominal Validation\n snapin directly within the product.  This is the preferred approach as all the configuration is held within the database and the generic nominal validation module automatically provides extra features such as caching.\n\n\nIf \nGeneric Nominal Validation\n is not suitable for your needs then a custom DLL can be implemented providing you with complete control of the process.\n\n\n\n\nGetting Started\n\n\n\n\n\n\nCreate a new C# Class Library project called xyzNominalCheck. ( \nxyz\n can be anything)\n\n\n\n\n\n\nAdd a reference to \nPurchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll\n\n\n\n\n\n\nAdd a class called \nServices\n which implements the \ngrsCustInterfaces.INominals\n interface.\n\n\n\n\n\n\nWrite an implementation of the \ngrsCustInterfaces.INominals.NominalCheck\n method.\n\n\n\n\n\n\nbool grsCustInterfaces.INominals.NominalCheck(string NominalsXML, string POXML, ref string ErrorNominals)\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArgument\n\n\nDirection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNominalsXML\n\n\nIn\n\n\nAn xml document containing the nominals which need to be validated.  This also includes details of the database,  company and user.\n\n\n\n\n\n\nPOXML\n\n\nIn\n\n\nAn xml document containing the entire purchase order to validate.  By default this argument is blank unless the company-wide setting is enabled.\n\n\n\n\n\n\nErrorNominals\n\n\nOut\n\n\nIf the nominals fail validation,  then you should return an xml document listing the failing nominals.\n\n\n\n\n\n\n\n\nReturn Value\n\n\nThe function should return True if all nominals are valid and False if one or more nominals are invalid.\n\n\nDeployment\n\n\nYou dll should be complied (and named xyzNominalCheck.dll) and then copied into your \nPROACTIS P2P/Plugins\n  (or \nPlugins/[database-title]\n) folder.",
            "title": "Nominal Validation"
        },
        {
            "location": "/p2p/nominalvalidation/#nominal-validation",
            "text": "",
            "title": "Nominal Validation"
        },
        {
            "location": "/p2p/nominalvalidation/#overview",
            "text": "The core PROACTIS P2P product includes the functionality for complex nominal rules to be defined using the concept of nominal groups.  In some situations there might be a requirement to also validate the nominal coding entered against a purchase order line against an external source,  such as a finance system.  In a lot of cases this can be configured using the  Generic Nominal Validation  snapin directly within the product.  This is the preferred approach as all the configuration is held within the database and the generic nominal validation module automatically provides extra features such as caching.  If  Generic Nominal Validation  is not suitable for your needs then a custom DLL can be implemented providing you with complete control of the process.",
            "title": "Overview"
        },
        {
            "location": "/p2p/nominalvalidation/#getting-started",
            "text": "Create a new C# Class Library project called xyzNominalCheck. (  xyz  can be anything)    Add a reference to  Purchasing Server\\bin\\PROACTIS.P2P.grsCustInterfaces.dll    Add a class called  Services  which implements the  grsCustInterfaces.INominals  interface.    Write an implementation of the  grsCustInterfaces.INominals.NominalCheck  method.    bool grsCustInterfaces.INominals.NominalCheck(string NominalsXML, string POXML, ref string ErrorNominals)",
            "title": "Getting Started"
        },
        {
            "location": "/p2p/nominalvalidation/#arguments",
            "text": "Argument  Direction  Description      NominalsXML  In  An xml document containing the nominals which need to be validated.  This also includes details of the database,  company and user.    POXML  In  An xml document containing the entire purchase order to validate.  By default this argument is blank unless the company-wide setting is enabled.    ErrorNominals  Out  If the nominals fail validation,  then you should return an xml document listing the failing nominals.",
            "title": "Arguments"
        },
        {
            "location": "/p2p/nominalvalidation/#return-value",
            "text": "The function should return True if all nominals are valid and False if one or more nominals are invalid.",
            "title": "Return Value"
        },
        {
            "location": "/p2p/nominalvalidation/#deployment",
            "text": "You dll should be complied (and named xyzNominalCheck.dll) and then copied into your  PROACTIS P2P/Plugins   (or  Plugins/[database-title] ) folder.",
            "title": "Deployment"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Invoice Posting"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Budget Checking"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Imaging Integration"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Invoices"
        },
        {
            "location": "/placeholder/",
            "text": "Placeholder text",
            "title": "Spend Analytics"
        },
        {
            "location": "/apf/overview/",
            "text": "Overview\n\n\nThe Accelerated Payments Facility (APF) is a self-contained \u201cmicro service\u201d which sits between a number of systems as shown in the diagram below.\n\n\n\nGlossary\n\n\n\n\nAPF \u2013 Accelerated Payments Facility.   This is the central piece of software provided by PROACTIS\n\n\nP2P \u2013 Purchase-To-Pay system.  This can be either PROACTIS own P2P system or an alternative system provided by a 3rd party such as Coda.\n\n\nKDM \u2013 Key Decision Maker.  The responsible party for the supplier\n\n\nAML \u2013 Anti-money laundering checks.\n\n\nApplication. The request created by the supplier to have their invoices paid as soon as possible.  Each application contains one or more invoices.\n\n\nPayment \u2013 Internally within the APF module invoices are referred to as Payments\n\n\ns2c \u2013Source-To-Contract.  The supplier portal provided by PROACTIS.  Also known as Supplier Network.\n\n\n\n\nReadership\n\n\nThis document is aimed at developers who have been tasked with integrating their own supplier Portal system with APF.\nIt would be advisable to be familiar with the general APF process before reading this document.\n\n\nIntellectual Property\n\n\nThis document contains information related to certain products and services which is proprietary to PROACTIS Group Limited and must not be disclosed, in whole or in part, to any third party.  Notably, all Intellectual property related to the deployment of the Accelerated Payment Facility is to the benefit of and remains the property of PROACTIS Group Limited.\n\n\nImportant Notes\n\n\nIt should be noted that the PROACTIS APF product is still under active development and changes may be made as a result of testing (either internally or externally).",
            "title": "overview"
        },
        {
            "location": "/apf/overview/#overview",
            "text": "The Accelerated Payments Facility (APF) is a self-contained \u201cmicro service\u201d which sits between a number of systems as shown in the diagram below.",
            "title": "Overview"
        },
        {
            "location": "/apf/overview/#glossary",
            "text": "APF \u2013 Accelerated Payments Facility.   This is the central piece of software provided by PROACTIS  P2P \u2013 Purchase-To-Pay system.  This can be either PROACTIS own P2P system or an alternative system provided by a 3rd party such as Coda.  KDM \u2013 Key Decision Maker.  The responsible party for the supplier  AML \u2013 Anti-money laundering checks.  Application. The request created by the supplier to have their invoices paid as soon as possible.  Each application contains one or more invoices.  Payment \u2013 Internally within the APF module invoices are referred to as Payments  s2c \u2013Source-To-Contract.  The supplier portal provided by PROACTIS.  Also known as Supplier Network.",
            "title": "Glossary"
        },
        {
            "location": "/apf/overview/#readership",
            "text": "This document is aimed at developers who have been tasked with integrating their own supplier Portal system with APF.\nIt would be advisable to be familiar with the general APF process before reading this document.",
            "title": "Readership"
        },
        {
            "location": "/apf/overview/#intellectual-property",
            "text": "This document contains information related to certain products and services which is proprietary to PROACTIS Group Limited and must not be disclosed, in whole or in part, to any third party.  Notably, all Intellectual property related to the deployment of the Accelerated Payment Facility is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "Intellectual Property"
        },
        {
            "location": "/apf/overview/#important-notes",
            "text": "It should be noted that the PROACTIS APF product is still under active development and changes may be made as a result of testing (either internally or externally).",
            "title": "Important Notes"
        },
        {
            "location": "/apf/overview/",
            "text": "Overview\n\n\nThe Accelerated Payments Facility (APF) is a self-contained \u201cmicro service\u201d which sits between a number of systems as shown in the diagram below.\n\n\n\nGlossary\n\n\n\n\nAPF \u2013 Accelerated Payments Facility.   This is the central piece of software provided by PROACTIS\n\n\nP2P \u2013 Purchase-To-Pay system.  This can be either PROACTIS own P2P system or an alternative system provided by a 3rd party such as Coda.\n\n\nKDM \u2013 Key Decision Maker.  The responsible party for the supplier\n\n\nAML \u2013 Anti-money laundering checks.\n\n\nApplication. The request created by the supplier to have their invoices paid as soon as possible.  Each application contains one or more invoices.\n\n\nPayment \u2013 Internally within the APF module invoices are referred to as Payments\n\n\ns2c \u2013Source-To-Contract.  The supplier portal provided by PROACTIS.  Also known as Supplier Network.\n\n\n\n\nReadership\n\n\nThis document is aimed at developers who have been tasked with integrating their own supplier Portal system with APF.\nIt would be advisable to be familiar with the general APF process before reading this document.\n\n\nIntellectual Property\n\n\nThis document contains information related to certain products and services which is proprietary to PROACTIS Group Limited and must not be disclosed, in whole or in part, to any third party.  Notably, all Intellectual property related to the deployment of the Accelerated Payment Facility is to the benefit of and remains the property of PROACTIS Group Limited.\n\n\nImportant Notes\n\n\nIt should be noted that the PROACTIS APF product is still under active development and changes may be made as a result of testing (either internally or externally).",
            "title": "p2p to apf"
        },
        {
            "location": "/apf/overview/#overview",
            "text": "The Accelerated Payments Facility (APF) is a self-contained \u201cmicro service\u201d which sits between a number of systems as shown in the diagram below.",
            "title": "Overview"
        },
        {
            "location": "/apf/overview/#glossary",
            "text": "APF \u2013 Accelerated Payments Facility.   This is the central piece of software provided by PROACTIS  P2P \u2013 Purchase-To-Pay system.  This can be either PROACTIS own P2P system or an alternative system provided by a 3rd party such as Coda.  KDM \u2013 Key Decision Maker.  The responsible party for the supplier  AML \u2013 Anti-money laundering checks.  Application. The request created by the supplier to have their invoices paid as soon as possible.  Each application contains one or more invoices.  Payment \u2013 Internally within the APF module invoices are referred to as Payments  s2c \u2013Source-To-Contract.  The supplier portal provided by PROACTIS.  Also known as Supplier Network.",
            "title": "Glossary"
        },
        {
            "location": "/apf/overview/#readership",
            "text": "This document is aimed at developers who have been tasked with integrating their own supplier Portal system with APF.\nIt would be advisable to be familiar with the general APF process before reading this document.",
            "title": "Readership"
        },
        {
            "location": "/apf/overview/#intellectual-property",
            "text": "This document contains information related to certain products and services which is proprietary to PROACTIS Group Limited and must not be disclosed, in whole or in part, to any third party.  Notably, all Intellectual property related to the deployment of the Accelerated Payment Facility is to the benefit of and remains the property of PROACTIS Group Limited.",
            "title": "Intellectual Property"
        },
        {
            "location": "/apf/overview/#important-notes",
            "text": "It should be noted that the PROACTIS APF product is still under active development and changes may be made as a result of testing (either internally or externally).",
            "title": "Important Notes"
        },
        {
            "location": "/apf/financesystem_to_paymentserver/",
            "text": "APF Finance System to Payments Server\n\n\nThis document can be used along with the sample C# program:\n    \nPROACTIS.AcceleratedPayments.Web.ExampleBuyerAPIClient\n\n\nThis document is only concerned with the integrations between the Finance System and the Payments Server.\nCurrently there is only one integration between these two systems which is the flow of supplier details from the finance system to the payment server.\n\u2003\n\n\nAuthentication\n\n\nAll API calls require the username and password be supplied in a base64 encoded format in the Authorisation header of the request.\nIn C# the code for doing this would look like the following:\n\n\ncredentials = Convert.ToBase64String(Encoding.UTF8.GetBytes(USER + \":\" + PASSWORD));\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Basic \" + credentials);\n\n\n\n\nFor example\n\n\nIf the details are incorrect then the site will respond with a 401 error\n\n\nFrom \nhttps://en.wikipedia.org/wiki/Basic_access_authentication\n\nWhen the user agent wants to send the server authentication credentials it may use the Authorization field.\nThe Authorization field is constructed as follows: \n\n\n1 The username and password are combined with a single colon.\n\n2 The resulting string is encoded into an octet sequence. \n\n3 The resulting string is encoded using a variant of Base64. \n\n4 The authorization method and a space i.e. \"Basic \" is then put before the encoded string.\n\nFor example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the b\n\n\nase64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. \nThen the Authorization header will appear as:\nAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l",
            "title": "Finance System to Payments Server"
        },
        {
            "location": "/apf/financesystem_to_paymentserver/#apf-finance-system-to-payments-server",
            "text": "This document can be used along with the sample C# program:\n     PROACTIS.AcceleratedPayments.Web.ExampleBuyerAPIClient  This document is only concerned with the integrations between the Finance System and the Payments Server.\nCurrently there is only one integration between these two systems which is the flow of supplier details from the finance system to the payment server.",
            "title": "APF Finance System to Payments Server"
        },
        {
            "location": "/apf/financesystem_to_paymentserver/#authentication",
            "text": "All API calls require the username and password be supplied in a base64 encoded format in the Authorisation header of the request.\nIn C# the code for doing this would look like the following:  credentials = Convert.ToBase64String(Encoding.UTF8.GetBytes(USER + \":\" + PASSWORD));\nclient.DefaultRequestHeaders.Add(\"Authorization\", \"Basic \" + credentials);  For example  If the details are incorrect then the site will respond with a 401 error  From  https://en.wikipedia.org/wiki/Basic_access_authentication \nWhen the user agent wants to send the server authentication credentials it may use the Authorization field.\nThe Authorization field is constructed as follows:   1 The username and password are combined with a single colon. \n2 The resulting string is encoded into an octet sequence.  \n3 The resulting string is encoded using a variant of Base64.  \n4 The authorization method and a space i.e. \"Basic \" is then put before the encoded string. \nFor example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the b  ase64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. \nThen the Authorization header will appear as:\nAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l",
            "title": "Authentication"
        },
        {
            "location": "/s2c/placeholder/",
            "text": "Placeholder text",
            "title": "S2C"
        },
        {
            "location": "/dueNorth/Placeholder/",
            "text": "Placeholder text",
            "title": "DueNorth"
        }
    ]
}